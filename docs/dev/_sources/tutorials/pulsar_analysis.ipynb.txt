{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:30.830734Z",
     "iopub.status.busy": "2020-11-04T17:01:30.830188Z",
     "iopub.status.idle": "2020-11-04T17:01:31.162671Z",
     "shell.execute_reply": "2020-11-04T17:01:31.161773Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:31.171228Z",
     "iopub.status.busy": "2020-11-04T17:01:31.170592Z",
     "iopub.status.idle": "2020-11-04T17:01:32.265956Z",
     "shell.execute_reply": "2020-11-04T17:01:32.265387Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    ")\n",
    "from gammapy.maps import Map, WcsGeom, MapAxis\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import Datasets, SpectrumDataset, FluxPointsDataset\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.270738Z",
     "iopub.status.busy": "2020-11-04T17:01:32.270156Z",
     "iopub.status.idle": "2020-11-04T17:01:32.309169Z",
     "shell.execute_reply": "2020-11-04T17:01:32.308455Z"
    }
   },
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.316204Z",
     "iopub.status.busy": "2020-11-04T17:01:32.315606Z",
     "iopub.status.idle": "2020-11-04T17:01:32.364450Z",
     "shell.execute_reply": "2020-11-04T17:01:32.365158Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList\n",
      "---------\n",
      "\n",
      "  Instrument       : None\n",
      "  Telescope        : CTA\n",
      "  Obs. ID          : 111630\n",
      "\n",
      "  Number of events : 101430\n",
      "  Event rate       : 56.350 1 / s\n",
      "\n",
      "  Time start       : 59300.833333333336\n",
      "  Time stop        : 59300.854166666664\n",
      "\n",
      "  Min. energy      : 3.00e-02 TeV\n",
      "  Max. energy      : 1.52e+02 TeV\n",
      "  Median energy    : 1.00e-01 TeV\n",
      "\n",
      "  Max. offset      : 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.372115Z",
     "iopub.status.busy": "2020-11-04T17:01:32.371188Z",
     "iopub.status.idle": "2020-11-04T17:01:32.425340Z",
     "shell.execute_reply": "2020-11-04T17:01:32.424805Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList\n",
      "---------\n",
      "\n",
      "  Instrument       : None\n",
      "  Telescope        : CTA\n",
      "  Obs. ID          : 111630\n",
      "\n",
      "  Number of events : 843\n",
      "  Event rate       : 0.468 1 / s\n",
      "\n",
      "  Time start       : 59300.833333333336\n",
      "  Time stop        : 59300.854166666664\n",
      "\n",
      "  Min. energy      : 3.00e-02 TeV\n",
      "  Max. energy      : 4.33e+01 TeV\n",
      "  Median energy    : 1.07e-01 TeV\n",
      "\n",
      "  Max. offset      : 1.7 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.433875Z",
     "iopub.status.busy": "2020-11-04T17:01:32.432721Z",
     "iopub.status.idle": "2020-11-04T17:01:32.436367Z",
     "shell.execute_reply": "2020-11-04T17:01:32.436964Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.444000Z",
     "iopub.status.busy": "2020-11-04T17:01:32.442248Z",
     "iopub.status.idle": "2020-11-04T17:01:32.445113Z",
     "shell.execute_reply": "2020-11-04T17:01:32.445603Z"
    }
   },
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.467004Z",
     "iopub.status.busy": "2020-11-04T17:01:32.465396Z",
     "iopub.status.idle": "2020-11-04T17:01:32.674865Z",
     "shell.execute_reply": "2020-11-04T17:01:32.673978Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Phasogram with angular cut of 0.2 deg')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.680870Z",
     "iopub.status.busy": "2020-11-04T17:01:32.679911Z",
     "iopub.status.idle": "2020-11-04T17:01:32.684814Z",
     "shell.execute_reply": "2020-11-04T17:01:32.684109Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.689094Z",
     "iopub.status.busy": "2020-11-04T17:01:32.688522Z",
     "iopub.status.idle": "2020-11-04T17:01:32.692405Z",
     "shell.execute_reply": "2020-11-04T17:01:32.691781Z"
    }
   },
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.725981Z",
     "iopub.status.busy": "2020-11-04T17:01:32.721498Z",
     "iopub.status.idle": "2020-11-04T17:01:32.946427Z",
     "shell.execute_reply": "2020-11-04T17:01:32.945867Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Phasogram with angular cut of 0.2 deg')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.953238Z",
     "iopub.status.busy": "2020-11-04T17:01:32.952642Z",
     "iopub.status.idle": "2020-11-04T17:01:32.956519Z",
     "shell.execute_reply": "2020-11-04T17:01:32.955875Z"
    }
   },
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.961159Z",
     "iopub.status.busy": "2020-11-04T17:01:32.960574Z",
     "iopub.status.idle": "2020-11-04T17:01:32.964537Z",
     "shell.execute_reply": "2020-11-04T17:01:32.963903Z"
    }
   },
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:32.972049Z",
     "iopub.status.busy": "2020-11-04T17:01:32.970676Z",
     "iopub.status.idle": "2020-11-04T17:01:33.546053Z",
     "shell.execute_reply": "2020-11-04T17:01:33.546818Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 432x288 with 2 Axes>,\n",
       " <WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <matplotlib.colorbar.Colorbar at 0x7f07dd064cc0>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:33.566844Z",
     "iopub.status.busy": "2020-11-04T17:01:33.563867Z",
     "iopub.status.idle": "2020-11-04T17:01:34.090434Z",
     "shell.execute_reply": "2020-11-04T17:01:34.089852Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n",
      "No thresholds defined for obs 111630\n"
     ]
    }
   ],
   "source": [
    "e_true = MapAxis.from_energy_bounds(\n",
    "    0.003, 10, 100, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "e_reco = MapAxis.from_energy_bounds(0.01, 10, 30, unit=\"TeV\", name=\"energy\")\n",
    "\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "dataset_maker = SpectrumDatasetMaker()\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(dataset_empty, obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:34.144160Z",
     "iopub.status.busy": "2020-11-04T17:01:34.111717Z",
     "iopub.status.idle": "2020-11-04T17:01:36.085602Z",
     "shell.execute_reply": "2020-11-04T17:01:36.085038Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/irf/edisp_kernel.py:536: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  caxes = ax.pcolormesh(x, y, z.T, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<AxesSubplot:title={'center':'Counts'}, xlabel='Energy [TeV]'>,\n",
       " <AxesSubplot:title={'center':'Exposure'}, xlabel='Energy_true [TeV]', ylabel='Data [m2 s]'>,\n",
       " <AxesSubplot:title={'center':'Energy Dispersion'}, xlabel='$E_\\\\mathrm{True}$ [TeV]', ylabel='$E_\\\\mathrm{Reco}$ [TeV]'>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:36.099806Z",
     "iopub.status.busy": "2020-11-04T17:01:36.099180Z",
     "iopub.status.idle": "2020-11-04T17:01:36.797886Z",
     "shell.execute_reply": "2020-11-04T17:01:36.797269Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 101\n",
      "\ttotal stat : 7.07\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"vela psr\")\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model\n",
    "    geom = dataset.counts.geom\n",
    "    data = geom.energy_mask(energy_min=emin_fit, energy_max=emax_fit)\n",
    "    dataset.mask_fit = Map.from_geom(geom=geom, data=data)\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:36.819525Z",
     "iopub.status.busy": "2020-11-04T17:01:36.809263Z",
     "iopub.status.idle": "2020-11-04T17:01:41.593240Z",
     "shell.execute_reply": "2020-11-04T17:01:41.592660Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/units/quantity.py:377: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
      "  subok=False, ndmin=ndmin)\n"
     ]
    }
   ],
   "source": [
    "energy_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.models = model\n",
    "\n",
    "fpe = FluxPointsEstimator(energy_edges=energy_edges, source=\"vela psr\")\n",
    "\n",
    "flux_points = fpe.run(datasets=[dataset])\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T17:01:41.614958Z",
     "iopub.status.busy": "2020-11-04T17:01:41.612641Z",
     "iopub.status.idle": "2020-11-04T17:01:42.762627Z",
     "shell.execute_reply": "2020-11-04T17:01:42.762092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0.01030801, 0.00769884, 0.02056718, 0.03259678, 0.02434588]), array([0.01297701, 0.00863825, 0.02589254, 0.04103691, 0.02731653]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:669: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:415: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:416: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:415: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:416: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f07dd5e46a0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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G7t27WrW9Xx8fOjbty/du3fHYunQ1ZlL6SellFLK40466SS+++47vvnmGyZNmsTixYsZO3Zsi1YBdOnSRTf9aQat+JVSSnnNmDFjWLVqFWlpabz44otYrVYqKiqYPHkyy5cvb3JyoMDAQAYNGqQT/5qgQ1f8OsavlFLtQ2JiIieffDIA+/fvZ8+ePcydO5fu3btzyy23sH///kavUTXxLykpSbv+G9ChPxkd41dKqfanZ8+ebNy4kU8++YSxY8dy3333kZSUxIYNG5r0/ujoaAYNGqRd//VobK9+pZRSyuNEhPHjxzN+/Hh27tzJypUrGT58OABLly4lJCSE6dOn15vKNyAggEGDBrFnzx4yMzM9GXqb16Hv+JVSSrV/vXv35rbbbsNisWCM4bnnnuP888+nV69e3HvvvdSXet1isZCUlESPHj10u99qtOJXSinVbogIX331Fe+++y7JycnceuutdO/enaeffrre98TGxtK/f3/d8MehQ1f8OrlPKaU6HovFwqRJk1i3bh2//vorF198sXMYYNu2baxZs+YPywJDQkIYNGgQwcHB3gi5TenQFb9O7lNKqY5t0KBBPPnkk4wZMwaAZcuWMW3aNPr27cu//vWvGsmBfH19GTBgANHR0V6Ktm3o0BW/UkqpzuXee+/l9ddfp0ePHlx33XUkJiZyww03OF8XEZKSkkhMTPRilN6lFb9SSqkOw8fHh2nTpvH555/z448/Mn36dMrLywF7YqAvvvgCm81G165d6dOnT6dc79/5fmKllFKdwogRI3juued45JFHAPjmm2846aSTGDx4ME888QQ+Pj4MHDiw3iWBHZVW/EoppTqF0aNH8+KLLxIaGsrVV19NYmIit912G3FxcQQFBXk7PI/Ril8ppVSn4OfnxwUXXMD//vc//vvf/3L66aezcuVKQkJC6N+/P6WlpRhjvB2m20lH/iFFZAowpW/fvpdt27bN2+EopZRqY4qKiggKCqKyspL+/fvj7+/PjBkzOO200/D39/d2eK0yevToDcaYkbWPd+g7fl3Op5RSqiFVXfw2m42FCxditVq56667OOOMM3jiiSfIyMjwcoSu16ErfqWUUqopfH19mTt3Lj/99BMff/wxRx99NCtWrOCnn34CoKKiwssRuo4m6VFKKaUcRISTTz6Zk08+mfXr12Oz2QBYvnw533zzDbNn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\n",
      "text/plain": [
       "<Figure size 576x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_spectrum, ax_residuals = flux_points_dataset.plot_fit()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residuals.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
