{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    ")\n",
    "from gammapy.maps import Map, WcsGeom, MapAxis\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import Datasets, SpectrumDataset, FluxPointsDataset\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 101430\n",
      "- Median energy: 0.1 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 843\n",
      "- Median energy: 0.107 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n",
      "No thresholds defined for obs 111630\n"
     ]
    }
   ],
   "source": [
    "e_true = MapAxis.from_energy_bounds(\n",
    "    0.003, 10, 100, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "e_reco = MapAxis.from_energy_bounds(0.01, 10, 30, unit=\"TeV\", name=\"energy\")\n",
    "\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "dataset_maker = SpectrumDatasetMaker()\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(dataset_empty, obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 107\n",
      "\ttotal stat : 7.07\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"vela psr\")\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model\n",
    "    dataset.mask_fit = dataset.counts.geom.energy_mask(\n",
    "        emin=emin_fit, emax=emax_fit\n",
    "    )\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.models = model\n",
    "\n",
    "fpe = FluxPointsEstimator(e_edges=e_edges, source=\"vela psr\")\n",
    "\n",
    "flux_points = fpe.run(datasets=[dataset])\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:664: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:665: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:312: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:313: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:312: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:313: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f4f59d3c780>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAf4AAAF3CAYAAABE0Ck1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy86wFpkAAAACXBIWXMAAAsTAAALEwEAmpwYAABm/0lEQVR4nO3dd3zU9f3A8df7svdlsgKETdggKigoWEDAA5SiQB3gotraWjscv1q1ta22ta5qtYqK1VZwIgRkOUHrABUHAVkBwg5k7+Q+vz/ucoSYkJDc5db7+Xjkkft+73vf7/sOcu/vZ4sxBqWUUkoFB4u3A1BKKaVU+9HEr5RSSgURTfxKKaVUENHEr5RSSgURTfxKKaVUENHEr5RSSgWRUG8H4EkiMg2YFhcXd33fvn29HY5SSinVbjZt2pRnjEltuF+CYRz/yJEjzcaNG70dhlJKKdVuRGSTMWZkw/1a1a+UUkoFEU38SimlVBDRxK+UUkoFkYDu3FfHbrdjt9uxWPQ+RykVfKqrq8nNzaWiosLboSgPiIyMJD09nbCwsBYdHxSJv7q6ms2bNxMfH09iYiJWq1VvApRSQSM3N5e4uDgyMjIQEW+Ho9zIGMOxY8fIzc2lR48eLXpNUCR+cJT6CwoKKCgowGKxuG4CEhISCAkJ8XZ4SinlMRUVFZr0A5SIkJyczNGjR1v8mqBJ/PXVvwkQkZNqAvQmQCkViDTpB67T/bcN+vpuYwyFhYXk5OSwefNmduzYwbFjx6itrfV2aEopFTBCQkIYNmwYQ4cOZcSIEXz00UetOs/DDz9MWVlZo8+tX7+egQMHMmzYMPbv38+sWbMA+PLLL1m5cmWrY2+pnJwcBg0a1OZjPC3oE399ehOglFKeERUVxZdffsnmzZu57777uOOOO1p1nlMl/v/85z/8+te/5ssvv6RLly68+uqrQPslfn+hib8JehOglFKeUVRURGJiomv7b3/7G2eeeSZDhgzh7rvvBqC0tJSLLrqIoUOHMmjQIJYsWcKjjz7KgQMHGD9+POPHjz/pnAsXLuTll1/mD3/4A5dffrmrZF1VVcVdd93FkiVLGDZsGEuWLDnpdYsWLeLiiy9m2rRp9OjRg8cee4wHH3yQ4cOHM2rUKI4fPw44bh5GjRrFkCFDuOSSS8jPzwdg06ZNDB06lNGjR/P444+7zltbW8tvfvMb1/v617/+5ZHPsjUCuo2/bq7+7t27t+k8dTcBhYWF2idAKeXf3rodDn3t3nN2HAxT7j/lIeXl5QwbNoyKigoOHjzIO++8A8CaNWvYvn07n376KcYYpk+fzgcffMDRo0fp3LkzK1asAKCwsJCEhAQefPBB3n33XVJSUk46/3XXXceGDRuw2WzMmjWLnJwcAMLDw/nDH/7Axo0beeyxxxqN7ZtvvuGLL76goqKC3r1785e//IUvvviCW265hX//+9/84he/4KqrruIf//gH559/PnfddRe///3vefjhh7n66qtd+3/zm9+4zvnMM8+QkJDAZ599RmVlJeeeey6TJk3yib4WAV3iN8YsN8YsiIuLc+c5T6oJ2LlzJ8ePH8dut7vtGkopFWjqqvq3bt3KqlWruOqqqzDGsGbNGtasWcPw4cMZMWIEW7duZfv27QwePJh169Zx2223sX79ehISEjwW2/jx44mLiyM1NZWEhASmTZsGwODBg8nJyaGwsJCCggLOP/98AObNm8cHH3zwvf1XXnml65xr1qzh3//+N8OGDePss8/m2LFjbN++3WPv4XQEdInf04wxJw0RTEhIcA0R1HkClFI+qZmSeXsYPXo0eXl5HD16FGMMd9xxBz/+8Y+/d9ymTZtYuXIld9xxB5MmTeKuu+7ySDwRERGuxxaLxbVtsVioqalp8nXGmCZL8MYY/vGPf3DhhReetL+uJsKbNDu5id1uJz8/n127drF582Z2795NQUEBwbD6oVJKnY6tW7dSW1tLcnIyF154Ic8++ywlJSUA7N+/nyNHjnDgwAGio6O54oor+PWvf83nn38OQFxcHMXFxad1vda8pr66Qt369esBeOGFFzj//POxWq0kJCSwYcMGwNG5sM6FF17IE088QXV1NQDfffcdpaWlrY7BnbTE7wF2u53jx49z/PhxQkJCsFqtJCYmEh8f7xPtO0op1d7q2vjBURp+/vnnCQkJYdKkSWRnZzN69GgAYmNjefHFF9mxYwe/+c1vsFgshIWF8cQTTwCwYMECpkyZQqdOnXj33XdbdO3x48dz//33M2zYMO644w5mz5592vE///zz3HDDDZSVldGzZ0+ee+45AJ577jmuueYaoqOjTyrdX3fddeTk5DBixAiMMaSmprJ06dLTvq4nSDCUSAcPHmwWLVrk7TAIDQ3FarWSlJSEO/sd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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "ax_spectrum, ax_residual = flux_points_dataset.peek()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residual.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
