{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/simulate_3d.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[simulate_3d.ipynb](../_static/notebooks/simulate_3d.ipynb) |\n",
    "[simulate_3d.py](../_static/notebooks/simulate_3d.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3D simulation and fitting\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of 3D extraction and datasets used in gammapy, see for instance the [first analysis tutorial](analysis_1.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "To simulate a specific observation, it is not always necessary to simulate the full photon list. For many uses cases, simulating directly a reduced binned dataset is enough: the IRFs reduced in the correct geometry are combined with a source model to predict an actual number of counts per bin. The latter is then used to simulate a reduced dataset using Poisson probability distribution.\n",
    "\n",
    "This can be done to check the feasibility of a measurement (performance / sensitivity study), to test whether fitted parameters really provide a good fit to the data etc.\n",
    "\n",
    "Here we will see how to perform a 3D simulation of a CTA observation, assuming both the spectral and spatial morphology of an observed source.\n",
    "\n",
    "**Objective: simulate a 3D observation of a source with CTA using the CTA 1DC response and fit it with the assumed source model.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "Here we can't use the regular observation objects that are connected to a `DataStore`. Instead we will create a fake `~gammapy.data.Observation` that contain some pointing information and the CTA 1DC IRFs (that are loaded with `~gammapy.irf.load_cta_irfs`).\n",
    "\n",
    "Then we will create a `~gammapy.datasets.MapDataset` geometry and create it with the `~gammapy.makers.MapDatasetMaker`.\n",
    "\n",
    "Then we will be able to define a model consisting of  a `~gammapy.modeling.models.PowerLawSpectralModel` and a `~gammapy.modeling.models.GaussianSpatialModel`. We will assign it to the dataset and fake the count data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports and versions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:36.978729Z",
     "iopub.status.busy": "2020-11-21T12:20:36.978157Z",
     "iopub.status.idle": "2020-11-21T12:20:37.220992Z",
     "shell.execute_reply": "2020-11-21T12:20:37.220388Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:37.225407Z",
     "iopub.status.busy": "2020-11-21T12:20:37.224889Z",
     "iopub.status.idle": "2020-11-21T12:20:38.068352Z",
     "shell.execute_reply": "2020-11-21T12:20:38.067485Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.maps import WcsGeom, MapAxis\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    GaussianSpatialModel,\n",
    "    SkyModel,\n",
    "    Models,\n",
    "    FoVBackgroundModel,\n",
    ")\n",
    "from gammapy.makers import MapDatasetMaker, SafeMaskMaker\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.data import Observation\n",
    "from gammapy.datasets import MapDataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:38.076415Z",
     "iopub.status.busy": "2020-11-21T12:20:38.071521Z",
     "iopub.status.idle": "2020-11-21T12:20:39.836535Z",
     "shell.execute_reply": "2020-11-21T12:20:39.836010Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "Gammapy package:\r\n",
      "\r\n",
      "\tversion                : 0.18.3.dev3+g4a69836b4 \r\n",
      "\tpath                   : /home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy \r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!gammapy info --no-envvar --no-dependencies --no-system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will simulate using the CTA-1DC IRFs shipped with gammapy. Note that for dedictaed CTA simulations, you can simply use [`Observation.from_caldb()`]() without having to externally load the IRFs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:39.847813Z",
     "iopub.status.busy": "2020-11-21T12:20:39.843719Z",
     "iopub.status.idle": "2020-11-21T12:20:39.922199Z",
     "shell.execute_reply": "2020-11-21T12:20:39.921383Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n"
     ]
    }
   ],
   "source": [
    "# Loading IRFs\n",
    "irfs = load_cta_irfs(\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:39.926792Z",
     "iopub.status.busy": "2020-11-21T12:20:39.926354Z",
     "iopub.status.idle": "2020-11-21T12:20:39.929408Z",
     "shell.execute_reply": "2020-11-21T12:20:39.928942Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define the observation parameters (typically the observation duration and the pointing position):\n",
    "livetime = 2.0 * u.hr\n",
    "pointing = SkyCoord(0, 0, unit=\"deg\", frame=\"galactic\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:39.939230Z",
     "iopub.status.busy": "2020-11-21T12:20:39.936341Z",
     "iopub.status.idle": "2020-11-21T12:20:39.948896Z",
     "shell.execute_reply": "2020-11-21T12:20:39.948429Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define map geometry for binned simulation\n",
    "energy_reco = MapAxis.from_edges(\n",
    "    np.logspace(-1.0, 1.0, 10), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(0, 0),\n",
    "    binsz=0.02,\n",
    "    width=(6, 6),\n",
    "    frame=\"galactic\",\n",
    "    axes=[energy_reco],\n",
    ")\n",
    "# It is usually useful to have a separate binning for the true energy axis\n",
    "energy_true = MapAxis.from_edges(\n",
    "    np.logspace(-1.5, 1.5, 30), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "\n",
    "empty = MapDataset.create(geom, name=\"dataset-simu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:39.960891Z",
     "iopub.status.busy": "2020-11-21T12:20:39.958353Z",
     "iopub.status.idle": "2020-11-21T12:20:39.969905Z",
     "shell.execute_reply": "2020-11-21T12:20:39.969333Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : model-simu\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   3.000              \n",
      "    amplitude               :   1.00e-11  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :   0.200  deg         \n",
      "    lat_0                   :   0.100  deg         \n",
      "    sigma                   :   0.300  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "\n",
      "Component 1: FoVBackgroundModel\n",
      "\n",
      "  Name                      : dataset-simu-bkg\n",
      "  Datasets names            : ['dataset-simu']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define sky model to used simulate the data.\n",
    "# Here we use a Gaussian spatial model and a Power Law spectral model.\n",
    "spatial_model = GaussianSpatialModel(\n",
    "    lon_0=\"0.2 deg\", lat_0=\"0.1 deg\", sigma=\"0.3 deg\", frame=\"galactic\"\n",
    ")\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=3, amplitude=\"1e-11 cm-2 s-1 TeV-1\", reference=\"1 TeV\"\n",
    ")\n",
    "model_simu = SkyModel(\n",
    "    spatial_model=spatial_model,\n",
    "    spectral_model=spectral_model,\n",
    "    name=\"model-simu\",\n",
    ")\n",
    "\n",
    "bkg_model = FoVBackgroundModel(dataset_name=\"dataset-simu\")\n",
    "\n",
    "models = Models([model_simu, bkg_model])\n",
    "print(models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, comes the main part of dataset simulation. We create an in-memory observation and an empty dataset. We then predict the number of counts for the given model, and Poission fluctuate it using `fake()` to make a simulated counts maps. Keep in mind that it is important to specify the `selection` of the maps that you want to produce "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:39.982132Z",
     "iopub.status.busy": "2020-11-21T12:20:39.981708Z",
     "iopub.status.idle": "2020-11-21T12:20:39.985789Z",
     "shell.execute_reply": "2020-11-21T12:20:39.986131Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observation\n",
      "\n",
      "\tobs id            : 0 \n",
      " \ttstart            : 51544.00\n",
      "\ttstop             : 51544.08\n",
      "\tduration          : 7200.00 s\n",
      "\tpointing (icrs)   : 266.4 deg, -28.9 deg\n",
      "\n",
      "\tdeadtime fraction : 0.0%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create an in-memory observation\n",
    "obs = Observation.create(pointing=pointing, livetime=livetime, irfs=irfs)\n",
    "print(obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:39.992205Z",
     "iopub.status.busy": "2020-11-21T12:20:39.991528Z",
     "iopub.status.idle": "2020-11-21T12:20:41.983264Z",
     "shell.execute_reply": "2020-11-21T12:20:41.982747Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : dataset-simu \n",
      "\n",
      "  Total counts                    : nan \n",
      "  Total background counts         : 161250.95\n",
      "  Total excess counts             : nan\n",
      "\n",
      "  Predicted counts                : 161250.95\n",
      "  Predicted background counts     : 161250.95\n",
      "  Predicted excess counts         : nan\n",
      "\n",
      "  Exposure min                    : 6.41e+07 m2 s\n",
      "  Exposure max                    : 2.53e+10 m2 s\n",
      "\n",
      "  Number of total bins            : 0 \n",
      "  Number of fit bins              : 804492 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : nan\n",
      "\n",
      "  Number of models                : 0 \n",
      "  Number of parameters            : 0\n",
      "  Number of free parameters       : 0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Make the MapDataset\n",
    "maker = MapDatasetMaker(selection=[\"exposure\", \"background\", \"psf\", \"edisp\"])\n",
    "\n",
    "maker_safe_mask = SafeMaskMaker(methods=[\"offset-max\"], offset_max=4.0 * u.deg)\n",
    "\n",
    "dataset = maker.run(empty, obs)\n",
    "dataset = maker_safe_mask.run(dataset, obs)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:41.990649Z",
     "iopub.status.busy": "2020-11-21T12:20:41.988783Z",
     "iopub.status.idle": "2020-11-21T12:20:42.760010Z",
     "shell.execute_reply": "2020-11-21T12:20:42.759521Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : dataset-simu \n",
      "\n",
      "  Total counts                    : 169778 \n",
      "  Total background counts         : 161250.95\n",
      "  Total excess counts             : 8527.05\n",
      "\n",
      "  Predicted counts                : 169690.08\n",
      "  Predicted background counts     : 161250.95\n",
      "  Predicted excess counts         : 8439.14\n",
      "\n",
      "  Exposure min                    : 6.41e+07 m2 s\n",
      "  Exposure max                    : 2.53e+10 m2 s\n",
      "\n",
      "  Number of total bins            : 810000 \n",
      "  Number of fit bins              : 804492 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : 563790.35\n",
      "\n",
      "  Number of models                : 2 \n",
      "  Number of parameters            : 11\n",
      "  Number of free parameters       : 6\n",
      "\n",
      "  Component 0: SkyModel\n",
      "  \n",
      "    Name                      : model-simu\n",
      "    Datasets names            : None\n",
      "    Spectral model type       : PowerLawSpectralModel\n",
      "    Spatial  model type       : GaussianSpatialModel\n",
      "    Temporal model type       : \n",
      "    Parameters:\n",
      "      index                   :   3.000              \n",
      "      amplitude               :   1.00e-11  1 / (cm2 s TeV)\n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "      lon_0                   :   0.200  deg         \n",
      "      lat_0                   :   0.100  deg         \n",
      "      sigma                   :   0.300  deg         \n",
      "      e            (frozen)   :   0.000              \n",
      "      phi          (frozen)   :   0.000  deg         \n",
      "  \n",
      "  Component 1: FoVBackgroundModel\n",
      "  \n",
      "    Name                      : dataset-simu-bkg\n",
      "    Datasets names            : ['dataset-simu']\n",
      "    Spectral model type       : PowerLawNormSpectralModel\n",
      "    Parameters:\n",
      "      norm                    :   1.000              \n",
      "      tilt         (frozen)   :   0.000              \n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Add the model on the dataset and Poission fluctuate\n",
    "dataset.models = models\n",
    "dataset.fake()\n",
    "# Do a print on the dataset - there is now a counts maps\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now use this dataset as you would in all standard analysis. You can plot the maps, or proceed with your custom analysis. \n",
    "In the next section, we show the standard 3D fitting as in [analysis_3d](analysis_3d.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:42.764222Z",
     "iopub.status.busy": "2020-11-21T12:20:42.763717Z",
     "iopub.status.idle": "2020-11-21T12:20:43.397820Z",
     "shell.execute_reply": "2020-11-21T12:20:43.397333Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ce80b3579a1f481cb9490b08a64b26e8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# To plot, eg, counts:\n",
    "dataset.counts.smooth(0.05 * u.deg).plot_interactive(\n",
    "    add_cbar=True, stretch=\"linear\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit\n",
    "\n",
    "In this section, we do a usual 3D fit with the same model used to simulated the data and see the stability of the simulations. Often, it is useful to simulate many such datasets and look at the distribution of the reconstructed parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:43.403260Z",
     "iopub.status.busy": "2020-11-21T12:20:43.402496Z",
     "iopub.status.idle": "2020-11-21T12:20:43.404008Z",
     "shell.execute_reply": "2020-11-21T12:20:43.404449Z"
    }
   },
   "outputs": [],
   "source": [
    "models_fit = models.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:43.408303Z",
     "iopub.status.busy": "2020-11-21T12:20:43.407223Z",
     "iopub.status.idle": "2020-11-21T12:20:43.408778Z",
     "shell.execute_reply": "2020-11-21T12:20:43.409211Z"
    }
   },
   "outputs": [],
   "source": [
    "# We do not want to fit the background in this case, so we will freeze the parameters\n",
    "models_fit[\"dataset-simu-bkg\"].spectral_model.norm.frozen = True\n",
    "models_fit[\"dataset-simu-bkg\"].spectral_model.tilt.frozen = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:43.413686Z",
     "iopub.status.busy": "2020-11-21T12:20:43.413251Z",
     "iopub.status.idle": "2020-11-21T12:20:43.521896Z",
     "shell.execute_reply": "2020-11-21T12:20:43.522410Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetModels\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : model-simu\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   3.000              \n",
      "    amplitude               :   1.00e-11  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :   0.200  deg         \n",
      "    lat_0                   :   0.100  deg         \n",
      "    sigma                   :   0.300  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "\n",
      "Component 1: FoVBackgroundModel\n",
      "\n",
      "  Name                      : dataset-simu-bkg\n",
      "  Datasets names            : ['dataset-simu']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm         (frozen)   :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dataset.models = models_fit\n",
    "print(dataset.models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:43.528739Z",
     "iopub.status.busy": "2020-11-21T12:20:43.528276Z",
     "iopub.status.idle": "2020-11-21T12:20:49.221226Z",
     "shell.execute_reply": "2020-11-21T12:20:49.220726Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "┌──────────────────────────────────┬──────────────────────────────────────┐\n",
      "│ FCN = 5.638e+05                  │       Ncalls = 101 (101 total)       │\n",
      "│ EDM = 0.000222 (Goal: 0.0002)    │               up = 1.0               │\n",
      "├───────────────┬──────────────────┼──────────────────────────────────────┤\n",
      "│ Valid Minimum │ Valid Parameters │       SOME Parameters at limit       │\n",
      "├───────────────┴──────────────────┼──────────────────────────────────────┤\n",
      "│ Below EDM threshold (goal x 10)  │           Below call limit           │\n",
      "├───────────────┬──────────────────┼───────────┬─────────────┬────────────┤\n",
      "│   Hesse ok    │  Has Covariance  │ Accurate  │  Pos. def.  │ Not forced │\n",
      "└───────────────┴──────────────────┴───────────┴─────────────┴────────────┘\n",
      "CPU times: user 5.67 s, sys: 20.4 ms, total: 5.69 s\n",
      "Wall time: 5.69 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit([dataset])\n",
    "result = fit.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:49.224956Z",
     "iopub.status.busy": "2020-11-21T12:20:49.224520Z",
     "iopub.status.idle": "2020-11-21T12:20:49.742117Z",
     "shell.execute_reply": "2020-11-21T12:20:49.742636Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<WCSAxesSubplot:xlabel='Galactic Longitude', ylabel='Galactic Latitude'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAUcAAAEMCAYAAABX1nTEAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAADpT0lEQVR4nOz9e7BtXXYXhv3GmGvtc+/XrRYCgUESjwYLC0klEDSPgEsxYApJpkqOiBNZogkxYJMgKDApg3HKDnZSyDZQpowSVSOERYuKYlDHlomICoODC2OEWipAlsRD0MY0kqFog6Tu77tn7zXnyB/jOdfe59xz7z33fn0/n1n33P1ea6655hxzPH7jN0hE8NAe2kN7aA9tbvx2d+ChPbSH9tA+GduDcHxoD+2hPbQL7UE4PrSH9tAe2oX2IBwf2kN7aA/tQnsQjg/toT20h3ahPQjHh/bQHtpDu9BeqXAkokdE9JeJ6K8S0fcS0e+x9z+DiP4cEf3nRPTuV9mnh/bQHtpDu9ReteZ4DeCXicjPBvBzAHwxEf0iAL8VwG8B8PUAfs1tByCiD77sTj5r+2Tr00N/bm+fbP0BPvn69MnWn7ejvVLhKNo+bi9X+xMADcCwP3rKYb785fXwudsnW58e+nN7+2TrD/DJ16dPtv688ra86hMSUQPwXQD+aQBfKyLfQUT/I4APAvhhAF/5qvv00B7aQ3to+/bKhaOIdAA/h4h+DID/NxF9voj8dwC+6KbfmIr/5QDAzG+8733vu3PO4+nJm34UPf9tfSMGQBggiBAE+gfRn/s7TPoICFgGfsynvgc/+/M/Nw4tIIDst/trubUHT2niRxwgsauRehY99qe951PwhZ/7M2W6JmIIMQSEIRzXNob2aAjVQ3hn44H0hCAAzFLGYsTzuY82EiJTfwDSfhBjEGOgYYiPd56LICASMIb+SkbpkpTj39DpOiZixxMfn3fj5/6sz9ZXxIhHu2eDGgQ89SuOXObBfBaaHu1K45Fo/y07hvXt0z71Pfg5n/c55aA2TsDFueS/Rflc4PdX+z3Kb97z+GkG2dyYGUT0ifLWh0Tk/c9yjJ/H75Ifkf7U7/0Arr9dRL74mTr4Chq9nbnVRPTvAPiEiPy+u/7mfe97n3z4wx++03d/8G/8VQxqAOZJy3bD6oIRImx8wMYrnsgbOMmCLg3HnvvHoW1o1PEGv4lFTljGEWt/Ah49Fu/ghq1dYVBD5xWD0nNBsUhHvCd07tkgGWfvs+g5WDqWfo02NpAMUN9UnPsxJY8vxOjLIwxecH14N058hRMd8In+LpxGwzYWvLmt2AbjemOMQRg2HZhUSDV7XJpuCo0G3lhPWLhjpQ2P+S006ljkpP2BgKXr39C+cj+B+9EujrCtb+C0PMaxPcKP0qfiNFY86QeIEIgEB96w8IaVNhzoGk02NNniuli6nmd0kPTpHqrgbTGOrR/B0tFOb4FHB3ycTBj2dgXhhtP6GJ1XbHzAm/QpOMqK41jxZFshIBAEjXQzOLQNjAGmoUJJCCdZIILYeAiCxgPNNo+FNhP2ggZ93tDRZANLx9qvdfykx4Z2snk0qKHTEnPWx8Ln8aCGIz/CSQ44yYJPnB5jE8axt9j0Gg388i94fPNi2bX3ve99+PCHP/xsEnXXPpseyX+0/NSnfu9XbX/zu0TkfS9yrpfRXqnmSEQ/HsBJRP4JET0G8M8D+Pdfxrn+3t/8XggfdPKaoPHFi93iAlSQNBOgC5/iOCvrDswQNFKB0LDFgl36URetCEAEDIBZhRtLt/NPulQs3rPxgS/yy67g0GUltbRLLX5v53WNcTqOCT0mF3oCZnX6Mkx7I6CZlti4fI+G6iimTYpppgxTsmVM4x7nlQFB3guWjkYDgzoW7jGEC+smxOg5JiDAjicQQAYGN5BwbCau+U33W7rdk6YObSn3glv+mRBSrVEFHmwcIMjrphGC0e/HIEbDQAeHpguoQPLvupCMaxGgU4MQge3+uND36xnU4rpSC3UNep4roZPKLM+Yco78V//dm/iln//GxTnzUhoBtN5Bvm4vvyvP0161Wf2TAHyj+R0ZwH8qIn/qvk/y3//A31TBSBSLEQAYPbVGEZB0tDHfGYJg4TWtM0ZoNCttWOiEZZyw9mvVSvqpCNgG5lz4AorFpVpNFZI7wYER1mE12SZtSYb1u2iK+1bPQTy99mMTCVjEFq1AaGBpBBHBEAqBqYJqmAYpRXtKc7oY2Bik46rCWFJL23fRhJYKx01/z6cY50YdCzY7R2rBfrxBDaCmx7HFXy0EIY7POLTopjOuCI9BC4RdKHIIxyFpxrJ2OARjFZLe2DYDItH7XK6DYf3AbF4ONECAgQFCQ+dFv4uRfS4bawjFp91/pED3+1OnxX/9vZ/AF33eu2787X02YkJ7fFkRmNpbL78vz9NeqXAUkb8G4Atf5jl+4G9/BBseY6ChjzRxiAQHOurCG6rt8ejg7RhmKfcTRlsBABsf0GnBwmnurXLE0o+4On0CrR/R+jXa6TrO3ZcDRBqY9RjChA57rjrEpJUA6V/TRViEn2sK9lzNaDVVWTpodPNXFeFhzQVvLHxuVYRhpQ3EApIF0k5ozFiGhM5TBWHjrsLQxnDvZxxoEEnNlGlAiNAGAQw0aiDq5hczYS2qtTfacDXewsInrMVsZJipXBRj9ZmeT9fwncqsHTOr1kYy0Ih0/AZPWr6wCqVh5vTGB3Q0dHHtESEE3URu1FVIorpGdhsQz+azCr3cSDZZ0cHYxoIxbd4qdBfTmhfaJjeFa5X+XOz/Qc1mV0cjRqMem/qwQQxrAIK/+H0/il/8uZ9yNpb33gjg5YUs87e1vfKAzMtsf/tv/x0MNJxkxQBPC4ZloJkWFGYXBCxb+OmIGNwBbpua2Jx+LMLAMo5qTptg5L4B5m8UYvDo6Hy+U4ajPwIhtV89BI73yRdBLoYBHieQyJlgrP7J0Eatz/FoTa9RFxETqc+LWY8LTMJRtSPBQuf901Ok5NKemOZmG4kvRDEhJINDkJeRUU1+pBCqG4NrgXXM9oEPFQANHTyZwk0GQJsKDtfiL8wZN1vdnB5SxqsEX9xE9p7U5p97c3dAuAaqT9Q3LiF0aehFSyUwGgnAwEKAIF0L6WdMrTE0dDsnm3m/8IAM0o1ttxH743/7/T+C/8XPes+FEbnHdlez+pO0vaOEI1An3TzxmBhNdLKdRf7cXB0dwirkPFrIohBMkhGCkccJ3DdQP6mggpo97m+LvpSFrUtLF2CfFqCAkKZ+9McEo5r9MmmMJH06zxTA2QlG1Wp88amZ2agDov4oIUKHmpwu1j3wwtDvVn/ZNNaI2HmcQ0XgALlQooZBAr7gZ/UxVT9wvlfHb6ODnYMngZjnbhjQe+7CkTFUa6mCwU9gm4rgwiZ2wW8X/tmiOV9qtv3FRsIYIdD8NwNNXQ8YgPV7iG7iA7opCQaaMIZr57YhuuXgFg+gwT8hNhN+gzADBDRaAsE8hM8slWk8XmIjogfN8e1u//iv/FfYlsfgRz8OgJoqp9Gw2cRzE3EhDwC0syBF9e3oAvVJebL3BTw2tLGhbUcVjH0Djc0in61ES0knLlQjUVNt0YhmMat1oqZwdfNJF5X5RPtJ3+9HE4wjBDJgQQVix8Do+e3cDpkBis+Shpm7jI4FxKqfrFXLxjDh2NNv5ub7zj3QbQq5xjWQvi5hQmsbmvkAWTL45Y3HBsYWG5TfC486d1oweCmaN09C2bXxaiUQRAUo5WsaHa1fx9gJdQxZwdwzuu1aGI2Ab4FcM+xnArJqwhGogQqyeh8BdQvo2K9xHB1PPYqOpY6+/i9Y5IS1P0EbJxyOn8hN0Y/JK0CE0VaQDCx8ROdV76k0HOlggpfRhc/id9/1N/4nMA184c/8dLyU9qA5vr3tE//Nh9AOjyHUFBZh/j7ANAwhgIBhC9axX7kAGfCJalFLh1LU5k7wCpm51ASM2f+XwtCfhx+0mKgs6cdzwRj+paF/DkUJ4UgMDPMvFU0oBWPRGERMm+oQ11xp00ioWDACGpV3U059a1tAkPTYehyPUOviz+sjMwZVOyN0WkCkkWWxyLKOf0aUAShywM8hhKFO2OleXmpT0KFoQ+EfNT8t1T8RCDeAKO9rGO0Swourdu7v7QRjCFQTjGzasJ83+0PpLmELiNkYi6h2PUfEdWNu44SlH8ER/LNAFzGoDb0OEUNaePS8gWnRO0mMLi1dHGUc3Xf81/7WP8AXfPY/dXF8X6g9+BzfvvbWn/wD4E/9sarFieBweDf6ukSEMCLFJiABE5hu7hJh8AqqAQxe0NshopfpzxObmLsorIOrTWPbR4cZXYWUqLaW0UNR/xCdFBo0TsXp3gM7qULxpAtjpL/RDgKYj5OIb0kGFRNCHALSmwcYRoWgoJsGLRO+0Ftnw/6Zn87OkGcT1ZghGthK7XWE0NcNQFI4Srkubhb1vnw1bsJq8JkhBqPxPnhAo5HhCMemPuLtmOPHTX257WqCXbnfrgpdHacR562bWvgkXSAWE5hHLxtU2/VfsPAGkobF/a0W4X7ET3CQa1ydPoFle4K2PcHy5OPh3/aAEi2K0WzcwLKhbQukLeClo/MCWob5YxtOtIY2XTdntxD+9t/+O/gZP+On3zSBnqsRAe3w+hJ/vbbC8a1v+r8Bywo6XQNtNQFpi8GCCQxg0KzhhTkTWqMGDABg8ILBM6wDuIN/RkGD+dIWv2sSoA2gBYtsJRg0QjNrY9tpjUUYhR9SyvM0cWG+UuIGiPo31YfniMWx09JUQKq2RCBS/1uaiiZ4iqZcr1+g2hYsSEWUwSx1HabJS56xEdk5MuEMM+ulZHsgISyx6Tg2EmJHTuEkIiaoU5hpcGJEMCRMdpnPM91CGWFCe9hkWFerNu3nzbG68LeD2qTvmeb7b75R77+7M1Y5avDPNUZz42B00HArh2zOD4gMMDegAWMQeOg8W8YJnUzTL0qBW0/NoUOkFsrf/Vt/HT/1sz/n4vg8XyMQP2iOr7S9+Uf/LwCzLsjegaHBEff1uPnDNGIxtuIrSo3Agxf6auzBwG4e74IfVBdyBEJ2mTDSwQDaOIGohSZbd22NgJ/SfN4LRgAOgREikGmgjuPz/gg4TG1mQEZTjfJMQO4wkDkK0/MIDFXT34I+lzaK/e9ruxRprnCli9cb2vgcSBCh83RFN/GlCEePLO9gUTc1F8R5DTpuHK/T1K7XeJfjxhGIz8Y8Al2UgqpRx9IVMlYtBowO6voIc4XU1Ed3t5BrweME5rK8yYJaQuAyTnp30t/9g3/jr+Iz/pmffet13bkRQO1Bc3xlbXzsh4DWQG0BmpkqphHQUJNmXU4YvANZl8wOh24MbthwiIU/eJnS/gRspq62avrFop6iwvk97mamWbaNBxgiSBDHOc891e8CJATCqvi8ZaTPrG8KZvbrNlPVsz0AYIwlnPUihG6TNLJIYGOANI1va2eZGLvfMCQ0LX+9bypMEo50pl15EMs0+E5L0QZTs9ub+kI8fVe/3yf3weAGbku4IUZbMNqqLhReEwCOWYC5GV1N6LOxKePp5yKZx7vTMlkjOhePZ2Z56yes2xO0fsRyfAu0HcHbNWg7pUtHYRGANN38i2YcrhgQln4NoYaFjjo+4U4yF4T4Zjj7Sf/B933nDbPg2RoB4PagOb66RgQ6XGnyLzfIsuqEr1qG74Y0wC6M6LJWo7t6ya6YDKs8XpqYA2eZHyVND4Du9KS4Ou4Zob1NCEX6W9HwPIWMGRiygki1ZQZUgxAB95NfTAhLJgZYgw4kbdJq81w8CUrHJ+rnpD4/pH8qxmf6LU+wmrNbhdlPR2Xx0lC/Zowzp9k5ODX3KeJs2mBE3pFAaBdOtb/1Pgs3iPnrhm0ig1U4dl5UeMX1XMh3vyAY6/h0WiILRoNQkpvuLjXRW82IWcbRhFPiaBUqtqUrIDZkA9PvtFHZr4HRIWQYXPQzTOceA1vnx700woNZ/SobMYOuHk3CUZYV0tYQUp7BMDDQXGDtdn5fTA4+lpvMOReMl0yowBS61lMmm0cqaxZLAWl7c7/nAFJIl8k5WEHOCwASyzaBZTzEOYadR4XGIAKLhljIsiV0oe43gRkoDws8qxksZq6d40Ljt2Euc/ixtG/FHIdGfVWglcixQ6b8fDb2FQIVZribyEh41XQf9UvY4xenY1LDcEODmmXHrOi8RGbMHipkhz1rdUPJPlo02KBSnr4YAv+CVhoEHdItR18tnxo8IifLEMlNzgSj+7ozPzyFJYmdTbLPPiaDVYvsZnbX660umxdtRPQQkHmVTdqC8WmfHpNjLFeQ5YC+HDSKSoQGg6hAlAQC7nccoa14gKDzUgIcxSfmqLPCMONmi5uu2p81NJGIVheTeYJfeKM0uUZbVWi5iwAUASH9jn53a1fRj3V7C4NX0y42Pce2wSEeGB3S1tBgBxDB0v1irWa1bwRsWFA2hpg5I4Pyt8LYsJwJiczCMeD8OJlGpI+elWQ/0D6SIQVMWPm5XCh6NN+zhbwNXovJn75NUmmJjVc004T9OrqNeecF1+0NdDQc5TBnx5gpXZd2mM8mRCtuVTVFdd0sljYYmnhQn7HNw0wL1PHZsG5v6b0cJ7TjW3pPT0/Uz1hcOADCWhoWrQa3nIMeRBwdLMfU1AuGtC+PlIloeawCkhjdIHD3JRhjHPlBOL66xoxx9a5cEMtBzTATjIAKt0Y9tv30W80sL3U3nU5RfFUOrwHSTFJNUT+vk9KF5kQiYYJxCuIERo4joBKfFTOsmuIurJjM9BKBSMnyCPOrT6aMCsjlVmjMpZamcNGad9rnCG1rxhlGFLtqR57hs1t8Pm6JFMjrFtOAwyc2UvuMy/Y8dqIJnD6hEoTMD0hxzmpKe5bK/reX3TAqhDepOdjmvzNspAbPFMsY/ayadQWoO7ypQLZ4001v8jPWwF/djHfMQpOpPIqmbu4X1zAHDgBmK0p/dAeiiLu2B7P61bbBC67f9eP0hZvC4QtTfNw6rjGoYQGh8zJpFIBHI7W5z0iFAIBdgMSxeeq/UejMaGaOEKtQLgQPAFRDsmTlWJQ7CIkvjjnVT2FEnddYuLoA1WdErByA5AtQRpropjkqDm6AWocsHeJ9bYsJG2escbBNn4RbApDPszz2BAs+fpNAKWw0TTb1pZlgjMwOWtSc5mYBkQWndhWBsAEnyihZQ/04pVAGrhSzoO5YFMwuSvywuUZkPji/jhqYmNwhxf0Ss6bAhIaoxjiEcRzLlJ7nQb/F0QlF+Hgf1JoRQJINikwbbttRAzDHa6CfgO2UG/Jim/KyqsbYFozlYHNvmTC2nmLqx9NsLtO2p9z/d5l5veJEhxT+z7KL3troISDzahthW66md/aO5TY2MHXdDYdrY+f+JDGfWh5ZJg1Pj+eg5TRtBpYQaK7xpHDWbBAMZCDF/WsVvO192GXUADABMZutRGxkCjDtqk3mvV87hii8CdAATt/ApFAfJk2Vcz+gEAdhaw1FVcHIRqqr5jUpvs5yaXzMUPCBYayHOZ2cmQ5Lqqa0B0Q2Ppz55RzVHrjRQrpRnYHi4+XwbSHLYW5n9xx2jxmaKcSkONQ9cUUVjHshZ2I7zGXfalnI8mR0RPfNmY26sALo630PC2OoFdANugOAWDdDaaYhtkXdOW3V69snH7gLYXTQ2ExztI3Bz5WjUVwFl4NRz9voQXN8tc2zWrzNZpr7lQRKbtIVGAsVWuqAvhCJNNMxzTWZP5vo6Oc85t5WAJlLTUTgIZr+NrSkgNj5L1+Pa44lIOTg6WK2evqfp/pl8Khcz7AF1u0KSDUGjVqr1jXsUUxr9DVcI8EaOVWNuXUNfohdIwtrsIcyCq2/z2yLGmioTN0+ht7/wQs2XpWBm9aJRXsqkRD39fJ8qMERP4abt3kf0zUCQDcaAIvlb684RQQ+xqNsGPuglM6SzIsGNOEgTGaZBarPKgJhqSiB/T30TXQfPfY/bunnpgzE5HVmeivVY8Xx6obq53ch3ybz/z7affkcieiLAfxB6AV8vYh8zQ3f+/kA/hKA/62I/MkXOedrJxwBwmzecfhtJvMtYDESPiYRJWRVAad+wczc6PDFU5331e8UUIiiKXYjRahRQtWuBIPnRT1nqsgkePfQGjURGZssYbayaCS0krO6zylGRATYjqDRgK7UZCQD4Ia+6mJRUt4+RYQ92EGSpQWoaH1CDSwNXQSNVwhTRJr1LmS63lV/UwMvI4k73JeqG0rCZ478CJusOJmJCmhKoyIwt1mIQADP+OAsH+B4zV78hhORCEThMeNUNE895rIoFtBLEriVEbNNJITmsOyjKRKvO5a+vgELWXPrGUN9nBb0Ul8fuZqFCabToK9bwzg8Uv/6csC2PoZww9YOUz89c4n3lgqwE67KYRnIANOwXeu+t0aEtr64cDRy7K8F8CsAfBTAdxLRt4rI91343r8P4Ntf+KR4LYXjbPrWXN3J7AI0f5Y6BtMspMwAVIHTiz+yOMl3Exxwc5bUN1gW55z5MOPyMjI9By40K2akyVk+OzsvCCyIHV647Pi+qNx8cS2h2/NtBdEROHRw17QyNvZzZ66eiC6G+vcgyXWpYwlgAE5FppFsUqosoRCMmct8yvthv3cQvAv2zgs2WbFJi02gNpqylWzhOojb7kHVfOTC4vZ5waLgeZbNxoEiEq/uCZl8vjFPSMk11EwvUWnMbOCAZZxQAuAHKFwA1S+7bxN21IVY03RQcANYzWg3pUdbw7WSrUMVheIz97TWYG6iCVVRN3W9RTOQ/0XbPZrVvwDAD4jI39Hj0jcD+DIA37f73m8B8C0Afv59nPS1FI4VyjGlohWuQyHWxcympYXfaPZBjTLB2q6YxZ5Bxidv58x2SKyY5RpXIbej7p8CH9IxZGAZe9dA+u9qcy/fFCrwyHloBQQMhoyT/kIYNDbIaMpyzs0gHt2EiFgEV8J8jjEcuenoOOl5g5xXqs8OIRjbOAVkx/GMAJSRp0SQXdvzqO82OKE0AeeTBFAbZGcKquxA1W6O1zEME7+fMh2vb/orIvDo6iMWCf+xm9FCCXUKwVhM/kaiuemCEIoT56MwhpnYGbDCRSGp1ozhZZcV1G3OMalgNLjaMK1bytxTlxAA9IAMRcDK8ZGmVY4iYOc5OadM3le7o1n96URUq+Z9QEQ+UF5/JoC/V15/FMAvnM5D9JkA/lcAfhn+5yoceQysRyu3unNCV02HLN0sPgZFoMMjwIAGPxyP58GISgvlzRfoIMaxPY7gQS9wmoj2FoE7OfElAekeFY7fiRPeWoTWAjAuCqsHbIBDcxhtAS0HoK2Q3gMkDhF9vakgoH4CcQO7gARBiuZYzeiL2EwPgohlXjBlNS5oDnmwpG/XYNkmfB0W/3r1wVGM4XEsk/nZTLNZeAs3RRsnDHZYUjW3NZrv4PfKeLT0I5btGm17Aj5dWyreMfvQVmW1OWiJjMGrsto4/pRzc2NRH+2KEwY1EM90aS70/H5VeFD1pR7opG6IkgYprPeSAYwAfZum11Zs62N1R7Q1qlvWcy84ggcwGFlMbBmgtsZ9dK2xL4+wtcNErKJa8Lhns/rOmuM/ekr1wUsH2e8w/xGA3ykinS6gKp6nvXbCETLQ+vUEgbnxqxEJzkUUgQ4fb1ngrDmNNgUwE6Fu7gIPmFBqjBYs2coQNptctVpchUd4KQGWHn4txy/WVsWgH2efq5ypYAuYN0hroNaA0UDMkHELmDdgRHecRO4Hm0ck3APRZ6chQ0kRNEGmWiSDiVKb2zGMuyDpYt45EUSukwkq1VxnjT78ihgx9uqxHZGdw30ruel9EvwCRFRf0QgHu64a0EkmotrvKqC8L/rIYU7Xpa11aKy0a8V+BvqhqUCDCcya5tjWyP+fUiWljM+QzK/Hmr7HAhdzzXOvdQtuNv2fr90bK89HAfzk8vqzAPzg7jvvA/DNJhg/HcCXEtEmIv/Z8570tROOJAPt+s3wm4zlMAnK6lvZQ0U2WdCx4DjWmBidBhpYq92Zr6mNDYMx4fuEWhTdOsmKDRpAqJpjrywnRcABGbjQ5woaHmaiq5JbBI0MBXuTFUuCMqrsCzUNahjLAR0DvD7SMxCBhiTj9XoADBs3zDTbgmwh4ThjtAighIugOPV9XEEU5raDvS/fJxOU/aSaqwioaUrnsl0Di47DQo9Ue8eKINK1DaaLlpQgLOiUvuFayc+p1xxb6QLDqeDclHZYC4zhBjZWeSCKzca1cnefVCGipMTq1vF7s49k6+sOFhOQSDYhRuZRKyNTrXm+qp/VfZ7NiFDaahjQdOX4Rq/a6FDIGtQfDUBhWzxbMC5867Eiz7ps4vfViABe7gVU/p0APpuI3gvg7wP4CgBfWb8gIu/N89J/AuBPvYhgBF5D4QhAJzkw33xy1pvMHR1WXc6FWpcFm7TAqMXxIDZJOBz9PACJhU8RgBlk1fZkNpvqsayTEcd9WvMsDhRh5aloAWmxDIzqj8xXrNi3Ybdz9MA6Yj1Y7rmChkc76IZhQsDPp/FuFRCLHUNg1P6YhTtgQukSKLxopVMEXZwtBuDFsnyoqRZlOe5DbdhJ4BYdNaLGstNYPTjkAsN5NJ0Gbu44J52bP3d4TLNxsjTGyqIzXbc/R5rVVQt3C6H6P51AuI0toFJeNO0M0cDp2/bgnws0t3x8bPTRx08b08DgeV66BVXncR6Pp9TJ+8Q63gcIXEQ2IvpqaBS6AfgGEfleIvpN9vnXvfBJLrTXTzgWaib4zXeoRVON0P1FgzgFozn/Vdvjgsd22IyYBkNholTNsU6kXnTDWiwLFnQgiAlOrVsDpLmlz+viN4jKheamoq/G6teK37sT33JtGQAtV0AzobYeIG1FXx+htyts7RBjUk2zya8G1Tw06JKL93YXhrseuLgz5vumqYwJSGfulovc0Vi1H99S9Frn49fH/Thp7ehKdpGlTPVNgvCi86cNAMpW5Nkm2/JIH5tq1o5CCO1aclPy4/r5fIPy55W3s/bnElP4vo+AoyI4tPtJkNFeMOb9g8GdtF6NcT7GPEkf7V4w7jGO96Y90v2R3YrItwH4tt17F4WiiPy6+zjn6yccSwvWFVKtaGtXqSnyAi3TekAXd/qvGFICIxB0ReaGQOu0WI2Pkr9rE+nkBYtkpupyQasBAQQe7iz75IbqdUKEzut0Tl9QC53AwuFLI9LCS1G72FwIfX1kKYMHjPWRHYQ1wskrjlefEoLxSanrDaiGs9CqpTwxsPK1ET3MJWGjbyIQktB6kvjBIshtgWBogKFErEMzdj/g6FhEwdcrrWBu6K4RUpYmiHECgzD7Z2sgq7bUKNk2jgOIjQdUHoXrZVvfgLQF14d3o5O5Xyog3SLNjbx2NJIVyIPSKMD2vabporOQTFQcaZ3LmTW0mhtnNn/9XPvj+xyCoGzsu4AkcRGObEiBJfChvVhU9wkEfyCeeNWtBmLMDybQPOpuBdo9Cup5sF1UGExmsMHQfC54Tq9qVTwBgD3a7CbNrjspIGGwD5xnVVwUjCAAvuNnJs0E6J1KAIzUjFyjc6HE5hd0dwMpA0vnFad2FQv/NNZMfzMB4NepbDoajWbpRpXWQf1ygMcDAoAtcEkzXBx0bC4DD2pVCIkfwzcSv8I97dlNLc3rWbNNbdd8s834MFnz70dEbq/Q2wHH9rhYGGsIiGa+10aJLMjgU2Ersmv30hN7d4priIGhNQuofKH0v5SWoPPjPG1MXIusr+sGNjLJEz2qE3rqJSYT+0XaQ/rgq26RSUBTECa1yCyF6hkmXTg0xrrEq5jzIMAwJ3pEG02Y1ih3jVA6bGPvfsugi2b47oXBpeaTumpB7k+L30oxGSF23RKYthHMMzpGpyocseq47LQEj4RrgISw0VAojaiZzQAGj8nNoH2ZXQVVWFAFHLuPzN5DyTKqv3dQtW8ul9wIN42Tnv8C9yQ1DAZGOyjMya/B+nZaH2PjA050ULylBdrCLCbt/dlGZ1lO/jyj2ef9JVzeWC61KhDnOXPD5lQTIkKL3GMbitsDqSAEPMyeD88VvyfhCDwIx1fbSDkQg6oJ5nMLmA1H1kWXhmNfon5139WT0fxjg9mQsq0ASwqBO/hgNMtGn08+G9dGTdjqAruceeNmmVOdWWgksx2qguGA98mJr2Z5FU6ee3tsj9B5wVGusEEFo/6lkB/xaI55BjoaGnVIIzUHiSO9sHboDIbksJIGkGQWx2w2HqIMQvg93Uyvfr1LgtEWuAdUpuCMZ6P49VAzjKT3Yw6wdVpwbI+xyYLrcRU1noOfMTagvWDUPO0KSGfbeAkU/s9qYtdo8RjK7j4fNO+HX79mb4XtPgWh6nF9fP0cVRBO3/FxMQtoz+Lum8FtWukzNaL7ila/Le2VCkci+skA/hiAnwjFBH9ARP4gEX0GgG8C8KMAvkpEPn7LUSwdSidAYvbm2RZmcBGMw3KjWAN3yFrWAIsKhPj9BYGYmk0u4HDAl+97ut+keVqK27PgyO5CPCqemwtj3DGTEb5ALEASiyGYZwBIBg5qimI3gQ4p1xyPM3HsWTQYZsqiAdRAlBknri16JLjzGgL5tnILcdzigoisjxirC4EqczcQJIDkfhw/v2dxV8HoY3GxymBsEHPz6H1sXIaJrH3zowxzNbTy23OXgLo4UAiHY97tNHifwz4mw6A+leGobvRh+diGBAIWKyGsisJ9YR3pwef4DG0D8DtE5LuJ6FMAfBcR/RkAvxaaF/nTAfwaADeG5oUIfb3KqChn8r5HDYO2CoRN2FLTCD0SR4ft3Iw+YAwzafq6hhmED7DSC0xnQYL6u7o+PTjju/hAWQw5nfM4sluIu/zuqhXYFwEgsiw0OC3A2XGVu7Ey8OiV06Rl1fM4iavTkjE1SJuJZ8+ZjPz+cPBanpu4HIIpMHvSwgcW+dH+uzp+nqqIDD6gQqB2cJj9eO3hQTVf2zc4Z/Jhvw+UTEMTB6gJK9ltzE6FBvjcmbWmyqak1HZrEbSye644yLhfI32e9TpivDVbViPc7lM0xnJvM2JiYClIiKfsS8/f7ilb5e1or1Q4isgPAfghe/6jRPT90LzJBru3eMpt0p3X2Z85J/kFmIn6vNXJ3If6VIigmtEYVsK5ZENfIC9QUyNzpvcZDzdf6/mVVHbsi76pEozZf75nyM4Psk5z8i76o59PAwoaeZ0Fl/uXqiBzrVuxcw0QGLQlKcnU53cuGPcFnMJ3d+F70zmLYPQxFiiLTRfNrEnzkPWe+Iay1yB3UVp9crPWr37VuU+51fZZsFrfM+CiN/pM8zNY1N5/KKAowDWKi4QjIyeFZBWIHtme3CmWJqhpg7mUg928wHPUCzlnFM3Evn78+8uQeQjIPGcjop8G4AsBfAeAvwnggwB+GDvk+4UfZjGhMNXOBWT609Kc6cMCJ6Y1YgxszMVnmMLUThXOeMFlgVcd2v5aJ54fQ3/toRwXLmkiXTDR9sKkaDquFcT3GBE4aZOQ0OdtnAC2uiWUDNsede9u8gbZaXEPCGMDLJ0ynKGR8ugC0IWxC8bwJUbgJrXh7N+5T3EaSyELdjkhL0N2gu9s3KbN4XZfl2fWONC+EpLUaDnF3Z/7qV+dcYT74/sGot+/rM2S5YJL8F+66V7GzDCie2tDRE3vvo9MG/lExeAOQmrErhWXueg1eoB79DkCD2b1szYiejeUWui3iciPAPgRAF90l98KMU7L43g+aSpV84AJlUHYBmPrhM3M6jEIzIJOSkzr87oKRSYDm7MEUUQjOTPPziiyTDC6+d2oY8GGRh2reNrY8SKxrq/8ygLkgsaxdx3LNOkPdFQMHvcwc9MnqOdoYwO3HkLWMaAqyFcFtUuC2j3irf03mA1RcCwSD8sSYtA4wvN03VQ+8dWUhUQkWHBS94RorRSxyO4gz4pZAEFETXNk9NhuUjv5g19j8lC65tPD9+fQmrgvu2CWEGPBEUKMlY6hlVdBuTdjM8gzb271tT93arjY1EgzczofbItKpiLHrrJ0rHbvaIyg4JuLkiVaYKrpU1wFvVxDDKYTY5ACeQ79rajNs25vzee6j3aPIPC3o71y4UhEK1Qw/nER+dAdf/NBAF8OAD/mU98TJJ3Azr80mV7VTHaN0KOYEltpxSjG+XyiUwoIryZXnfreHB/mzQWjV6LzyRgV9Kz0gGdI1ONNvH5oal66llwAu9o/CWymL469Nqa1bwhtZEVGDPutR8gxC8Y+SmCKlcGHyVMY23TO0LZ2fkQ31jIC7xrRiCgsyUBvyxQ4ADBtbl7rJoJaZdwvBUnS/zciGOOvZxMWSHzm7Aqo+dRVI3Rf53TcnfB1bTE3KAEJhZJZwdxiZRUIYm4LirpDPMQi/HrnYyx9jhR/+zmL/Lm2lsGlxMk6EL/1I7gfoyAXZOAjH/kIiOgT5RAfEpH3nx34Ke0hWn3HRpqM+0cAfL+I/IG7/s5uyvsB4As+//NknrzVXLlZhR/QKgKAbaDkPsnaP31kN4VJsPAwGrJZMFYTbH8MF4yNrDyp0VNladFkY6GLAY0FQlpqwTKdZ5+cCwiLLqvg4BQglKxCHvnUBUtBwaXnmk1oF4ynIhwHFPrUjLdxE6ARh4k+PBocWFNf9C2CUJ7VkotyaFTV/HJc/KMxDt7HXVArYdJpfqoAkuhxMAEhEzOrYKxkD944giUUqYO+IU2wmIiHJSYTQPhh5wh69eOZ1cEuoNLbJ3YvYS6fJltsXl6oDSLpNqIU4lGTe0cgoTH9ArmabSu7F8MY2628r7MWjY73vve9+NjHPvYuvEB78Dk+W/slUCH3PUT0V+y93215k3drRNhY6eEns+EpjQE0cy4uLGE6c9G0/L3VBOLCAwfezqi1Kk6wmtWNBxoNLLQpNRU2LDhFwSpPx3O6fq8Ql3WJzU3gueH2KCBwO6hfaqc9eQutBw1MDb2xmdhe+sD9cT1rWJt5PoRxGsqpeOqMY29h2q6tYWGlYmvcsbL6Nl1gESVTkPYjSwkoCtU2iGFEuLYY9besJRdINdMaHAotXyHoWCaNcZTc6azGCACeU3+WhVM1x0oVVkxVFzjUZMppjj7VjamQS+jmoNF81i8bgsA5LU3jc2TFQQNcg1nL/hSoVbP57ecd0kEFgA8goFpbO4TF4K6SASdd9r6ZO4KSEXQZx+Te7Ee0fg3ejkoCbH2+n0Y4B3S+Pu1VR6v/Al4QNBCT9CkQAXc6uwBkltCmlpbvV6GnsElB427aktZFiQUASszkjpFnwsRRRjkv4e/ifKZBJbFsB3mGBAM0VJixaBqhEIVg8nNGNFVybNQs68EuNKUkgi8GQ/y6tsE4di7asD5vhcFnoyw9uuejdBqzJLBQl0KasxL9EDoPSNXcDgdVAzNKYB+lrml3iWCYhWNsDOV3SWAitjNaNQiZGYeChK6Y+3m9UuZHzYSSqEUdwmYQiBYsbQXx0E2eEALSj+1kF50XsCSuVMr7AhWitb6Nz8fwedKWfczZMbkipoCPj8W9RqwfNMdX2jplt9P3k47xRsYbSAOHptRYw0w7BrByCryg7t9pgIubxNQjRXCzIlDbWEJAAi6kBpqZRtMC9yiz6IJ1jaXZxGWo5kjdnOCkpqhwA7URtGyH/pbRVp2wlOtXVGdqUq491qABj5LJYmYlC6kGy4/SXSAaDNm6BrKGAH0ImplGvRFWITRSUPUK5VEkaLQTZiJnnnQGTgIbWSLbLsxqS4xqtpssBHdBxDibFrXx4UyAqevT/MyimwcFXjL7MfkdXXssmEH3zeZ91w3Qg1YQmB/vhLY90drRpW608AIeJ/RFx33jAzZesSEraqopz0kgsZtLG9Ys2ztU5OWmLEpWAsNn7pACrjny6GZSW/lc47msZVxfuNFDtPoVN5qhLPY4g11tLyUVkMzpOyMIVp5ZqGNfjfTCbn5GNVSAmUbABaODxXWZlwg5FEAtIujUQBaVVNOraeSYGAtMCLrmst+xPSI7NBqtgZQWxwIQwOwzf134vygWbYzN6PqMKa7RA0681ygHaWka0yqJBJsw2KojZpU/18KMuMKETJqzFStYAwjmd7tDhky959N9I84qhJZbX0sTsFX6i+snzUcfSKuvQsOqSb3HDHoQBTAN1ng7932PcR5dheN2BA2BtA2NrVRwO8QKFM6Mlgxycc6rAuM6irJDbbLfJAWg6t8dZ6xFeS+K1jxZFvfYiEAPAZlX1xRvmILoUkqflgklCDpWZjgNaDMTb+HNpvoIbcBrfvgxIuIMJzMw/5wtyG54SIEVvqIUsJ5PLaBJKARYm9OH1owSn8ecwZIXLMkByGkeFRlxcVJLLKvz7xEozPWGDQPKOL4QYzCFbxYOfRIF0TMJxshrrK4NniK0JeqOGQQ+m8B0Zv4+rblLxTNjuv3efW5dGjqWCfws0ie3h2qbOgauos7ldtfEa8o8PyY/M5m2fdZ9iWBbFPQ6uYXAWsdHBpbFqOUWGNJgZn1ysLubzS6k1XJp2CRN/ZWdZTSzXiLo52ujJhncJAjvWUA+BGReYRMQTljDdBWrRRI7J9z5rEWM1uZ+FwuUiDIx+3cTgqLaR5iDLoTsnF0Qvr3al3huUKEOAkmSV+iEpuLWEly1KxyWI1bRQk9LP2KxwleACZAdqF3JUU1Y0yyYXHs669OZf9M0UfMJjtFxRQxuA+9eFqzccc1KGOzY0NCOqfg0RTecNJ3HVI7VL9bzqLMvaUpXopAzrYsEvDOtY4xdgLjGZyLByUaigJr12y0AvdfJt0hkWpXJoiCAJQ7eThEKlp4Kkq91xAcxWi3bUDUy1xy3E+j6ib62wA2WK6xtjQBdBGkoqwr69en8UwjVSRZcjzVQBeq91baya5sJ1dlbFWfRfQ0pw+nlCIDsrIfnbUrf9mBWv9LmLNvqN1TzNchgkWaOagtJ77WOawVh9yMcO1Fp4xXmMuei+mu2dLXm5rZHR01oOudi9UmJIBaqL3QGwiwWIiztEVSLScCvntyEiGE6dTKnU35PPgBUiA7faiKR6HUxuuEfj1jbEcN2+dNoVrqAI+2y8XkAS8dIwoT02tCBy6PEQKqs0jEPLbsIxawHncGvuqzmkEKmJbpG5SxMAzxBkXyCb7RgMYhMpyU2GT92Zcd2QeRch9WUDqvFYFP78ZgHpwh9vx9ewoI3UD9ppUCyCD77sTNNVMfSC2al1q6cAaEihnZ71oXQGveBweLasKwz/SJnjZ0XbQTgQXN8da3i/dQRLucLzfbTWErme1n7tcJn+qkccQ38WRt0gck5+RSZ9FgLWV62+R09Lcv7F2mIpoFN/kkSUF+1HjETlrbZIk0BE9daNcIL+eN70Lu+d3mnrtFaiIQA46H1ExdWRm4wcNUaGgk2nmE9jYZG/Sv8KSLRKhi9JGvVfplT6wMw4RA9cs4ozOlk0fm9SW4bDyN5ExVFyhMVm2t9RIIOAVzAOWuRBTbqBtOxhFZ8krVoyCkUq/CpuEGg+vJ2zTQz9QGn/088Qjw62LJULJqXwtE3gRI0TJdOufdy3qcpCHPWL3cLkEHGYCUsSPt1j9reQ0DmFbchtjjImbcdKYsSnfM61KcA/q7bk4RvQIMhQxQz5jmu+1IF+kVAsCnPIWtARBciB7t4/X43c2eIChfXvlzI9IXxhBdc8QpZCSs9wqPDmmVELzjRa3Oh6RoPkAEF/77yCiacZ5Bo8EHmwA8by/cVv4mFjlj5gLYMnGRRnkNe58g8LCXSYE5skWjeDC/XtzAfnY16jCX8arrRiEKSrM/EEuYgQSPhXucnghMyL/06FwSkJmahpwttmwGgZ5VIWuwI6Rf2yK///iRLgs8vQrXSWoiAVhFIofG3FTI6xirgwwHohsnkxfwUBuWyqo/l7qoQNN9nZMYUsz4sEfJkhY6FN6y0YZFTlHK4pDEqjIpxosTCBkOQbZz31R58jm9zSxjPzGpTMyKaZQC4YAjyCuJ0xiMjrN5cUAkIi5xAJDjg5GEMq3uSC9hbTVf0NoZqAZvVbjkBuDYtkvkqo+SFmOKS32jPelMzOKLPpOSrzgzjHIJBbLATuDx6aC0Ln+B4uM4MFsLJhkTdAtVcc5KEMcFBVCsx7ajpmLKPS0TbBSwKJWhtCYWmSwvB1T02BKvPQzyNq2uTwd2JokXf9Fgwkx7k6JLCdRTtM8bHBQahIBjUwHdKs4kxBxQ1qGl0wGtRDwZaS20yJ4zetwEI6fU7OQZK9tfUJxPQjXOzarSFBVLp5PZau7aG3poJx3bj3HjuRqS11F/T9loKxxqh5t2NdGd0OKUtK2MvGAcvGNywtauEgBh+kN1PuWNKWYaangsftV4NFpzkEFUNq8bhXqLG6pjWBSwQAbZOEGHjl7zCkRf01hI+RD2i6cwjMGvepBhQXZppthwCjc0sZXTVPmSAsJxponpdSYDBo2OVawDAxqsygfs5gDNhz5OAHLm4xmaLX6Icq/sg9ylwlTyh84pOmhHimhy70PKrG7NgvMnUrNd56XVm4GS+ulsCzhw//y75JAPX6hRu5m6Zgnik1QOpDQCPbNNYEQzmbBlQ5utTrc3qD0mH59VP14rUYhcMEKvWeOANj/ktHOgaa7/GYXvzLG8/y1IQBmXp4uq6iX7cZ3swq19d29durs+BOVoLXPC3mPN5sBZPr/i4IEAgBCWXHkP1EWeTWcxkZbZay6TUX162NfxlQSRgQsAEp5Puqk+SADScaICJ0CKSq4ttQcdABoDc5EqISeXsy4xdN7ndxFY3RO7i6UagIiRd2+5gaRAT1nNN4xnPOWne3FQIFAEY54My+ZB0D30DpKGGQaLYvyEgGgpglywzQBBASunQogFW0/fGOXNBE9qzt+vx0sx205VtPmA33+o8dCvlDCJjc01Gh7QVE5bVaulEpPiGvl7iDGikWdNMA2uY0yesXYXjsl1nxLwC3MlZ4m0eGtlFZQ1/Fqb6pzUiesiQedUt6KvOfHFaurMGH5I1OiNy6vtKsG+nJaKeAHQxkB+T4njKcKMRV9IarFjaYsdfMEzj3LSAis5NFgiGmd6L+R0zPc9Nx03YuG4MdmJCFoAKGylBn9CZzTcXQkNC4FUK/YvchmYat6GQpz0XpG8OjAzAhL/LordDWPODSTca4o7GDXKW1uen9LQ9v2HmOmCl9/LAmIiCzR2funkes13zVlwW+8c8VwowHcMi0Cjf877stc676k9nQhIyCcjwP1YNEYj3aqkPH+Ppt/CwYmqNHrhywXigEw79LRWM/RqtX58FxUA6+lRdEiUQ1eUliYIHzfHVNdWmjCevZBS4H2mY5sXSwiSOTA3zt3Qr2t55zVrUZl4BamqpudTA7PWGAaEemD6SboGEBuLEWQoRlpJeFpULhTW4MRqe9GUK0ChTedOgCWlurWI1GQtrYStwRiNDazMhNdWmkYxie3/8mqpDH9BNxkuwEjxzRvF7GCfV4CjxmpsFn7bO6KQCf6E3MFpDO2xo7YC2HNG2J3G/vAjafA89q2dAxoAM5TAUYjRqWFg5Fgdx1CA/yUEB0NLAUW43r6cGTICETAUPZ2h+dxN7AVW3YzgprvtbU2TpYwD1bROdrBnDEOp9yXEZpk0OWiYfuG/cYdVUfzIGDpYMcMVHrHTEYTzB4+OPaLri6Ql4OwJiFSlLITo2cD81XRMdXomymUto1szvoz0EZF5xcwHhcBTPKhAxzjsCxHZX5n6WvO+C0TMgKqZNj0Nq4spQQK7ZVzxOqImEoWEJA7RF5gZXE9jMlk56fIJgsYVN56kVJuQlhH0tzuVszreOzc7tcKn55B/CYXrXa4K5BEJTFdcYE5IkpokcxwowsLZHWEl9W2epkOW1mnuzVkkYao6jg6iH1jq4gWWgywJixSc20gBOh2aUZG7xbF6nlpim4pmlcYMw2GuXKWglNOlZU5zNaoLMmFUbLxiUaCpRS0todxFcM4C8jnEhDS79YhpY6Yh1XCvLTuRxb5HHHeeVGS85aae+rReI3NPcFHduBbHwOrbXTjgS0hxyjBuQE52I4fTxTAximSK+AkrBaLHG2P8LXMUnSqMVjhRqvCIpsvK7YYI6+QB2zn8QSBq6Ac2X4dIWofXsTb6nNYZgkPlUizYD7Ew9yff2i+LceJTdY7YuZJAe+7Pc5OuhmMC1PcKghoWOAAgzlyFi/CEU/IRVi6tM3uKZJIMhrMQhvPTY1JxzcRMdTyfpnYIxVJ0PN28WFbvo32vlHrjGWAVjbf4bR0U4iYNrxmFih98PIRxDMJbAyMwqlL33viitmdHhyQnLOGLZri1N8XSWSODn1lTE4n8sx90Lxktg8udtD9HqV9gEgJOpukCL4ISUbBaoOdSNqIE5F6Jmrbj/aj5OTAxR0DOGpnUtrLux1mqZaeRJrHzAhQXogREQ0NDhvIgk5hsMgHXRVNynuhOaHsF24c2wtDdfPDD+RIxCrqtCpzJ169cT/hTkFgYB8WqORJmnq2OkoHYPKDXzJx0t7XKhDStvOLRrVPB9BnkKrMq0KwdBk5V3mCnc7Nxmgg5eMZYDDusbwWZzLY8DBH6JvMLnQq0aOQOo05fXANBENiLJg1gFpkeqKRmRKiqCDbOYgpEwWqZRijP+8JIZKsEC5JbNomVjjQ0oxCRlGuzV9mZwMk5oDDfX10cYbcHgFdvyKBEahS/ypTbCQ4bMq27V41MFY+AN0WAJhjhhVQqzYuJ0JAtMBRd7DrT76zoYjYx6QjTnVQyXV4Mj3vYwiEq+UM2V1FBSR6swETcHXa/V3HHzbRVyWefuK1QOZ38V1J79Kli5EGCZi8s2hj4qKMcHUjHpg9CHasCnYT41dmGvAZZGG0gETTaIUaUBMKYhZCqjbHBAtC/0Op7UNnA7YYyTbgytK7tRY3Q0pfEiOjMJ59rTu/tTXSRhLmfE/yYXxV4zn2BMhdyhug7iXKE1thle4yUPkCQalSat9jOKtNUIefFrOlRoWx5hLCoIt+Vq2iAHtWljyFxrgO9mvNyhPdStfqVNoGQA1RQIHJxHbi2yy7ZYt0LBX78/HbdEj/2x5kZ7ulujHlyJZ0n99jxB2jP3nuf+AukacI22mm2MkWahaTILnYrQy2hwh0yakLM/+6JxSjM1+TcMasElCcC4/TaFf1iFO6GmopEaWrOIKG8AFhXaxI4SiWt24diFjApNM1EW6hoN58UW9cBCR/UFWyDGkd5kRKvVPKTNNHZiSGuQtoD7CWM5oLcrtMOmARu+ihTLvfZY72s8FwAYgQRYypi4lumbkc6PnBehycsWf3uiWNmbsqVvva2ACcGa6eR/mywRfKomdUPBp6KcxwShTQD0dsDghuPyRriQnMatXn8VvB4Bv2vp4Tu3ByjPq20hBG9ok7/PAxvFjNok/ZRznvC5P6kWdrLlogEXAWrt5jNNgcgCPcuU++vLDpi1xFyQsym3mLmepLY1C8Oq99E5lEVKLq/3j8TOSSUDaGzhJ/MKd8Ic2qSWemhY2Zm9tX5M/B4ZtMh+6Qbkuc2xGIkgNPL8bGVe2XOtd83S6/y5f87bMb7S+iG0tX1todqfmkXk2FQRBQdhNweCxb1qjZQWy6SdR4ZQ+vm8/IQHXaJvkwlNxbdogjKg+8tEeuH9inloGnLUvOFVNw/oe9tyhU4Lrtsblvmjgjau8UKAqvqrb1tbz9QID1CeV9mCL7E0xfZlhBpACJ0q/EQuJe2nJuC/u3heWzbi0CDMgscfK4Grg8I9NW1fd2YvmL0faUb788y5nsx5y0eetCJfNJBJQLgB72azP3eascnvR4QxSNmsx4bGCxZWM5kHKwh5dw0p0C/cLwIIzTYUTP6uSaty0DAxxPytQdorAowNBBhb9QYmVn+bC0e+EI0tmpn79KIollVUnO6Ba+4+Xq6lI8c6tsniipjaBW1xLxjjPdcakcS6Lhh7FWiq6pnw4rgWWE70wBLvHdtjdFrwRB5NaZF+v5rhcVE2ySj1IE9hGnqm9pA++EqbgHAcS5RLdZ8cCGgX/E3VP9c9qU8iUzY0H2AOisQxivbg+kJ8JiMS/PPzzOxwQe6UWlXjzZ0akyAkFG3RopJczjNrSQKylMfJNyVmhhLFAvZysACinrIKx6P6G/sWwRAXnkKMQ3+iAqAp2YYwBXSquib2+c71edXeh0XXW2QPaf+JrWyE5YTT6BAR09IlqPuFKXyTsFIExGvkkJ8JRhNInRcjlE1qOsGMj0yhl5udHwfYbbwygtQkJKydy3+TpCAUvsWIRocpbQS24mS9xgokyaWp46Pj5plYoAXEh5hHwUmKBU/GI2xjwZN+uEAaIlibFoDLssGqLduX7q8R8ADleYXNTTbYEiVOH91tN9ZNYoITlVrGwMS2MptSe/NCYdnI77tQKwn+w1ieySAglzbhSw7+/fPwOVbsXIEj6eP++nzxNtMy5nzxSqrhEeQa+JhSLSPA0NFESTe0/AFDMEfrJ1MPmdK419AdpxlaeICeSYMUeuH6HSP/VUG5zb4r08pyPIcxAQnmwlhis6SDIsAkhjUsG5SPXqm3UueAWwT+XoWGuW83NPliPQA1+HXz5PTxqKZ0L2NXrYPq5qkaeKclWNBPsuJkZLhuKfmcAgaaEBi6YU1cR/eYOhjX/BCtfnVNBDiOxTgVN6yQwH3V8pMA6m2H0zcAGq0GKQm016T2kqo+SW4Cxbpe5cKl9eOUETFGAxZbeAysJpz09XKGjb4ITH6KkK/XtjfFRAidBIymkBSG0bIhmFrIoEhCSgYxsACcgkWK8HHBf8BbO82pgLqBIDEY1HBqVyogSRm6x24Mp/6badibgHhg4ABaRghnr97nmm0OHiem1CLenredGNQBzyevc2GK1sNhVU42MgtGmKCbIue7QJyYG0AAYHIZ1GsueE+PLiPnU3c8wi5YGO6hIsB0o2EIrTE/T7KGX/vJdsAmycXpwbNGA6P4AAPyhh6F0u6zEYD74oYkoi8G8Aehy/brReRrdp9/FYDfaS8/DuD/ICJ/9UXO+RoKRyv0xEZ3hdT6GrY5kuemC7gujUmjozCw0tcHWPkUmQM5+4XlzvgoDQCbgKOFntJ4g4AiMBH1Ty5dW2iE7tu0VEK40CwA3h1hgS+SasZCjDa/1F/WtSggzxpiFURiGRSp+ewIEcq4Bti5CpLuzC+VYWexa2roxGcbAeA+QTGNm+JcPr5CDOIBoWOMd/521h6nsFDxYwrNEJZapyX1OjkTepfa/nPXxt1iuPF3EbBz58vtzQViIBhCkM1YzdQ6VTBugwOwXxt76iPNcz3qGoUWfY+sPIR70RxJI4BfC+BXAPgogO8kom8Vke8rX/sIgP+liPxjIvoSAB8A8Atf5Lyvn3AEkm+v+IEATBqALkpYFPSWyLZNmBoEAVSG9J1p6ELWhZOe07ScCoPpJ/iy89rEZAn+ru3ptcy+uTi2f08sMkwIx3s9f10c9XcAoshXl8Wsm1LO1sgzvFaIajIU2loNJngB+RzjkSURPBvErlszWlqYoM6wUyVB5iMXIQeyQMWOhd2EDhuJgp/rqbRaJRI8eFVfnD164EP7ohtRDa75eW9kVPd5VbRQImcVp/zWJVcFTNiX7KDC/RN9apYJU908Djzfj9uecu0SksNLXLSSa85GtzaRc+w3mBduuaG/YPsFAH5ARP4OABDRNwP4MgAhHEXkL5bv/yUAn/WiJ30theOpe+TNdkuDuThcIxl5+Exw7M3kfct87RRkTkjB4tAJz7pZJxOOLD9Yv9vjc894YBh5wo4Eogo0gnr03Lvp4B8HVftVVAG61xrVN+ogeAk3QjfsIfNsQtYMFmAWDqNoqOprs2vrJ615vB1DALjvkPtJyT3aClo0J7oWL3MNn8t98iqCNZAR47gjddAa2e7vczJiE+jcsLVDBGFO7ZGlGi5aOxzFNWC+6lq61vuT8+0cGtRNW+y8xnjFMcWyk0afYF52NdDMJBeoaV4bvmCCcd2k3eV9bhHo83IckSUGxdD6nFlYeUIXHjjwEQu2dCPFnM95eW/tfqLVnwng75XXH8XtWuGvB/CnX/Skr51whKjm2Aehs9cUaWrOFoLQqu1F3WHzzU0am234GVGdhU2l6xeoD6VjAWMk7b8LZZT8YOFY2Ho8Dr+OuP5kviNU8x00wS4cWuGaZQUm1+ZZDnndxpwdPq0FA0mGSxDTaE3/GNskML0vVUMeloo5nVckCjKRvRZO4oPGJ40OT+6I1PDztqa214uWO0gJbwFYdo35Qr2s6r4gmaXnddY87I1WDDBOWKeNSAUPQZGYNicMNuTjfVNLTZdMKNvmKIaRhBhRiSDJhF1IMi7tzS4Q03KZhWLiK/Sexhza/Y16LNMWCYJD20z77FhxSs3RiTDKZlvdDi/U7k488elE9OHy+gMi8oF6pAu/ueiZIKJfChWO/+yd+3lDe/2EIyiE1bD0NeaGTQYaWgCNgRQ0Aap1ggJJY0azOgywbI9TaqEk6Jwg6KJEBw1sWlWzrJNz0wxCahKywVaa7+odBDYNZE8IUXbu4hdNwTa0it5uboT5RQPYkdMOYZywZM529R/acQe3WCwuJGvU1VPWpiBD5EIXYtUB1aBJi3e50N0L2hoASaHGZvpWyBPr/WSgGY2a7pCI9EMgg0iCTMWrEVzH+/lY6ZMRYHVxPKU/+jFLSy3SxdXcT9dCabiAU6amS0HgOh5+HxrSvVKDJC54/dxuhl9iFWIdYABA4x7BxpVOka200jE2KPHNmVIwOpnLvbS7+Rz/kYi875bPPwrgJ5fXnwXgB/dfIqIvAPD1AL5ERD72LN281O4kHInopwL4bBH5L4noMYBFRH70RU/+vE2E0IdOyOu+RqnKwTzVKQZqaVSOIkxeDH2QWM2Oobs5I4SVa421NglDhdxGS+zyWzvUjiEc2pZKFphCFozRYgF5rrdA2Xy6mXwVxnGm6dhEF6KJot8r+Lmg78U8coFQAcWVqCIp/3scs1GPvfqSEI7FWKLb5LAgDI0sw8xzbnrdLTWUEMxez0QGhJaC+VtDM3KnyEKM3hatIkmMRhuGdDQUXy0pmYOTUmxYcT2u0EVhLTmWSuLBMtBYgeBMHZ5XfZtocIJY33TdAnBiEPfj+Wj5+FRm+ZkZpwQVzfJonnI55k0wvI+7xIZ6byqH5YGPVltmw0GuDZepxwUUYRBMR9Dr8hK399bux+f4nQA+m4jeC+DvA/gKAF85nYbopwD4EID3i8jfvI+TPlU4EtFvBPCvAvixAH4GVGp/HYBf/qwnI6JvAPCrAPxDEfl8e+8zAHwTgB8F8FUi8vHbjzJPli4EWLU/9c3JpMWF9ij5GNXbxIM1egM3SWhNJaHwZt6iYn44C3YDiRbbglBoUbXPdacOs0c0t7dmJcQCCrPej+P+KsZSaNFcWySYCU4O0OYw2yuguPpcO5ySizOCTwhhO436TX45A0hXCM1kQhvBhFiJiXMLiae36sYU3lUyZIJZ1V5jXHk6K+t2yzrkqAWzeLfgbasj9cdGIMI2mirA9636sCsHqFPH+fVPQutCAOlSwCdp1noSgtR5Qefxfr9v7iYBEGtAtUXN/T70tyIRIHG5BwX1OzPVbkO9l3YPudUishHRVwP4diiU5xtE5HuJ6DfZ518H4N8G8OMA/N8NkrY9RRt9aruL5vibodGi77CO/C0i+gnPeb7/BMAfAvDHynu/FcBvAfDTAfwaqOC9sdWUwD4IRwPNNGZ01iJVC880U1MRJtPtssCShS4ktZr6O2+eSTPv5OofIxqqGXKfYD0wpzsPYDCi0p6b1yBoeQI7zRAOLTL6Hdqj6649FxANrHKcTEsB4cSHILI9jtUEJGfGjh1btR1S/2mUJjCAsOQ4kwn3agZrRHgBFg+MlKBMiXYHt2EJ8lQNSuE/TsBwjtn08/tYMboJxm6b4TJrjtRwpCt0WXCSBcexhOYY95JIUyAJmV0FLwSW2yFZPrfshFKtWFg1+4pR1Xkyj5sLtylH2gRSCkb1/+6p8TSrZr8WVDCq5m/uBgALb2jUo+DWMk44HD+e+fNAFNnyzTqViBbcAy/ciO4tt1pEvg3At+3e+7ry/DcA+A33cjJrdxGO1yJydIAwab7ac6FFReS/JqKftnu7QVe+KmZ3aHUz6oOgGWU+Sb2fmm99SdDVNmAaiOcL5xzT45QduWppZ9cWebTFCe8amAzFFbqmZwJRhXH6mryYVbNMBkDN4TPTdlpIpynq60GiTotqq2TZMijpcoVwo7rz6zVf+vxiDrFpy/7rFIC7RVEqHQbYHJrBQsXF4I8TN6Np8J08uOREFRIMSS5snOyjpmsGk3l0RrVdMmHMgXQoGvkZ6JsmqNElQlhnRNrzWAbcCwMVVlZTPmtIRedIn2FAN6wMv/YzvsnSjwDSj1Nc1+SvtdlUx+reGr+zc6v/PBH9bgCPiehXAPg/Avgv7rEPfwjABwH8MHZ+hEuNoD4jAIH+70IGmiUMco1IoRF+a+qyZiD8NjW3ugrKON+EA0usmBOdAgin9sX+msagWL1ufk1dJM4cPkRzjX3B6YJRQdtIIngUGDUT0q5deO0XgCJTRS9Mo+q6eEzQi/lO7dom3JsXqN9dc8UWhplHHJZ+zSc+u3Z/7qacmeeqsfj4TSK46G6I8RDTZjWIlYK+mvCh/ViwJLOHnHAkJ4BuS8GSeZaZdJNZfVOLGtaUONAAyo+EG92Woucaeg1W1bHUGtZWqIsELDrHJz5GpJBOqJaAfZ4UDdbHPsZY0rS+l3aPmuPb0e4iHH8XNDT+PQD+Nahq+/X31QER+bsAvui27xDRBwF8OQB8yqd+GhpLTPRg2RFgAysvIqlIYBZEeMWgDar97Y+fgsBf+/OJodsEx0rbFAwBbGFy03IKlOlvqrX1EqmtpAMNZJx+Az2EwIk0yNSEcSKZ0r8adSx0wiInrR+yXYd2IsRT+qL61BTetJD7SEnztUnFbyMzz+2aLrHShGlo7w1ObkDffWYAt4RgcD9XCFjxzUSiIl+Mh5mrNfvDn1Ut8oS1mJTVR+zukzYLRcz+Y58rwDAo2JiEbM2dBmYWIbu6aZ4QJAIfC7R0QTB017IadiOrf9LnnW9ClSjEfYOqJbfUKM2VEAGY4poBMAlpinlY3EF2rRHV5wXbUDdBH4qZ/MhHPgIi+kS57A+JyPvxrO0efI5vV3uqcBSts/mH7e9taXZT3g8A/8zn/Vxh840RfOzn3XiImdoWY4CZysHkQ7MWVJvfS1909bs1d3tviibrym4ySAoZx+bVkg2qebEGZsAR+FAoivkoAyg88q+abSaIQGLmkvu4UA0m6z/F+2TC0aPUe5/qxXsR5mX6DatJCgAsA4O1joz6YG84GJGNWcJiMhAzj+PZeEdQaYazzMZpCYqQ3ovwEe6u6axrpnFJgLXzuw4E22vX7Kbs6AECj3vDl4Mw0zkjbdL9uAkej6waauX8itWMWkKl7+cHd9+QQ6YWxWqWGVJn93vf+1587GMfe9etHb5Lu6fc6rej3Sgcieh7cItvUUS+4KX06A6NqQqlc/9PArs1R9r3fReMC41p14/fXVqQ5XvkJm0RJFVUaqqbEbgauLj6H90HqUw3GsTR88qMK3ThZRk5bhpH7RIPyjhjT+AMfUxoCn4MUGha9boYAwtZSt5uPNIXVsYVHjGV0BST9bwsgnFyJJ4FZ2Qehxqddj8p1F+4F4z1Hkz3eH/PQyt04WeF7318LWVysiJ2ftV4/rT0RDv+5KrxjdOyduqmRSIQERANiFxeUvvzTwS6dszIqtl9368RKCb1buP24Fekinp6KCWP5Agr7L60PXrHao6/yh5/sz1+0B6/CsCbz3MyIvp/AvjnoIj4jwL4d0TkjzzTMQAsPMLB3orPZBS/0vBsiqG79mLwhoUHHvF1mMVnmQeVZqvoF3XCRZAHFKlxBKXNZ+5YLB+YpGPpx8mkcYJZxwYylVRHu5aoV0wNHNeqGoP6Gouj334LQqTOVZzfaawx+au2WHF5cf2SAtUbU4KbXRhXgThM463jJCAr8EUYQzVTgZfNNU2lmHSa3rcGxq7mFde+OuTGlz+QwjCEAWWQgkl9rUq5VqLf4V7RzYHLZnmX5o6HfQuz2JnVzcen0CjCPjUmtiNJ/+klCBBBmZU8A4dtI2UTtu5/9T4oTjL9uYMbBq/wlFThhsFLcFzWfOx7pJ1QVNs7kezWfIEgol8iIr+kfPS7iOi/AfDvPuvJRORffvYu7prBL8RutTR3JAtokAU4UkiKQRx0AnkkT/NKL8MlKBf/BfNOr2M25QCkAHETmLLy377Ie/xGBKgph44D5FzsjbqxV3sAaSZe8MDGoIbeVgNBq2BUgZM5za596nF2EWKhM8EDJHzGCTCmaCultpe3x6LuwfBDqNRoLiDhi9ZLBsj5eLuWV8HVIQw80rvzFwNIBiS/NiJ0ST+1+1uJ0uc63V/buM5cJLe0SD+tGnSBOCl+MsctiEMCXmaQmsgWquN8ARNp0fbYDAo21Y8I+P2l8O8CCHIQ3eBosg9rsPLFG70zzerS3kVE/6yI/AUAIKJfDODFfRHP2dT5rSbp3iQ+jYY+Gk4jSxIMAWgQmDMAcYDiv9rYsGxPQtPwanDdCCM8Bc3TxbxIkWdG1ER/MaFAsICNBzracUeeYCaSU5yNc+JYkgamBua5rKpef9F0uWHDFQBgawfVwPiAN8cbOMmKbTC2sZiG7ZpSmthqWusy6wX6EkQbSOFxwDG0yGp679nNiSR8pEQDw8bSM1nielx7oSUyTvaanQvGRhtaYaq+KEQngZB+UMUizkLfN4bqneQiTHyDrEGZvZ/ZMaNi1+XA8yACjt3Z79c+qJPpeiokU1g1XsMiitxnz+UuwqZaPVSCg9U14Ob0hgOI9TvOtBRBQhIloWDBoIF2ryDwd7Zw/PUAvoGIPtVe/xMA/8pL69EdmsNPJr+f2C7IwDaU9cTcfKE9evPJw+M0lw+QFhNGqMEptzRlC4BNZAcpe/kDj4TqgjayBDPZNdUvCSgIgqUfIZYhE9ZgMaFE2D6vzDW5WICM8Hop1I0P2Eg1xeM44DQUzOvgZyEDCrOama4xePaum7OVVn+4X84CRJAMTFVt1Juo5Aq8pwp1BVf3hrJgSyYLzZrndI+QRA77/OJMuxvTOMV8MJOfaNYi9+fYNy98xdKxL6CmLPJFa6/aqfe45kvf4F/cj9kw7c771HnVpCNOIVdLt8axKX2TkyDf+Uy1Xy4QEcfz47h7QYU8B0/qfbRn0b4/2dpdotXfBeBnE9F7AJCI/PDL79btbcYa5oLpooCHKgt1MomhzM8XiXMEAtASodzQcMLgAVhtkgFoIEIcZOx/FJpZ1Xo6MRqPyIP2hH9p6bdzejAXmFOfDDReIxczyavVWYEAtmBCMMoBx7GocByMU2cdjwYdAU95k4zEu9bmgrESNHQz1wyZCWBM6WV7f6Nfk5vczrSjqX6uOXrENPPJ8xipNU6PE9muQrTi+0YTNmUKibo4+g4LuW8ViK2PHMIdMi7en/wtTfjISwIYNwlISm02xpMAyILueNidBugbordaQqPCj9KdwPE4gADf1776BrTQybza7f4EGr3DzWoi+rd3rwEAIvLMPsf7aATBwltEWj2gMKBa1EmARguERpgqfWgO9TYaGi04sZoYLAPSFqBvPk0VakMUnmniQp9l/HnXYw0T/rpQ0XtrrAQRzIJHbS08eisWbBgLa1U/UeZG5ymM87hPiFJI1ZaaACLaeC1XOI0Vx7HgrW3FsTdsnUyLNoJgVu114R4a1dOaa95Onss7YTEfw4RnycYZrYV2V81xwDVAfb5QD19hNal98e7zjM2TFnAmdU/UDUQXuWt6EzlxfIcj+NWL2eu+Y5ahDDtFK7t83dqqBkcYmMo67M4rJoh8Mwoz25ILOjWMxtO41RYJADZ3Ek+aLiIn+t1zZIb/WtIvfsCT/PwO0fo7t3ey5gigAkEfQaPY3/9yunO3lqzIhYHHfWgOl7FIpZu83UDB22BsvILZFhWvplRZTvQNN9OWqIKLnd1nEE6dMYbna+vP2xA0JvBQvaoxYchsZnt2iQrpHTUWcSxuPfccBJn7ldpeVDocrHyXBSCvaZaMxQMTlGOZQsrJLbQ5H2CcS8jcC5fHKDyVJYKqCzEzQy4GpsjMYjf54OGW2ecX37/4fNaynDvRN4GzDJ/dNUzpiv4ROSzr/PvhfyTHn/bEn1q0OhIBUIIqlBtDDUJ5bnt1YTh/ZnUpVAFcweK1RG3kSxPHHRXT4JOhPLNnqh/8LqUi7t7onRmt9iYiv7++JqLfB+BbX1qPntJ0wRa6Ll88lingWEYiApMYpAcmIBo2ACfRqCm1gWWcTFPoxb/Hk+bmLSOLsFodKiDH0MBPwIhYo6MLC05DbHISmmmhm6wqkNgmcSFEBVKjylxpPhOKwLlJ6FkitQ05p9QLPDB0LP25+5tGUYP3DNSzu6IcEzJVF/TxmgRZpGyO6XcuZJIRx8NEaVKfX/v91FeOSn5IZpomA4JuwnHW+LTPxmRkWl2kXpomV8k25nNxaI0+PjmnlJxYyDOwKynzrk56CMY+lazgUjhNZICpKRg//NVzfxxu5sIVlmZ4kyvgmRvhnW1WX2hvQBl03pam+k0KRjcj3BRj0WDNIIHXSHHt8cnWsDGB6DFOvOLIB4y1YZET2jhhKYn5LpD2QQPf5UXMVB2ErSu/ZKQ0sprmo+kbCxMGKxPMMEnVqGGhrhyUGFG6wJufL2ofo0SE4QLNs65T0A3uhgMFAA6P4NoG1tbRuGOlDQc+oWEL4lMPPEVwBvm6puZ5IKoKRxcQ4Qu8oFgSLEJugHOGpxRKCOY0N88XlN/jGvQQe5/RLXghCaZ3oVcwmXvt0SPMykTTAudaqzfqxjmC6FcMctMwwHyCm/1X461I52z92qol2vzjFsXHfD4p4sF0Tp9PZIyS5seMoFQxfwkS9bK18uUGGh2tX5f8dY1QN7tmkgat1ktwbkkeHUu/Bm9H8Dhhuf4EqCtBBW0zguJF2tOygj6Z2118jjVTpgH48QD+vZfZqae1S0IkhEcB+BLlggJUmG2DJ/qqEx1MizOYRynQVXf5eu6bNBbXUj131rXJIWnW14CINxX2fHZcN7n211x7FJoLDBxOjMXSE4lUi1U/rWYGrdyx8Kb52Thh7deTZuh+uD186USrRqJ9BGSGxoT2B6c9u2A+V23Q+1u0Zo9w1w0PQETW672O6L0LvmFivGjdVTjqcYzhqGQjld6EWyLuPwgNySPp5w43AMySgYL9lflcBQxCUFE81g131h7n+1mzXFwwzua0mcHx3h5PaSxQo4OJIMIxJ7NyZNYBatsRfHqiQrGfQKfrs3v3fI3e8T7HX1WebwD+gYjc39byzO2yABEhS+kSrNyd/tBMXI66MwBw7C1MGoUxNKzUMFo7A4bXoIhmephmZudlZq3VIjSlNcbvRaPlKiQZ24BiGMm1BvMr3eB4B3wBpisByOh1Myr+A5FGyKWDF5kiz0SCA29YeMOBTniMT2DdnqCNE9btSfjHIqWMl9B0Tu0KnZXoQZmiocWqQOmyAEAWwBjEiUlEcf6XjKRlHKdFD2RWEJC55C60FJhc6MIKSN8FslOX7Ss01sJe3p8I0rhAhDPEa3BN5TwHL+hi0VzvazOT2zWwJpuOZz8GPZjdOAVcW3BEi44dkmRD5kybYD23JIV1JKkIFzO9+gdznpopXmSRBhh14x3SkaVvzRzvxxSMb35cheLpCDkeL87D52nvaM0RwP91z8ZBRB98LoaOe2wThGIHBWEaaFa3pbNoCuFu4gz7S81BAbyXUrjEkv11gWtApVtEU014MqYgM5nZfKCUfjYPgDPcd5lVAW/Cw/n16DUp9yHEUvqQZhYclkPmc+ITWmWphuCKj2FGX53eVNaYcUI7vZX5v57NwivYFrU793uzGtTkgYMZFuI401nDLRpQaLcZZa0LfDTHY+ZmZweZNMU4X9kUNQCX2MSqGdbfZDtPk5ye29zqoqzrfq6qZzq2MoR8zXMnDYMImWBsq/6x+zXnlEufH57v7cWvkqFHKelSOJ4HeoTP87YFBfHgzEDFEiFR4YnRQWMDtg2ynYDthHtpRO94PsfPqy+M7PbnvZzu3KWlqbkvLxB+Nwy9MAaadAANGGPSAvf72WSqF/9UfGYCqJlPM/5YsYBDCI3VlNZJXh/1OHsmGEIW8/K2z9lt5svboD7KEApEk1DVayoCkjzBTI3jlZRKa+lHrNtb4WtqpyfhG9NANIFbDyhIs0yRE1/pZuBRdxuxvdvh4t0yH+MefuILvvJBujbnd4gl0ydrbnUVoC6YIxXuHrUVF+/TNXkgJgSj7OYPAdTC9yeRJtkmrffS2MUnLnyd3edSUIqyxMOgxbTook1yU+0VNAnG+VpMoPcO6Zs+nu5HOIqPxWvabmPl+TcBOMntj/jbAI4APnDT7152EwAblsspYCYYGB2DGhZhMAQb94C4CAgLDTTuWEhr+K44KRZRTmdcfoAvPjbcnGDhNYIUjRsWm7gbYNAdFYqN1NdHpGQZ+8weIIWhB432wrIbHGVlM+MjBzcDBToOnmdhZA22SJZxCvNZOQav0Y5vgfoGMmd+XCexLiavHth0kYzlgLUdlEWIgC1M3IZ+QekN5iLrC6NjMcZylm7mZ0UGIAg8NllwsgJbALAQ6e9oDj7Zk2guUFxo1ffd9+jjVHvq36kC3ze14M/ElnAdqWNe7iNZ0MM2FRhfpQvGbbnKYlaFLIOhlgdjFrBxPRdNaA9eAU5+i5KBlN9JodgLXrcNWMDyHJGBITcyBz1Xeyea1SLyewH8XiL6vSLyb77CPj21aX5zMn4DCO2kPmdYRULzJ4XPiIeRk3Zc0TUatIToMtTXMglGUJhq6lOTwFl2qwjIlqPskBkXjK41Nmd9KYLRyQ+AS5Rr06rXYIQYOUFJhxtulk/QmDEJibVfazTy9FZEUflU/IxuBvoO79RqGPFY6f6nazD918d83/Q+FPycJAGrj/NwP6dTZ+1qs3igR2oaIWYYE4DJh9nGqfRhJO5vrzn5fXEIWIn+OzxnwRYwnTBFkYLI/Z6DF7VkRE18AMgaOa0wLc3BuL2LYpp3cCvmHOrln82tmrC5oUdgyqPXrDq/cANMgIMYxAxpDXSP2MSnWRafzO02zfFzROSvA/gTRPRz95+LyHe/1J7d2NL/cwZ5QC68Qc1ygBkb9Hm3SbvQpsIRGw7jCZqocGRbVNUE8VQyAWFI0xKeHkApgs61DcBLL6gGyeSC0N4vgtEFSoP5Hz2iCJlMRhCseiCbQMk8ZxWWKfj3UU4eJyz9qAQb/QTejqDtGLWVRQvwpAZyaeHdQKS6DyBlH4rwnHxz5uUtgmWCTHlQBElCURmJgDRpZXfu9GOOicyD3Bdsl1OFDtwFEi6JHFOCxAbasF0sXaD9t+g6G1v3BThRCH9KEgwfJ7UGLgQZyV0n/ojpvuzN5Hq/gul7opbT50RixSIlfKLCC2RZLco+QH3F/TS6IMBfn3abz/Ffh5Zk/f0XPhMAv+yl9OgZmmsmbro5LKUSxzbe1H9WJuUqR/W/WVW2fYSxtyudNCD0toJE07FisZfFz6xZOa3MATermcRyrD1I5Kam6khzOYY0qZ3MouIJTZcDQQUIEykOT2ha0BqzTG1v6Udwd6jGUXFsPfFw8FTFtsKj1foehYno7Dmu3c1VGWXSfENATtqloAqWumCizrQsOEHzw6dKgVbGwDVk91vuMYvVN7cvG+FclDP20TkflYptxckvwGrpZBTaI8V77Oseg7pvmeG0z9/O+esQm8CRehTbtE0wwAOJ2d1nSIWwTEHsjw7JsnJb8ZulqTndlkf6GgC/8W5gPQCHI+jRPQVkgHesWf2v2tMvEZEn9TMievRSe3VrkxAGzdIHqy9oP5HFcGtsuzHLwNoVxrL0I5bTmwbYtYVrwmIAN0baQhi5Rkha5nM49s4FI43QFmetMQVj5RKsTno1oUdiJ3FutrpRK/BARDmOm2/ur6oUWhHhpKI5HCyQwCEYHdbT25oCoVb0QwYrIihSXoOKw//SnaSd+KzaMtJUD02ruAvSD1eFo+EoR3JkMqfPmMJ3zDEOATmnDJItcjJr4oSlX4c14tRhEVl3DW9n4t8oLJHC8qamY9owYHO4+LsvtYxC13FN+jMXjJUsRAWvKGSrrejSwesjRSIsK3BPOEcn2n1d212i1X8RwN6svvTeK2kEwYGOyZ1oWLAm2wVHPyVExSY+j451ewttewLejmjXnwj/m7QFYrALogatXZi7cfbB8HrUsRqJQ2dCM1OVzS/XSKIkQw3G1Ep/jp/zIItqjhqQ6FZHuJphCfVIrRPIYI6b3WF+FxCyQyuEEUJxrFcGM1mz4JVDTrhhM5zjkR8FW/cmS2R15IJXYo4GwoaBhTD1ZS/b99yE1SR3SrRLZnoN6OzN3EtpbwHFuiREYlznUqaH7U3TuE9o25MYk0ELxnIw7RqGocysniwMds5UtD9vl/y+j6UnDbp/PGqi+zhU90ahslNiXsOIci1fkRvZVpe66O+Oy2PNpOHFxqjUvLmv9g6NVv9EAJ8JjVZ/IdLB8R5oCuHb0tQXtMEzLNxfSIVMFgCyJnIPjSGyA/oG7ptFbEs2Q6GKruZJTW0DEIJtQE1ltfooqlBWuq1KwR+BIvu9krhus7YLc/ALp2N/JxwXbGeaZDXbpj/vO1kRL/e98QJputhj0fv1Ghnq4IaND1rKQFqUPI10tz3RLQQAo5FW0PEaOJdqkuhCT9PYLQHVmGdhGd8JLGEx06f0knOTs44BQtOr72V/lN1HLYq2PdEMEtOipC1AE6ATqB1AUuFFN2tHl7TEmic0scqLBaji3lFoj9nPWXBpPIcBq3DJo5v/k+BZ2tEXPxepMyRMd+v+xQ3nBds71ef4KwH8OgCfBeAPlPd/FArxeVuaa4tuQi1W/tLrduT3fGI0oCwsNb3VjD5bXG5K0gJhKzuwE4ypG3Q0ItUcIRNhwywcPUNEwpyObBdo8CAyRVwTM63kkilNUHiJ92W/yADMC8s1GQd4wxZHwExUSHbTHupmEDVeNGcjeCyjEBPIAkVJZSYiEfgCQQW5R9gvRF59MTpUphFhqePthLuX2k4wTqQO1RdHyXKUG16b6t8wtshE4U0zR2g7gjcVjhHHJrIa5M4UTjf371KXQUXD9Lz19Dmy+ZE7eBLu+zGbXks389tr/dhmGAxV6hcfhMl1oWTAtgE3ArVzDfXFWrpZXsd2m8/xGwF8IxH9ahH5llfYp1sbj45Hxx+d/Esu5AIkzG03odJnBdjCcQGxHOK9sV6hr49wOryhqV6GS9u3RU7ptOeBzmki6dkuT64WZRSOofEetrcikOA+LUBr0AxqaJQM4pGZscMmDmJstF7U0Kbm/jFuqjW2FWMxzdDS2jxg4X+bmHAcS2iNTo47UIhy4xQqCBsxVmYsvKk/z/18SO1HtZ5NC6DJyXyUYr4yF1ojormpBdtmwGkud6v/LQ6X8e+Dpuc1pdBNYd2wtozub0/Ax7fA2zXoqGY1HTrGcgUSQWtammKJDWRVbd/PIeewodv8jPq5+ZolU0o7rFyG1ReKfOrwqVaKMmRAzVoEjEjJOQwMmZ+jGTPUiP7JPQu0d6rmCAAQkW8hon8BminzqLz/777Mjt3SI6VXAiahePGbYUrpDRrcjMy2YbQFE3shMfr6CKMdws9W833djPf0MC2urlHUVsykMAODESjNpjAfZQuHP5vm6N8djFwMoVucsz57G3BhOkIoPN+ozlpVDZaEGWgkCa6x1ubjyMYoTlBNehhQybVZX5v1GIGDrBjKs1S44jYgxmDb7KK2Sov0PN/QqtaVQtLT9woDd1VApWy41eViKXYymhI6cKkCGFk8872em1dgnP2oDEVw7sc06Mx2Ai/76Tymotq4bXyBc/WcbCibkFJo9PjOPKaJQvCA0L00wjvT5+iNiL4O6mP8pQC+HsD/GsBffsn9urk/IoFH1NfnfHuZMkWhaeh3jSG5rfF9KkGIbXmMHqVND7GI0sVeiUJNG6Dk0AsqMcnFnSQKyQXogjFM6tEtYFJ9YGayuVB1IPZOOKopBhAtkeXBsUAqK7VE5FoKHm/y4WGPHpw1HhVcPh7aPzEoChyXiHBkZCT7jpqIJzw6snQSFkV4Zz0UiV96mdGK6ZvzsQuZhRR3g/X6rI9iLOBGiEmWOZIsOOVvZzFcNLMFINskGuWGo02v2AdfR2EPA9r5HQNIb4JOUgP0MhupcarvWxmHkk2ojqsTcHh9pPtoboW8ru0u0epfLCJfQER/TUR+DxH9fgAfetkdu7mlw7g61cOvxmrmRGYCL+nv8popvIAWP46bbMpAs/GKo1xhSIvFnaVBddpEzWjpWHxBBPh4Nnu9H46PA5ABJOfPs4hqXdz+3NtEW1XTyVi1x2UcQ+NjGSp8ZdOggp9nKMega8xEBOobGoAxjB3IiooNtMCRAsAw835mDgcWdsajFtrj4tF4St+qa4N7ADigvi/nVnSmmqqJ++ukUssNw83l1HYThernAWZNNXU2/wwxn6aZxgRigze1FvPLCR3qXx43fXoVxzpDtnRMO9x10UAFARBuhEmAogjk4kqq2FEiDFqizIfWPE+BTDtBVf3VJ1nVnwxNs72v9o42qwG8ZY9vEtFnAPgYgPe+vC49rbnjPbVEoE6OSixatQiGZ4Eov93McC3EOPEVOlrk9oZ5ZABk8R2+9sZNXavjwcaT5204RpBb7NYxua1Npmzx9+3JJS6Ohqf4Ocegmb1B7iBFKLnmKBRmI8uGMTTI4KzRVTNlw0suZ9qOa62qmW8kAe1xjOdCW+BQ93jHAFSXKoTV3K2CTAM9FMIvOB9NWALmP7tFU52EDDxSfr5wPTNFeAHRpljXCGAt8FTLsEwmAzmFzXSPUj+bMJNEpYCZ1egRzEJ1vgLT/h3TWQOQpCVXGVv4LHV+6Ph7dpceiXdHzT/3Kd9Xu0//5atudxGOf4qIfgyA/xDAd0NVrT/8Mjt1WxMijHaYHOxzrmkuuKpt1CwBAVl+aYn4CqHb7r3JEu95ZFgXbzdBmeYlyRbZGcv2RMu9bsmH51AZaQs267f3dXAKCQ+IeO1pn1RMKvAqcFkgFi01rUQGUFwNTobajMxUcZw7v6yUhWZ+M1X9JIh/AYTGUfPWw1RHmn2qdaR/lmA1wseTCUw9AfTtejuvEfiJgI+P785E9Xsaz6VFP7zNuebnmltEzyu6oGxCo60g0fIW1FQgjuWgf23FtjwK94v7pWPOVFeM5HzxrJ7K6h2s4KyZMB0c1zOLLNt8nZzWcuMn0hBuoEIzN6CbMNtca7IFoNzdCIFBBUoNIrpH4XjZX/q6tLsEZJz1+1uI6E9BgzKf81J7dWvLJPoa3a3QjaotumCsfhX9oh8tza1NkoR038ZuugZvoJtm7gSvk5ZYXzcuTCd1whCGgSOjCh4vk89HHeg74gHXpopmyUX4BbSpah/EgPmgLo5q+M7mKnXqryoaiqfn7czaVtLpalR9GceodZKaerpEAlIjM0947YPnoadfdPaTOUMSAHMFZHR/usa91k9y9r7DnDxgJ0PN6bEcNK20LZpZQjynVCIDGeozPA/MuMD03G8Noum4bLwCorRjzkaexbWc+KMnPrefJuGItqQfsvhDK+TI63DH/H0F7R1JWXapicg1gGsi+hMAfsrL6dId+hGCsUA7kNpjCMaykw9hbFiC3cZbnbz72ii18bSAyMzX80amkdkRL/SbM6pcMJQbH5KZxutG0/kCj2O5UEYuiOxDIV4FYqxIV7uZhzRBP/ag6OkcIYCT9caF8QSl2Qs1yep4VZjWcXQXiZRoqf++FlNrKPXFi79wgCZNU9MWEwi031hivHAecdc+GeWYjYm6GxpGU62xs1oAZ66AnZB21iiRrJu9Z/KW4gdsbNUXTUA6LpYrZM3+eLvW6PmelNaFo1kDiQIwIe1zxDZ2osuuhftq1c/+OrbnKbAFXJYLT/8R0RcD+INQ9eTrReRrzI/5TVBw+VeJyMefpRuXEu7rowubitWrDmdP6bOjTT4fNw3ra8CDP0M10gtCJVP2HHPZNEeZ18DFxeJ281+sdEOJaodJuOOYnAQM3CRM57xXpMuMH9bUSEDfC+r+XPRbuwp3hArqDHRRAasrmcV1CjyLtO8hM5PQFskxgWsTew1xqAmPBMszDBOKbap1o6b4AtCSEV7fUOIeeVmLm6sU7oM0TvRwWh+DxyHGc3DL8gbUsPEabhon5u0RAc9r2sQJRTr4LBVwGDBb7906rsG0GEdnBsNc0yQzq2k7gq7fArYT6HTM+bZtoPUAWbrlyaurRKxukZv3lzYEQqZsOkn0fbV3us/xUntmCD3pFvm1AH4FgI8C+E4i+lYAvxbAb4FWNPw1AL7uaadm6WbCGLD1qZ1Nk+3c4awmx9508+cO3Hby1mquzeZY4uiomPhhptXAQ2hL9YgNs7Cwx8J9WK/H3zsz3QortWIydQOpJBo1O8a1oW7C20lnvV/+P5NG57N/ktrpENAt5tOknfrGZe+RaTB6fKhBSrk5OAGx+uzsOi3cLqywn6pb1367eYvd5ylA87sR7IFuZDUfexCnZn8WODq3NirdGkRv5jACZj0XQ0giMBewG9/sQ9PMDS/wi0PZuql3oPfwQ1NrkG5zb5cfnSb2zVLPBSTw/ELhUrsvn+MlxWr3OdnnXwrgTQC/7kVpFW/Lrf4vcFkIEoAf9xzn+gUAfkBE/o4d/5sBfBn0Yof93WmbURCuRijd7IEk3b63jCaaT6uQJTjUQkBwHkW9OMmyr757FwEJpMDat4R4FM0xIs8FplME4SgaR4UOeV+qxnp+PmPlqeDqXVqkRukl+QyLNivc1ETkBaf2SH1o4CC+ALIw1t6B7+dOYtzL4+Ea495PXH1RWjVx2P3Ia/f0SgfLT9FuJoUqWV2ffZ73zeO1h/QUbc8elPDBcaqmLdIaQGn3LdZ7FseqTO6SArKBIyVUrz/HzP24+nvWz+r9PwumKdJAvPwrDVC3SHor2NU9OqD2tSI+kEGpGri6j3YfmuNNipWIfF/52pcA+Gz7+4UA/h/2+Nzttk3i9z3nZze1zwTw98rrj0I7/x8C+CCAHwbwlU87iLJJnyAyQOw3UjIwA5kqzu3zWGvqGzutFsH8WyoIVpyCJMI1lgBU7yZqFleS9OMVYLkXVooI+k7DUiZoi2i6xoeRAnp3Pp/Y+Tp9SSG0dzRlis1rIax6O0SNmGN7hI0PuJZH2IbmTjufIhGC8FWI0NggIa1DaIMMxjI0mu7wpalQFw309khdCXZOF7J1/ASCtWo6yPF2E76NU1xPb+VziyxXv3NlLarCvD7WuWEntb4JRkuNUCstNpzGMvk2/Tze3yoY67nIUgm7uwAIaLyiFe0QQBBGVITRDPa3TZcYwdwudu8Fpi02SGV4t+MP3rmaLvBQKv2fbwj3Ywrv5+oLtJsUqyocvwzAHxONfP4lIvoxRPSTROSHnvekt+VW//nnPegN7dKIi4j8XQBfdOsPiT4I4MsB4NPe8ylqIsAiwdTAA5pORmSOZskJe2FRAM7WHXolnC1nwRbkuSQJwagLduqb+fviglxT2zH7zANxIWrqcs1MWCdi0HNkVLxqAHFdBmHyY9e0yowoc5jTvSWB7YmvsMmC41hxkgVDKIQjA0ZvRmH2ghC+ubjeiJLqoiSzewevBllqUwaL7PqqWLzqGkjQePWfZkBDwftubgsRFss+ieNWOM8eDiSXBWVojrYshnCAo31s4viki+cmP96+edZLCKkCq4l+2jXJLjDoGF6/f2gN2FwrL3Nr1Gj1ufacLo3zDbpmfTUIPvKRj4CIPlG+9qHnqTh6R83x04now+X1B0Sk1qm6SbHCU77zmQDuXzi+hPZRAD+5vP4sAD94lx/aTXk/AHzh5/5MAVS7EuHQPKj7JJuDA5o21UIIiplv9k2s3C2bQ+vJMMZUL9izXlRj7Wd9Q541z8v+6FkuptHswN9xfSFEi8+xpPT5d4BKfe+aMU8ahv52x8vHit1zM/pk2mKnBW+Nx9hkwVvbFU6jYRsUASsiYG0NCw30hXGiFQttQFOiiEYn1epwVPevLUrBgAPundTi2B5H37VLuvksclStOcxmmRZ3HbO6yfj9aLyFC2T22c4aY/Uzz5tLyTWerAzNXLkeB/TBOI4lGIic2X2wV7yczdHqt/bXVfgPaulnNZHk9xyEFFSh6TF6O+gGsQr4oBQHNMzvCOgGWfCpqCmG1by23uzHIbVgPd573/tefOxjH3sXXrDdMRXxH4nI+275/KJi9Rzfeab2KoXjdwL4bCJ6L4C/D+ArcAcz+rwVf4mZFgQjgxhq/rn/RlP+3G9IUcGuAkJcMEZ5JyeEcI1mFM3xAhGo7+pzFyl3+0ngjbiDk/YoJvSCd7L4nOzcFo8GMBe49xzkKcAxPDvGQONSBQVF4GWTJcoS6B+jF+EY52DCMgasjA02g5to8So6v34gtdWS8ePR3azlLXa9LtxnwTizzpynjOaYEprVHNejXIYk5eNlwLi3yDEWRh+MzSpXuuYoJGik+nHjji5IuAxS0NSoezPqtrrZiWl++zm110Zd+2bDX0pbQG0FliXN68pEVTTsS8fenycCeC8mSy40OrsXz9nuolg9t/J1U3tlwlFENiL6agDfDg3CfIOIfO8zHwfAHvgN5CIBkvAT0AkqRGii1QLJxKbv7i4YG21ZU9kyTNyki3StktOqJ9Vc1prCWIVlBiFmmEmU9iwZI14lD4J5woagpCnglGb2+QTUPqYWR4XkVH2fmomxYTFtccFpqABQ4ehjB3RbwKeR/tKFVp32hQNy7gCn/zWCUM5qbsKA7N4U18fl++19L7WtC8bVTVH9rmtELoAIAxl5v2mhVqHgvunQIEvmSLdx8cM0ACSsASuZIWAELdDlR3NXibs64toI8GynS4Bpz4xyOBiNrmz1q4C3FSibKfYbdSAXsk/qGUn14MzFcwOu9nla3dBfsN1FsfpWAF9t/shfCOCHX8TfCNyNlefPAPiXROSf2OtPA/DNIvIrn/VkIvJtAL7tWX83d8hMjPpWEToCiTQ4zUAwTjxKQLTrbwzBQqfQGJdxDE6/EIxdWccDZ1YyYIQYvByicHvN73ZBVElWfREHMDq0QpoW/YWLjgU57GXVgjSd0LRUTwn0flYIj/XtJAcc5WC+RheQjK0r3djWc0J3YTRTThYeWBujUaYYdl5A0tHaql0UwWgLBq+WYrfqn6xK4CoKN2kyIOhgXoChxBaxhZgPTMHYdePZ+VrL/ff0OACTb9OzaLZL5SbsnXksKTgV95lSrqS5BtlHA7gDYGjJXtWGvbLlQklk7C6ZqslNAOkq03aYUSdQiXtyeAw2LkvaNsjwqDUB/j0RsCjFWsNJBTAN+5uVi0uunvtq9yEcb1KsiOg32edfB5UrXwrgB6BQnv/9i573Lprjp7tgtI78YyL6CS964udtQkA3yrF00JuzvtxsD9I0cUoxQiNdQISWO7oFPjI4IBNW0I/n5uqcHihK3oCM8KVQVF9jjaLWvs5BHjOPhYB9qqAJhWB3LibQrVpXiVzrD0qAqGhFwRt4g0WljNGimpMwaGiZ2CYze1AEfACtWNjWLMxl0KWIDgtiXJxIwvOB2cb7Uk0U4Fwo1ntUU+Li2CYYay0eJteqzcfnmmbRGuO4AXExzYtoOrdeUzY9a49a1+4znTg4ab6mm1oVXpFdZQgIEtGKkQAgLSpKirEIRVBuqEvJ86y9j3ofbvah31e7J83xomJlQtGfC4DffC8ns3YX4TiI6KeIyP8AAET0U/GCjs4Xa2leJlBXQEJnAROflAKFSAwrObr3u+wxYYCbtrvmqYGuBdCI3FsUv14Kxl20ehftriY6Sb8MpLZ8aM14IOvXXLdkL4Ctc3qXDP4x94kvCgIA5kfLutl+2UMUS6nPi5A1LKdwC43KgeXDwOVuUNZzFeh9aLQeu/VFvC9rsBeMghnuUoHOTmqbdW8qBR2FP5DM0MxrnQUj08DiWruoIyBM6PJXAy6BNoh63VlP3effPnJ/U/NAXyW+1QqI6nckYgWG1/texkMDl2J4YEMg3LJ870uYZe/v83ivtt1FOP5bAP4CEf15e/1F0HrWb0sTYhzbozkAYRpYKww53rTOtL522EdlOq4+FtdeiBcAAhlsXIeWaWFg8yoMp1Ynr+/0VM9lWodlSAgKce8t1GREqusC0MjzaACnj62Wfwi4BwBPX3SMZcBpTIvTPmm0dW0DbMJoMWFYu8QlmACkluUZP9tyFZ95iYmND9iwossCr4yo15PCpGqPPkbVtVBLN+g1Ukby5XJ6oGurXRqO44DNos1+zQunH3Dh5HHP8c5EgKWp4BmSxcX62Oe/S/ymCsYM7GUdbRKK0q6DOLXqch3pm9xBkEwx6M7udBBz9SwgnkHyENGSw0gLi6XQ911oM7vVizcBzlwTr1O7CyvP/5eIfi6AXwTdYn+7iPyjl96zm/oDMpIDG3RCTqQBjNamKoS11SjgFLm0PGmfoprBlhqFp/AwW2Gu0VPZCGBu+g2rYKyT0TUjj6zuo9NPa2H2m7aLs2wGW+YuHEUC7O2m/gTfMMEIDDSGCkcxPyMkLXMUjkaWgsOskdf0YzlMqFMBThesYc0J8uOHi6BEr/daR03R1NvDYRqeRXhBEXXu0iYyXhlkNYDUoiDS+j5+HNdznfTCr6tbtP2EFV1GRN5rEMbHZB9Qm65j+jZNLoeEJBXW7gsIiUgBhXNuivqcqhXkcxUAUQroG9EFpUrnfbV3pOZIRJ8jIn/dBCOQYfGfYmb2C+UtPm8TEE5ymCYXYBpQO6ChY6FjaBbeXMNxwoCsl5EagKd3RR5rkxKk2dS0HSc0Ti7F0RbTztyUXINgomo83ndGR+cFzXyiavYnVAUoO3cJ0NTgjl+vKzvh/3LAdbsCObEpa5RzBAhbNS/nqVwboQlhrdki3o9S+oCB0IwetSNW2jSYZYElL3A1qAVpcKWIq+Vka2bJvv+4oA2GZre73n3Wkpvabo5rRpQFmYb6TAGgk94JZsFCKuAU76rBFP07oaHj0N8K090hUNftkUX6S5plICF2GrZtftWH6m6S2KAvla5F9UnPx/RaSMQryCBtbXQ1akQhXDEmo2fGVgQMLyx7biDSEbxPgfaOFI4A/nWo+fz7L3wmAH7ZS+nRHVrwM4LOwL0D6ljRAliSzmzMvI57war/LJpshbMIEjm8DQRuykATzm4ZCq4mj1bP7ON7P1nQ+IcP0HB+yOpv+8ya1JaygNTUb1zQTvYpjIX8V383QMRgDM0soRQcwEzPpuOdxByMEYLRSSFqcMjvgTMMVYGYWlkFJc8bQ72Xel8SylSX2d6Uni6/5MrX42VevboqZAjYrARRyWLXrxRp67jG2p+EL7vxphvgoptjVhtMYt79Jmee0cv9RLJA1feqHzwE5M5fHfhS16Lj2nNu6hu2+Y8erhjaWRwx9wpm+H4aXRT8r0u7LX3Q/YpfIiJP6mdE9OjCT15Zq4Jxz8HIphmxY+AKNbyDkPfcewCmDIshOcmDNh8EbmOCy9gPp7o1l1h3st8cO7NqcMWURBHiJdpdo7U3+Yv2gkLK8S45/gky5dKqHjViHPZamwsqr7kdpWWtvKzCbi5gTzHK+RTz5+D6zPiZ72s1leu17bOA/LOaaii+ccHNYzkbmziPKGtPF5p4ndScVpLeZRyxbk9AfYv7TO2AhQ8KjEdXqjLylM/z8+k1IfoXG5QYrAY0jzGSTDjqmd+lubboprSjICwHNHlGByA5jybsZ9mY76Pp2d6BwrG0vwjg597hvVfasqi8CzpgowaGoHPTIlM077aOs6uwjjwgQgAAZVFioGFFYzWr2ziFqVRrTQ9Wc3JQQ0eWWaiCxYXidFozJUcpCrZ5TjKVGsyBAizwJVtAFbg+BWfifHXhaW0XL5faXIO2bumGcm7KhasBgqUfo0gYV8yn1Srx4IQLXUbHMk5nqYDqHz1EtJoMFE7O/iNZcfHptXTM+CcVpM2i1QsPDLGNgIE+0udXI06OT1x4w2E8waE/wbq9hfX646B+AogtQrxhsILgBzPYZkgY8ruqfsEYv4sig1g5Mmvaocym9KUNIe4SpbYX2NbtqI+na3jWDJYVEIG0BYAzQy0h7Gtaqt6XexRm8g4NyBDRT4Qmbj8moi9EGirvgZZqfdsao2NQlgio5pIAIHGzm0MjAhDmXtSSKdT60UoQQpmcVcAMUV4/skwFTVW043Li/cKk3pn7k7l0QdPbFwXbcwcCLrDZTFNzAUhm77j/z9sk3MTBMx719Gs/N9VrtHTv0wvy1ZJBJCDThPI681gquCukRYwgJJmUXOdSITOoWf2VEnCRkTenXOH0ygSkj3MEjmgocN3N6dgIkVAcE+gNjnqwqo0G/BcSEBHYosLVFxgEIXHd5wQlc68lNLuLHJk3bAZuxVyq/OqmNPVSa1vI3BIVbE5KfEwcwPKa/5+v76e9U32OvxLAr4PmKP5+5Oj9CIDf/XK7dXOjWEbntYadWaU783HxPVVSAa9XAljFYJn9PvuWmLwUXODZVJr+gvWFp4UyOdkLm08wY5sGpdjAmWnaNcYzTUPUVHXBGAzgLvxEdGHDOQMLeJl0nPb+16kM7E447gVxgq/T/6n1klVsuGDcM8VEUCKCJ5liSYYemNMs+5nAyIyicyEZjEsmGMmFGzIKz5bVkmVkNY2U4/qc/svcLHH+crdpxoTeJBSn910w7j5PvK1Mn/h41bELaBByHgRV2fALhNbbblDN1wiOwwVUSlvcp0Ccruod6nP8RgDfSES/WkS+5RX26amtWUW+Zr6egVa0RwKgjD1EAJsG56Z3baE5XDAlKZzzs3YAlKWxz6lGMc0FIGSJBcYI07KN007L44lzrwpGr3tDxLohOHNL0eLYCGHDD2rCUYHjXlVQe5f9NbeERdbdT6qfq5NfigZXBWRt1UdFYlqYMbXX+i1CjF5MOD/nSQ4KuYHDnQQDnBySovCpWofGr09L3p5rPuFuIE7sIY3gUEwUmGEdrYzsahFqL7FLhmkVLjWrJ59qzp0pt7oEU1xbnoNmJdp+gX3I25yGSjE/1HwnSKe4zxcbsdbb5oa+HDDaQRmS1jeCrs7nctX27+znfErT7f8dKBxL+3lE9Gd3udW/Q0T+zy+1Zze0umOH3y30IW3BzSeCQSkUq3ZEVIoYUeLaqpaX3539e3Ui6YFV73FzcKK6L6alg4JbP00a2QCKBnaXMajph6WGcZX+pu0INIuIR/UniQaDiDHM3PZzh3m7i6CyXadmsij7Og+YeXw5SOQLr0bK1fWQG0CUY4VvYrm5qFZbxrLg9gTq41Tm7N25ZQBG5pCb25yY6XMgtMrsLdynN2ixHGaJioTqCrgAvSmBrHShJDsOptdzkOni/SMCNbZAS9nUQBDzyQ5uYGnAMKHpmNs2JwEEJrKtUVJ2ozUgcYFG2M39+2jvSM2xtC8RkTCjLbf6SwG8LcLRW07k+T1g9iHuBSOQfHxMAwc6IXJh4RkF887pO/8c/Dg3f9zUmUqZFg1P61pvaP06fETCDURLmpmiRLu+mzMECO3T+jkyUhxksFOH3WQum4H0qbuuhbjg2XCYovn6uwG2hdhIGdFZOtAMn2npmwAmmJHjKR0hMLsdGNtIrGkNqFnXMUg1xxUnLLyC3Ezcm7hkNbWH52DfbSHWeeL+xlZ4Pgc3bDiAqWkgo2iqva3YLAOoulFqIK/6JDVgJZOlEOS9w1h7KsUcECYwoKmYgG683eeJzQ1qmXPNfYNwA/M1qJsv1+psy3LAtjzGtjzCqV3hCR7jNFYj8p0hXHu0wou2l0dp8fLbXYRjI6IrK8sKInoM4Oopv3lpLTSQ1Gcuttt8P2lm9WDlcVZpAGfmTfzOTCRP+Zt9aIQ2zB9EqU25/0qF4lEd/duxBJMEaG5idZDBLmLhlgyQmpq2x765/1C/nKbWpC27SQoNTAykKezfdRO3sucoL2YDkwLWlYyimashz1PrxDimVIVfi+p8NQ2v5mnHOIuotkaCDUtgCad7IYpDFavvvL/TU371BXC7DRHYx7UcQaC1XoQpUAgxA0zr9XrVk3/ZrJXYdCDn8SN4MMY3W2XTYScz8Ug+I7TF7BeZa2LJjdOi5l2G1tmWkRkzAMZygLQVfTmgeyE1WnRc4RyVNVXTrLF7Uvb8fr+u7S7C8ZsA/Fki+qPQ2/2vAPjGl9qrp7Q6KS+11Azs+zK/F4IRGxq2KDvqwnF/Lv9t1QL8PIHZE51ctRYxgCmqy/0I7iocQ1Wy4vG8WH2WEgWt/p8AUQcGTjVXwYyTBM5hGR7QqOBgBQNXoZBFqrp4+iFC4DLUtwvydLUR8Bs/Z8CPdj7TSgE2QOgjwdMDaXopyJzQZYAkI9d+7OysaY+EiMLvq1DuBeJNGoxvQoAHqdQPK2Kiv6QyutYWAbO9YC+uhPqbG9ND/X7En/siJecHkONKidUFUGooAb2pvsLEwRA1THMc7TBVlhwj78e0lgThrrqv9o42q0XkPyCi7wHwy6FL5d8TkW9/6T27rU+T9rjTKmgWjPU5Q0IwrjhhoQ2H/uQMswdcioTKWUQ4shHsG+wg2sKhqCaTBkuW608EHi1Zug+qwfVNzTgzVRmav52BoT0kJsHUAmC0AwAKWJG3iLx2deJDUEzTHEeL1eIkS9TQrhplViFkE4q2adAMUh/UQlvcpBnbeAuyhi6pTexFBtsGg7FA0IN1nLmHf60GndK89nvmue1OgdZicapPWO+Va41qQeQG5BtDt03A58E0vyCR/eP+Om9NDAJFSW02fL74GcScFsM6coZOolJT3Ex4XqPWz4YlNq+OBQur6wEAWr/SjX7TetbSPDKt1SU3WrVgmFHV6TDunFOiyIn7au/0gAxE5E8D+NMvuS93bjdF1i7BcTT6mZqJhhssgnkBswc8nWdvFowlXUwMclNmm7OIszvcRy/cezuNAftHz2pG+DlrhFOFt2XCWO50QI2stXHSAlljU1OPTIv0PpMHZtzULamEoiDuS3Al0Jxk6NFuF7IdaUa7+WxhCf3+hWEdAFgIg/Sxix/T8sp1t7jhptDUz0jtKxuoijQTlgbx8W8N0z5d+/MMqvpbYO/Pnj/vxAa6cjC7+onTxTL8mxptJgYMnA4goGFBFmKY2s5rMLd346bcXTo2PsSc8EWdv1+i7O5ZfXQSrcJ5wz15oSaJKnod212YwH8RgP8YwM8CcIDaL58Qkfe85L5d7o97G8+o6Ql7a8CXb2VKiZoyxXe3B09PZ3OITmQ58OUd/8b+Jv7s4jlK4OSSiRZg7JItUpv7xdwP5o57PwaMCmhwC+3RoSlzDrhrQhywKELFcTIkMoJsxENIz3nrzl7jZvT+umDC77Ymdj87GIsLPodMWQrnPA4c11KvJ85rWqMnBXhQrgo7FZBzWmqlJsurSU2z9tcJdAkLGN0CKKQbm/mhdc4ZcYThZVODNxOaV9X6WrIb9SIYo8ZP8TRspj0uAHpkISlmtvMa11I1Xc9i8r+n3ZNnbf9zgPL8IWjNhj8B4H0Afi2Af/plduq2RiI49LcCLC1gbIqMUyYY1wx2GqVGXLPSoOcGBxTG/UWkZRj2fIwzX+QANQPi7uAX+ya2AESUpIKKTwjE6hfyP05yCb9W92tWYLYeV01IF4onvpqCHz4GC53QWhaTdy3Z0x6dXsxrVnthKe1Apn85RlH9kEsIuRqxnYk9bMHZ98AdDTf7oKoPsr6nwlYFPnPClshM/CTW4CwcRqv9bon+MzlkKeeDmtcjNlrv8zYWbC4g3SyPIF4yGk19LxrkAIOwYMUW7ojREhAvIDAPg0PNG54g64pftzeiENr1OIR7YvN7IoJGipF110OnBWuQQJdsKySO1ZWL2CqM6R10/z7Cd7TPEQBE5AeIqIlIB/BHiegvvuR+3dIUTD0omVKA9JvxGdB7NggdXbfP2nDB6Attb6ISiebsMyH8j7bYbmvsmlszR/voQE+NNJzmlKbj05L/9wzZnU2rMMygm10BbDc6NrBrbBl53acoTucR0jRN16BcpmPHnVgF405LVLKKNGfjoQRBAC29oEJlDrbpMe1ecANJQyOCiGqQdRwcQuRwpApT8b7ouQtsZeeKEaM48/IRXo6VIpMH3suL47U3s+0iVEuMa7ctgFfDTfqxbHP2qDKlOe1Fvqo263xJmwAbFnhGWKMNVObRJb+8W12+XuJq7lVA5vi9ju0uwvFNIjoA+CtE9B9Ai2S/cD3b5208Bg7Hj2PwgtY2yMrYKGmwnIY1vo9MJVvpZIwrJ+Vp3JnTnlJ1ao/CR+OChiBWROqcRGHfwj8VaW/DaOrXgOxENoo5zbflqpiENEWaExqi+ciV0uxEB3RpuJarovk52YUK8w6jcTNXAnMP4RhM3UXjFhoXhF9qk7SDZ+yDE2F6ErTONTLTSD8fZ7/1QJAzbbsm2S1qfeIr+z5N2pbjGz2a27GgAsv9OpYS2a1zIgqv3YZ+KBtso0wa8P4gfKoexVEkgBOcNCrClADwGrXUcxxyw3KNV3GIGlXea7J+TzYAMghHUmtnsUCW1wUHCmrBtp9R7oULw8wPyADXizbBO19zfD/Uz/jVAH47tDbsr36Znbq9SRQNGg7KJlaKMscHynk93jCLsJX0vT5PcqQz3wXjVodIbKKxUs5fahOzijm7Q8AZrKMuikoSW7WfcrXxOJUnRUaG01GvgjFMSYwS2WzhLwwBXEzgOk7pmUsNa74DlzkYw5VRAdFI7bX668KNEaZzaqaeSiiwol5W8oBZzfne1okN6Gl5wXW8/RrT/2xCVg0C0yZTwPtdjhxtSBmdOKieIwIbBBa/Z7NwCNq6SoJsgHkfj3SPtLP7E/Pa5bBokuY2GF55sNm9rnn4Z2Oyywm/abxetN0jKuiVt7tAef6uPX0LwO95ud25WyOor+9SYaz8TsmCMHO6BRxGtbc2Nit5oNFXb6kJ7SKDpHANxTLuBQaVBdcjm0RgQSNxWNDc50sktlKEgxOodloimlmDJ1UwusbVhSwOw+jmt9xoiXKowTbkJmtZcD5uzt7jY3kJCVCDRjU6UAWiBzGmtMviN3WmowUdp0Ia62btMA2pY4nPBi8xlh6lvnmunKMZqmCs16tR8mElE7RMwTA8aM2q8t8O0xpnLVsfByVP5EBucOr7zfs8OX1kBuGHH1Tm+0P645wzAp2nAwAvmi8u23Q/L43Hvr0MQXabe+iTvd1GWfY9uCUmKyJf8FJ69NRGxn24FIZrnibSpAlhaB1h2oLA1NP4aHSt7WswFDaTVYXvooBlqb6rNbCSQAYRvEVRJt6wYAPzwIJTCMphqXj7anRuUsUxdwvGmy8EX1RdOHBrjiN0UPUwrVUEoQWrUdWmu+oL1slageIPxOxDzOh/j+/lYkuNuMFSDUcv5Un3m0IGlDqv6GgKYC7lYrsQxmgmQK+wujBtgkanSOWMey0DYtaBUrGN0ELrdaVImrX4ZvfDhbOnOPq99TGKUr5o6Gax1Kb3SZnCVaZpkEZJUtxjWQNXnAIR8zxO94RpejSw2RidRgbAjt02mTHQG2Ohjis+Rl/nFSS4NL/uvb2DoTy/6pX14hmaUEbzutVtUVL7JVLTplxXykXgiykE4zhZKpqADPc4fCGTgMU1mBSEFgbSvsRuP9dY8X4upqXVmilzZcQkaK11RuZjnwc6pkVUPnMz3gvMq5aDSeu75KDXKxqxTCd4i9xAtrsjWojrw4iMI8eRegBrfx+1xKgVp2cd772Gqucf2AZbVUhg5VNAlOpYKrFctwweE1IX1v4l7alqlUtsmCOQBVWgenTb399H2COV0LlATaQOSfiMf9c192o+7wVWmPGGDlgAdGh6Z80yIgAiTecbA00aFkLc16e1+0ob9CbQyp2va7uNsuzv3vTZ29kcapN5ohpQ6EUwus/njFlGegZIZCuwEEv7Gx1M7secne6e3VE11IH55i8saNwNBumLJ4/va9LTEAFYf8ii4OlPdMG4yc7kLlkt9XVlsllcw6OZDf3SMao/0GEnTnYrpu3o9Z9Do3xcQ0Q7S5KlYnpO+T545dkrQA/f7OSPtGvJcbBURNPCIoPF+ArrPQ6foN+DiMZe9kvGGOzOL1ABGFF2Pz7NfRxlTDXrL+dHh8DdDZ2szK+k5lbLdVwSjBN355lA52l/iLriBGyWn6++XA0i7TfEuN57jU6ft3PmytenvXYg8EENn1g/NRbMcRymiJ6IcTxSlmSa9CwneLBkf/LavkRoFjBZl6sw+5iuABOM15sK4ePmghLoRTheLQNLWyArYWWGNMJCPQWPaVKtHydS2ggoMAyiYsEIFLO5TOAKRVFhhjMNqfr8pvFzf2UBN7tQVdjNFtF4H29BlsOtgnry50lSui3jpAQbo6N1zSN3jVPAADcwa6E0vydeTqERg0mCBKGDACEcx4JFBgYTmB5ZkS+Lwpd0SheBDIrgU1y3pPjU8V32Xj8QZMqxjzx1zJtSBYnXaHJNj+xE4avU1yMi5cDOAiibXPhB7XfVN1rvL1MzgorSN7N2KtZ0vlfKa9kli5+BgIZ5k7mv9joHZO5CmfGHAPzLAP4WgMcAfgNUWD5TI6LPIaL/loiuiej/tPvsK4jou4notz3tOAItzXq0P8/dDajDDWbjnfpoqXyeSki7SdmFcer2txGuT4wnR8bxRDhthFNnbJ3KQtkzzhiL9k440y5yrtfJMcl9wflfbQFqp46Ftvzjzd7r5nNNDS0W+E5riUUZ1GxKzKt+Q8sbnvp4Q7RTUouESGrpkpCr/G7RPC3Q4XCZtkvV6zEenredZAoT4XAgBqp/MLW+Dg6w+2bH2keFQ4xKn667+uuCaQgpGPvQDJZtcDzvQ8/hGS412BLjUDCXVYQHLtf+3Kz37zf7y2vEpInXa/fNtL6ertWBcLdEuZ+lhe/0KX+frO1VgsD/JwC/FcC/eOGzrwDw8wH8cSJ6t4h8/KaDDGG82R/DOQArs0idXHW3jclMC4gFw1KtlJJL8YMerWbLmmnjhEZLChQh9EE4dcKTI2HrhFMHxlCt0/01QxiPVsZGAh6MzqzF4z3SKENJJoyuCkQY4/wauwVRutDZwlUB0o2P8him8KXmv9Ooe4MTfMX4kVNI2PFFIt88o8qWtcMrBgFSCB0y28QyVi5oHVOlO2fUNs1Oz6l+Sv1YwdPEghMkNwYbFxkEwoqNG1baQKyckz42E8Gs+x4L7MURCC6knOhVmLBiQ6PNAkolawqFxRysbhzT6j1r5dgXbINCMAJA4+SKBIDBPejEbvLZAghXSPX/1rnMIhgQLOZbzHo5etyFdUM88AkN28RVKuHjTgvF2z6C/8LtHRyQ8XYvIHAR+YcA/iER/QsXPvY7JOX55eOAIn2q+nfyQPPuWX8XWSHm2GfAGHQanNH6Nszc8CjqIK1i5zdfgMaAM02NCztiBDRusDOm3OBChzVNXhRTmoZphZaiVn16RfD4dN9rwf69m0C/DlzXMUmXBIix95Fpv1oJLKlLQgMTpK4CIARjkOHa9/zaWAZAGxZPz2NgGwuAkYEhE5ZqcivGc5Et6NOCLSjG9Tz4UTGhHtlvwtDq5EYacekewX2Jqb16Ot8ptEXCNmzjGYTFCGndD0hWJ/ySmTxrjuNsDl/6/oKBDtGSxFAtMq0GK/tgVoATlcCDdJLzLs5Z+nEf7XU2q+8KAme8XBD4hwB8GMA3iciPPu3LdaEABaKxK3dwxldIDUQD3diVAQBLmtNiFQD3NWEu9yGF4U1Rvmq0xHtkAgOlVnVUHrQsj1sFo4RgbNgCKlPZwCfiBZoxiD5uc0WFnbO+mMVkNWiIxyREa4BDyjgRSWAXhXRM/WSuMXpWS02TDL8hNSx8ivFr3IHRMESDDwOaakgWbNCqkC1BO7RLCS0+Vn90TKhrpCzqDyQSRQfY/cF+wwlzugV86jTUpbMNc6kMtSr0egGAsbSh2FPx+o89LJ06bkmQMi7Ou8nsJ60FrhChnCPVmljlWPg/u0XPfV4YYkDy/NXEvo8mdq9e1/YsIPAneEkgcC/mddPnRPRBAF8OAO/51E+bhGIKxNSoqtO7eSBASAkJmjnLeY3iVHviiUr/BRN+RKJmEuvj2gidNHeaSTXHpQFLm/1kdfGGWd82kJlejtc8tavg7OuSJBB5nSr0G3Vc0bVqBnLCOq6Ds7FqYgKZMmEuCeqLYw1VhWtFO+bihytSNRnDBSKaWuk4xEEnNG4YI0kQYILRfYRA+gezbKsK+40PWIxNZqMFylp+nj7nEdmF/NoYFT3iAahK93XqSizh6IMJbsWWh05biP/MmFpwkgXHsaIPxlt9xak39EF4cmrYuloUHqRbmmA0aJ+a0aiVaPelgMtee9vfL9XUBxYYEoGcZUiFYBPF81YYVR1/ISOpoIZWavvUAmYsHR/5yEdARJ8op/6QiLz/1slzob0jNUci+jIAnyUiX2uvvwPAj7eP/w0R+ZNPOzgR/WYAv9FefqmI/ODzdNJuyvsB4Gd9/hdK+rnU7+JR2UbddtQKgdjv/hxMz0JsEeq59FKlwQdgPj4XUIKl2eQ280nZxVVw+vN6zsCxFbIHsu2+NwW0Ky1V4jVdu3M3wUIJs6nlElww+iJw3GSe/9xNoOOnJvUeB7kb+PyNgbjrdxkaTVbTFIABzAcxwKvRcolp41Qi32uMbYNWF8w89KLFsOBAK8DAKow+MAm+p5l/kWlUnP+9AOVTg3a/5piA2YNgqagcfmDXGDd77IOwWSDOBaP6oXP4fAbSJAQlxjCup87V4kP31/k9t5Q27+lkQSz9CEDQ+im+nxt/s5TWFKz+nQrWf+9734uPfexjL8yh8I4UjgD+DWigxNsVNGjyLgB/FMBThaMJ1q99kQ5eahlxQwQmCEoscWZO7zJMNB0ss1HUoc0xgQCEeRtmjC3WhQekAdtC4KE1YxTYa47wJlj4gq/TwcBWh0V9nhYYccFIS5h8lcTAYTsuEFsRjHtNrrbJlMeFhQVJ6rTaVyQ0JH5T6tWQDDA7CLqY1kVAdqjmRdTQWX9Tyx3UOiiq7cxEvkLJfbk0JXHdjFXISS9Ckz2Luvox0tfo9z24KgM4nX7XeG2sPmRAeqHir5QsUxBR6c7YxiwYY9xsGLk839+Dea4kLYSPaZ2X1QQnSGYiSWYiOXyKIMmaDgCsfnXn3/AKhvFx2WD3gP3nbe5/f13bbcLxICJ/r7z+CyLyMQAfI6Jn3lGI6CdC/YrvATAMtvO5IvIjz3QcCK74FNqipwbWyeL3PJz+yIUCwPxKWgirsqP45754hwlNxsDKHY/ahoUZC48oEHXuF8yFkKl8RqFFC4jGXPvDOQglCx95JBlAKTavbJUtAjAdEwGvX69pCPV63BcFC3cNzxneLbo6ZoNbLjAR8FAKDmIrz2qpcH4eZxEfpJHxYLSOWjCMWlumDJppMBKgcRodwg1LvwatA6f2CGjASTILCtDMkdWiy37v41osSq3Bo12uctl41G2Q+nVojSVQlZCfBafRcD0aTr3hyck1RvUz+j1TV4vgsOhmuS4DC+tf45E52rtNFNDSB95mrVLgKZoeZHHzWcv9HsMk9nvmQP4y1AB5lUwLDEnCty6WiH3B9k7VHD+tvhCRry4vfzyesYnI/wjgs571d/um2K40n716oKetTeeEM6DQbpLshEEIz5IkJrPmyBia/WILcIS2QWcTYEq/C7PTjmsalPchIrclp7hqdRGIQcHsFRqzAY/SpulUr9OTCwUUApLN9J7yd/1aggzCo5h2rMBospIEQ/Q7EZVepmwI15Z9fKtgzNKvc5/T57VBxoDIQGsnCDGWdgBhYKOsoeLAcbYgTA1KSSn+dTaHXEcjc4PYPXM2nnkOFX+t+5CHIxZouv++MTZOK2JpJhgDj+ownXPXyz4wpimC7juvWuOcDhvYWS+5EQGpMhfC7+jj3EMzBRDlPFyo3lfr9157YW5E9GMB/L8A/DQA/z2A/42I/OPdd34ygD8G4CdCdZYPiMgffNqxbxOO30FEv1FE/vDuRP8agL/8LBdwn001x+tikm3FX5JCAtCghJpNmITGZHLuWG72WRSar6y+tiu2tC9O7S7xckAfrWiLAjK4SIcWhvcobhWOkksVRAz1fHEshvAvGuat/s59eMr6k5qIswFBjH2bShqgnXsYaUIEt3bHZRoYnMXEPA1wGGDdgysbHzCoabAL5Xi2qF0QBg1X0RyZhnPt6G98oVvWkhBhJdZgEwgbH9BISSp8zBqVkhdIE16vZdag/ToXVlYnj+MTCQ68BaDeYTS1BchblPBh6y4kVRZpsE4frxYVildLD8F41U7hAgqoElIw+jyqzTczF4jpax6Kw93lrQdpitfavtTMt6tjkc1NcHVL3BcIHGfX9BLa7wLwZ0Xka4jod9nr37n7zgbgd4jIdxPRpwD4LiL6MyLyfbcd+Dbh+NsB/GdE9JUAvtve+3lQ3+O/+BwXcS/NzdzUimS6mdNCKOBunxBVG/KSqqCBZO47D2I4JqySBjglGMxEhcyp/SpkjQSVkoIrqhpemIAc4nw2p/a5x24OCUivLwDPhUuyHli0rEAIRmL7XikDUYMBrhHSTvMAK0geGgn3MR3UIEwG36HpHviYV+2r+tQu0o0F0w6DRi8MPB3NiBycAsTnwdz3yxuhB6KC99O0aXc7eEZR+LTLRhvXYZqigtJTBjFrdHppgsPSsbaBR80ELg8svIXPuKZSRpZSMflpNwf2KY4X6d98TJ28pMB76vf2QjPetwiS4On8mHducrOMvsf2ZQD+OXv+jQD+f9gJRxH5ISg+GyLyo0T0/QA+E8DzCUcDbf9iIvplAD7P3v7/iMife/b+328Lyqw9VRSd1wg+ez19t6f2hct38YwMVf9D5HB7fnA1TT1KSfl6X8EPuwkYn5gJXzW6Sjh7k4AkqVCM892fLFA00NBo0357XjVSCMdYQgMzPk7TWA71hQaBL2k/opBTifTn8XJL82sbDiinPJdmcJjANxO7Wz1vxeoZ9ZekVhgLugiKWjdlT35Q0+OaBXQW2sy/26Ondbzj3oIMPG7jZocOwdgGHi0djTvWtoWwVQ03XSPazxzr6gutcyL6VANxcX9zLszkufOmpq6gBHpXiTUJwpeg5L2CDJl/yoQfROSHiOgn3PZlIvppAL4QwHc87cB3wTn+OQBvu0C81JzpRih9WLDiQv66mpuzhplmJMMhIqlFqdmWd7bBymaCjDdQpxpL9R5p62LkCUPJB1jUwb9hKWbSuTMecAqsIgzP8mTH2aYAlHzoGq0s19t5jUXErYfvs7lAshZajQVlxmhRB6em5glUaC44hvbpnJUuJGtVQvfjem60XquS+DIGOi8q4NswbGQGCzz3XMex1JSGs2a7n7S4BsxnvGc1apRgdkIKRfddM/rku974EFhJoGx2JuAbA8yCNw4dh6Z/71qvtSa6gbH9XPv7fZPJ6YKwpoYu4xhaYzNsrt8nQFEP7r+tReF8HmRK6Oyb9f5EEG9nMbxIU7P6Tl/9dCL6cHn9ARH5gL8gov8S6i/ct3/rWfpDRO8G8C0AfttdAsF3yq3+ZG2qMZQFbSZTaGV78xIZBHAHNYWYnLXCvVPaBYhj++J4pGHRyQza+auqw101mvNI5d4v5tqse0OjfxeuJxhpQoj0OeporNRapKpmowwzhWeCjNoGK8M0MyBo8wZT4U4yQJbCVvOa/bBpqFJqcgZdajCgPK8Yo4PtnEK2+C+Y3pNfGKkB18+8dnb0sYyra8qumXkE2AWQX9/+nLU1w7VqUsAw4bjhwEesOGGhbZpHPodG7ffuvgMI81u1TWNymkiD91Cb1NZrqY1KIQcALF4xcy6rq4+eGXauwb5Iu6Nw/Eci8r6bjyH//E2fEdE/IKKfZFrjTwLwD2/43goVjH9cRD50l069lsJx72gXFMyWO7EvCJLLxzqfCDU4ke+p+94DILM5Wn2DAKVMyvMIzFcmSRdWzpNi8BxeU19PcBUg4BtT6YcdsQXMR+YaoNA2m2E4j3T7QiMSDFYN8JKjvma+3GVRqVmtzyOCD9U2WTp6W5XmzPe3Cz6wOl5d0qz3VtmG9ixG7l8M/52brJLCMcbXmYgm9IEdhwREpJFpFqw8cGgbrvikGUxG/Ra/IyX9kB3RR+2TA7+bEUV4+eAK7AbSVHZLYK5BxAEHcqtjuFYYXKZ8rnmai8Tv+700efnRagDfCuB/B+Br7PE/33+BiAjAHwHw/SLyB+564NdQOFLg3M4/ST/RvpCVt3RcczFDOBbbGZXUdAwVXYRM0/PvuP9sCKM7DKdk8JBppB0thORTr/Q24oGSdseipnQbJ1DfsGxPgLKAXJMehukDgMEWHaeR2Ssl99aFZ2/LbrwoNqfQaG8k07gsLH2cCYJN9PgLHzTBhhi0jqnCoPfHfZx+j6IMrcwb2SXfXfWpZmBEpmj3eW3wLMEx3xegEbAsA0sTrNzxxnqNR3yNK77G4/7xyfStUX1XFnNbMP+xWS0NAysd0WTDVX8zrAE39YPYA4TBa8xfTyTo0nDCGoLWdeduxcm8vtFeAQjN88L1Pm8T4Ixx6iW0rwHwnxLRrwfwPwD4lwCAiD4DwNeLyJcC+CXQDLvvIaK/Yr/73SLybbcd+LUTjoK9Rpc32v1xUwXASwKyCEbXHxyDd55ud+6c90ipgLAQ0O0oKxO67czeomqd+8PUD3BxAe+fe7DCcYrad5qEkWsRwRGJEYJRNR/1Ytbv66NA9SACDBbjgRAXRABi4+jOFGRpdMB56QDv+54+zfW8m/IuXMNzkHyzRT9rSJfNvfDGSmrdNVjCJnSqthjEJAX1cHbcvbYqiVJgEi1DwAoLWtvAgU9Y6YQFJ8vZP8Vxbto89D6rRRLQLeduNP8xxeNIS6AegdKUztrlLTafWoZVr7dd5Gvc17O5r/ayo9WWmPLLL7z/gwC+1J7/BTxHuOm1E45ATtR92lgbM+bx7Hc7oRj4PAMmV+d9LiSKCGNdYL6gnMVlCKO3LNfgbS+cL5l6QC7efevCan4KmxBiA8FrVJqpo8KCUutRBhhl/CEMWgDnUrwE1YEKU9cyfXxOsmLDguM4KCWXaNqcCyoX/hUnuHoWz858bZQCvqYuimg+OwRRLqJqcgAmU09N0G7jQhPLzn5MmZ2JfeAST+I8N8QUO7coLNhTYF5OQNKgglF9jBuu6BoHusahP4lslWQfojB5a6KBu2eoYFg1+HJSK8AFI1LaR7+4aakQy7Dy+6T3xwD5DjOCWG13c/3IvNnXDWbv/37R9k7NkPkkbSm88pXBV4pgrIImfZP56E5rF4zO0VcnRi5uxdXFvlqFEVSz8aJOTDQtptp68TXuhXA93r6vUYebGE002spIDbSmDQ5aQOyarS16bvHnC8s30qdFJj2n+DRa/vWW6Y0saJZr3bhjZccODhu5EWPpfVec5exbHTbKA6wlGUxL3W90teZMxQlEjR8fUyfXwAyJ8U1uun+GMB3kDEKtWBUpLPyVgsgRAO+FLXhSIFThAjBhVi2UuLd7c9212V3Qy7V5fz0mijv7Mxq1Og5+zO7WQQjjeb7VuVY18BdtwXf6mrbXUDh6QKZCdGaozo2mdNEYHWbiGmOWL6WwXhq8bGmJcsqsmboPTGExFMLsvM8qzDyAsO/iXkj6b2rwRs0k1+y6CRoDdnNJSUTyVQqpUOy8hlDUx/Pm2uPe1+lECy4YjxtHVpAWFWOvJw+CYA2tNAHPKsw3A56nfxdAgeCwZq5QwnUqkL+Og2tABAlQdtV+tMiWBDHFXpM9nx8JC4vNi+Y+elmCQWqqr9zRXDCWLJ0aAe6FWOQmqyHG/qxPOoZVMPr9c8hUsDmZ/9UFpM9X11C7IDaLc/CZ3Web+/fZ5DVWHV874Zg+R11I7o+qAmlyzk+Bl4zmqUN/wVHWMBXVHNHGMALUVhajLYA2TqnhSabkebCimmx1Z+4iIGrYBKHt+XFq3eioTWIa26zNavBHU+86iEVN7jYweDUs21UspM7KnRh1VsqxXNMOE9Yd9eOkZBDs1RN1XDTgpLVyPAo5mDSHmI3JRjJY06DFtqYgArVg9bkMFg8nifkKDeAuniNuBbB2fttaHdIZdQCEmb9als3eokitLgXyvi86HwZWI5RoppkfjHF7JY0qT4EcYpzaVQjGkxxcL7Tjze4Zvx/TPKYWgtGp7vbzuIuyoZ9kPXcv0Cx0/dB9f6Eolso9p/v1+yH4eVvaayccATfBqunpBBMllc7a7GO0jAkTPsHPJ15siWNxCQRUslpuapUBZ/InXTBdIgfaMYBICNCeiKD6f0btlwha0993eL62c1R2OKWXX3PnddoQ4pw7DcqxcLWCnwiDWYWcF3Ji16CYtMzoLnMnNDVyMhDbSATTJhIa78UgWAqKwHBG9ouP4QyxqfyMjRB9MG9ywQmar5ja+Twp43O2idSUQnJAuQlG2uboOiVvp/stnRg456zXluFJQJ7PLwohvqd883x1nx9DUtz6lSX36YVjv/RgyYPP8RU384sQzHhSsgY3k89qiFThWLM1kCbIkBRAAwCE0Oj2XXTvv8x0tdReLplKLkJH2dUrr9+k9RaS1gGAZTbNXXAqmYXnyLa45kGMzWAdjn3TeKUKLjYmac148XETDQQAwDihcccC1ZAaExYhrI0xBmIRLm0o7ZfDY5AECY6/1OvsgYdUIara2t70Ct9bEeLph1M/5JB2cYydvNejypG+11Nz9DEeerI8ixQ/7yT0lSxi2IzzsVrpZBr8adK+g/aNEgVxqRCcb/KeF1Wv/2y+hf8y/ZaCLKnRy1zZH8ej9hNiAtgFxc5OeS/twef4ClsSlCICKq4VsqWG7c2VyrozhJU3sTqvTfi46bg3iydha1qaHleZYnoELdbUHM1EXYzlpfaltmpe7VMWL7VZP80JH348omATH9JwlBVeUsCb+8iaA5wZaqqWTBuhDuKGQ38L1AYet1VhK6xapNftVsyf4NA2LNytnvQp6Pq9Rreb1mM0K6OgmpXj/6rWtme19rQ3HX8C8TLdFyLPl9ZrXLljYa2+d6BrrOMaa38S7DWDG4gT3oIdjEvhUCgasIBw8hsQ31HITpawTVzjGvfchVgtmDYB+ekctVvz40lw5iP2TbFPELTqAsi+O4ysFSYgv4aqyXov9gTIL9oeNMdX2Oq9G/CCRcPMzNQm9vXjqmZwdjwx/BqAYVpH+hlzEdWopguiTRZ0LEGGuocZuZbhpvNtkcC9gMxgwgiNOEgMaBS8nqTGgtSSe1k4HilnZLChAm1inEiZhlRIAswKQF7ppAuJgdG2M/+elwP1WiaVICF4AqVrGuI4aRkFpDlfAeOzHzSp+/V7LY9pWmIIshIZ97402ZTeq592GigFbOi25lyhNRLtx8nMpJFYRBtD8vQ9uiwdJh/fhc3Y6duElLKNSOfA5Ap4in8wtejLgajKlp5WzO1upGdt8hqrjq+dcERoY3uhlRplNcsm2IYtpIbUMAUEZsEmbuo40DdZm10ICay+jPmPuiy4Hoco0VmDJy4QF2d9JszCzOEoNHusNV2N0ZzYltMMZNP0DnQy3KAW2UraKjYmIMtqKYuHyzn3UBh3DZDDbbwvkgTC63IITbhRP4u6BlchtoDMTNflgqUnCJ0sWESQiYWojVOSuO4yZeaxMlwgdYwi6K74hIWV+GHdnmDp14Y93BEuEBuJiLOaFyC7uwhMi3XfaQpqCa0xGLR3jbmDqUWkvI7Z0ywEPz7MFdHEOC7NpRJWQ/Vd6+QvYzPf75oxo9/J670pm+lFmsgrSR98ae21E44ap94vvoGZmkoxc2y5KzkZdPKQZNrWsAmy2OuqoVXzFUjflBd176LwFo92n0YLs5+gqXpCpEW8SCCEEJLsmD9QsjybAG4Y6LZw62QneAVC4wYsQQYPRhFo0qYC5jQtkBT43sI3a3+VOVrPPwJ83eg84BQAa5pZgxxc7VlF8RsTfh4AusQkU5v3z48ZxyEXkAOeD9TI/KSGSfVMk8ppWLVasg1s2tjgqXaj9ElKvwukaxd5CM3PN2mHHVVhVgXcU5qeV0pAL4813Yfd8WPszFc9HdN9zrs57mN9X208aI6vss3+E9cWXedLZ7OKyKoN+KMGMxxOkkDswZTgZvc3XaDBcsHof5tVo9sGT8KRBBAmo+N3sPgwpxBC+Ikt6uznLucW6ZusDDJpeg4EiLl8T0Cx6Ov1Vz/ouYBUHB15cMIEkS9OJWlQjXeUfkcJh51G5FjBM+LcSjNnQv3mO+6Cez4OoFaAX6e7Q1y7DbPchW3Bw+p7PTgix+RCMaEm54KjXtdtyp8LUs1i0s0IMrsP9ppcno0MxnM3HIzO6cv+Pb/3vk4GATMk/TKN2X00wYPP8ZU2xsBhPInXNVI8JIxR9UESaxlKE3BeUgFIQcAYGlAhp8mazWJvrpl24QlTduwLupCm1pW6Iv7bzmQBA7FMCsEBG4SARoQmHQFWnlabZWzvfJhVY/Q/7WA69j0wBcMDxvXsXA1VGERpAWItpOVuhsDXVRO9Q8CKsyzaqJ+jUn4JNfQ2sxB5c41oLxcFLqAFfYpF0ITVVGZwpQVr5ZqcuGEZx/RPTicQ0OhgkM6JISAqNVZ2vkV3O7jVASvuIMaGTiKaphjuDYqNjSzFU/kizxmC6r3V8dYgFctcAKuXWurTvLDxb64cIP3cAwSWJBWO+WNjFS4D2QpRxj1Kswcozytubs5gxqKBcqJcDLz4nlxSC0UIohXrNShD7f/f3pcH25aV9f2+tfY59/XAIGkgIJpuFUUCoRk6GMd2qlKiwYnQxHS0HBItrDiUpRJThpiyApaJVgmWMahpBWeJUJTBRKGVREFBaAGJirQxCBEhGpum371n7/Xlj29Y31pnn/vu63ffHZr9vXp1z7DP3muvvfdvfePvm61gsONY3fQU0n8kwj03TP1NEVOaSUoLZT+kr6O2iK3Xdl5x/EcRi8BKUnZoJ9DUos9oeBDTvITmVPWBjKxFrVlb91lN6shIk8rkYNeW19WAgH0m70WbFDAK6Sb6m3gOyfzHwX3g3RlR3QqR0TzOdSoTkMwCmbYA0sRru5sa75C+UzZNRD1qxqY99lkQzfyjzkWsI/dFljpwDPd+nQttzBZuSANI23z2t8HFsYsk4/6JNKI7r3LuwJHAWE37EGAJpVQ0YEoZ4KHeABwSj0EhwlgfAuYE0OBaJIAGIMWUrjmFoqFWYEwAZHlW8twMb7oUE5MdHI2nUP1AVnkTH/g5n499KyDX8ln694FlyM+5007M5K6/S/5XXBFVUwVaKqsmHSUAO4G9QmRrAQIpXZb5FKM/slaoREBgaFRW/Z6RgdySpr0CBrLQ1M56mmLj15lcg+VklSNxfitA+nXx8dW66CkNvkDY0Q2c4zFd2+w03FWYE9esYS6g3OzfqmoigMYcWsvX9evENSBmrYC3zkXvt6JEJkm12+rysL/HG0GZ4X85N3LuwBFAowEkRSjx2xUIMVbbsHzWId0FHHZJXGm9O2Ggr2JLsUjAAO1nTcb8yDUhPGiAAEKazrb2GI87R9ZqydNOmxoeRp4Bzu1zOrwqo/992/8m7l/TfiJQ9qQfPh4/gfYcu3HL54ytvjV2DE1Qt4Wp6kwtWDdjAIFTblV8r4Mvah6za6X93DElByQjKvGFygJVKTVM4i2gq8/YyFFCZLuk7GAZXUTxGlSN3c61JYfYCsTo6zJzf9dFSxmC9Nwsl/I4NUdmYJoWzfEEhTvtg2skD/VvrHaIfy/rSNxpZiyVCFFiXmVJqWo36m+xYF1SgLSk6TRj4tqD6f+5fRjcea+O/RptrGZpbzbtnsWjcfZFQLT3MRDj87BDRYgA2HzegXik9fd9gmWLYO5ZMy4DSAGDWjLa5FbqcYpu3PqQTaOMgaLtlJbGadBR29kYLTUsBtAI1Lg0zKcX05MEnCvDTp2bdmHcBYomfcVVnL+m6kefj3huBqBjWnvu6HHKQjxxiiIPAbljmammwvRSOftqWwAvx+pKr/w3AagiFZQFPQZUrdDMbUnvIelr7D2ahUo/pwnrNGJQ0gJr7GT5mrKfjkYtUHEBkN+yRBpB0BLA4O8KY/bzmNGegRiUKQ04RQ1KtMx5Jh8/1oxPz8zlWA88Nzag5nBKz5SNJ1b3ydtyzYSFKAEoBowxiGL/WVwvDpDdveAzYJHwfpGJ9dFsRA9Jkv0DOFo6mOWeSv9xAB40KxjGi05InJTv0bg1S1oBYBRl8OGsYBhYgdz5EssDQ7R7wEwFDMSf3i9MpvGaqT7JelPP/ziZwM8vNp5HcKRmde9NYzd1ws3bS+ur2zZDdwV14vekoBjzBZkIE5tfSUsaw8opFFeTA+MKG2SMAdjq+Ky6pa/JJWgPGgKMM9FGelgi72GVGnMah/3tzcxWj9wtPdDYg2jAD8C1oAQGeNS0oxjZNpALaTgoTVBk9lxntNgIhlHMnOxdErEthH3WeIa7MtP2+J2Jb77YMiGVDdK08e0M5POkj2ICSqn9YFDjdvKbQ+7N6LLRs6vnP7fwN+WDdR6Oi88RjKVC5qSFu4cjmm2erqLpJp6E2wFA/M2cGdoX6TffBWC0cjnRIIQEA0nBkRmkKgsRY0ij1CfTKEwxgSBVKkUKhGM6mlMEJyBlMWfN8d4GYKZmfPpilohgl/iDHKtk7J/PoYxxThg1kBLnOJqJZpbGefdWtLwN4hEY/ThqWnuwxTXXWN1j2qb9dveC2pv+c/7bfkmIxBTuDWzKOYu7A8haWPhfcwUYM6kEabhIYMSqppIHq5Ka6PmSwBXLKE1RiOck810DNnZuxhp0nD1k5BjHtqsTlxMDRyL6cgDfrm8/CODrmfku/e42AN8G4CeY+QcO2w+DMOZ18x5oL74lPjNX2irLv/OAQfRT6S2StcrC962mqEUAvXoGtcbZWgJEMB2wqow/IcdvlTYYMGIPFyXHrNQ8xYkGQHunXNa8hgcgBhXqvM8HfLb2E3rvRN5D1x6JQPqwNj1sTGuOwNhoYIEBSYHRSFnjGAmMQf1mHCjdfNEwDTRlTHntqS0W5ZXlg5qIcU9YYVFZfx8A0PM8O1CMkWGTWMOdqHhTLGOJt1LDpgSyBGD0gEwBmEBMoDL5kjNQQtFF17kbaZB8ShBGquWh0m9dcgFsgezH0QfsfO60qRpQe8jYfXtcslTIHE3uBvAZzPyXRPT5AH4EwNP1u9sA3ALgZUR0PTN/8LAd9WkftaysXeFrsKQSB3jSNElIwR4qK/HK0YykGvwAVyC2hyKFUj5Lj7EHW24+udHMEb7CRsgQytjUDwOEkiVqWchSVcxoZoDQlBgakJuWbJ/rhIB3OOd7iSa1/w2lctD5SQASS4S8KLnHYRIXrPpZLe+s/jMJUCWuYDW7r5CIzoHJJ/JUJtO4OPwyVH6I2TifoTBnQcyNxebJkugH6yutNe62+FaAnu9lVFMXktyHXfWQl1SGxP6i1UmFEyKBSTTv7XrW6pzt1g2FkhNuFDKSk/Y+mmvAdX+EmVGWaPWlhZl/M7x9PYDHhPfuNguv5yXkxplWEm/unnq/v1nsvZGmRkp+0Lh1ODGUhS/RAMOqDDJGrPigaQbFIGQlmJXcwao5DizsMEafZUDkZqFqvEPKyhpeTeh4TgPGSuQa8gttDnzOO4b0+HnD/oMSHqZJU01U+2o6Eco8xEZRdm6V2bxqZgAcvOzaxGsEiNlVYjDECFvJemZXGjBrOXCQLijd3OAgscIGIHhtdyqTt6oFJMfUAiBjXoPYtKjOxJ7xYct5tSWdhOLs4rmMWE37W2AYtXG9gO5jdJdA0gT7VMlsbe4zj7B+4VKGqgsUsydR+ZxR9T0TJO90mPYb68QCTDRoqWliv5YGiNEPeRyyJIFfvnw1gP8S3r8cwBsBvJSZ7znqTqw6NPpOTPym7K5z9UWJs7tqkjt8j7Ck6QwjJLVmTYmK33xN1U4BSKOcRNXkzWXTmNP+IGmkl0jMQo9Cg0EafGnGE1wFMfHaGG6iFmm/qXPWakfz5jb72GK+YQq/A1m5mj1Mpr23x3FzDdvACKjmGMYc8/RipYmVz02ptgaIvVIKZTgRrWlLzEg8wlTUwgykLHXhqVKfcdeuob8P6pwKFNs1cDo0Hr3jYL9I2bUBEQqk9WxxX6mAIkgY22tALfiJ1U1BPotCqNJr8I3v0zTYMiGV0RmDiAiUinBqkrHTCyA3hQHHyNCzpPJchhDRZ0LA8VPtM2a+A8AdR9qBgltJtWGR0rY2GlZk5ZkjCaj5iGpWYz766GwtQad1YLTgT9BIzWdWqyBq/p33aQkPL1A1N/EpTU5IYea4bBPMnuBXa/qihIoSpqoZ+tS5hr2dd2j7ruZ1zCsU/5kkTVXWH5AFkLa1DQPCmDzdbxcZqhtQj/uJ/j/ShmiBrNjAsTXLdX9lQprG6gdNSjiSpI5+i0R2S4tsMxiaa4ASFjsBSbs3jc+xYREiXahZAL9qjaTpPLUj5NxYfHEizN/PngplVkBB0v7ZTqemC0SmDUoq0nb4KhBO+Dnw4nPcKUT0XABfq2+fAeAGAC8B8PnajPuo+/lJAF8CAA99yIMdiJjIe/VGR7LdJEm1jqxlexVUwr7jiqsR7q3j6wPsjnj1MZrTu/p1BEG96gLskdvq/1Ewi3XGSF41ISv5gT801Y/UkiHYa5Poh41S/X/koBhBKurbu0zyeD5VS82uuRuLdvUlBjeHg2Rb0hZB0VhrjNt6C9TVlRLbDvg1B20F0ogL0rQRYBgPBByIQCmD80q00VzH4mWCVBeP/vrbtQcqYcNQNsjTgYDkeLGGZolQaACsJS4IRYOIMTBUAjhuaZoIixXLksAsLYBtwW5qsNWvnssG6/FDGKYDDJsPyeIQwDElqZtnys7VSVxqNF0X7bvvvhtEdG+Yhpcz8+2zN9khco4Vx6sLjsz8YgAvBgAi+miI+Xw7M//hZe7ndgC3A8CTnvB4jpn8tQ+M0IYBasKqJjFqs3ihDBMtM5oQsr2WAO4ot4o3LlCjgVGDM2CMnIjuS+yc8ruqSQTwWQMzGTGpeitQEsoft6o6mrSUbVBsksopBLV40t/ZA7wjgBGSpj1hPWiGbSMpA8c6RgNGAK6BN61Tu3SireMHI9Mo4vp5hPodJUo81mtLqXliY7rRrn7jzb7jTHZ8jqb9l5TVf1z3Z5qhB0UMkPuxwzy3dWGVcyrufvF57F4TpBJnmA6QpgMkXRhMc2TVlNO0AafWcsm2iOj2N910Ez7wgQ9cd8kJOUSYGdM5Zrs9SbP6uwD8DQA/RPIwj8z8tPuzo94EY0j1SuzxLK3ahRJMzDFlm+H5B36X9MAIBEd7KGsDKmhE9hT5Qaj9dV9eB5i+Bdy8brWJCMK23eQ+uaiB2MO+CxRrHiUqOYP/np1Bx1agCIa9aW7AOHFujlOjqTOTatNivzDuTLS8gvenztfBFQXgIsDI4i8EpwZwYgVM7M7Y7CvOdzP3LXDFe0EAs+6rJCsRTM0x3eUTztevjoNhB5BAw9ZuYlZJnkSLTdOINB4I2LmbRfdTLI+SXWtM4wFo2jhAHpcsSeBHEGb+GgBfcwx7qjcjcdtatVQzNBODqXhOGCDMJRKH4eamq5rejF+sezgoRIiboAokF3JKK4xp5b42M9cbMFRNo+5XtAw5L0JDBAsD45ZSqrLNVDA209AjxF2Srxw6aI0ABnEp+m8TVyKEHsA919D+csKo5u2GB9fiYp5cz0cpGmM1pweaJCG+J/BtrlFyUlrTNGNbKjflI+jaXLkf0CjHxNc3pcGv1YgVRl41FTt2rXvuS70Ddb6EkJbVfDZQ8fvJI9BZ7gkDYqr+ctutEZGQ3AlONxfJReoiWQMu9l2aDrQCZ0I6uA80bZA2B3UxGFZyKEqwXMvEo2uK+eK9wLQBxg1oc4DjkgUcT0kaH1nQWkDwwjrzdxVLDDfws8BFB4Zzx6iOeKt4qJUQvl3QCIo2JxUfUa9hBM3GfsupfYAvdd7Unrcdv9EW2aHcwaOfL3MZKAxIbh2Fc1ZNe3tO2kWEg3nrfryjlF/awtHRtslctVqaA0QXNIvXJ/b6duvAghcWAEkZJQ2aGiTAOPHgbgHZJ3tQz8cRTsfmuVCSTohcQDQgJXhk3OeIqL03nJg5Ifo2/RyJQYFP08AxaouWBmaR6GgW07RBGvcFqNWniDgXc9eDi2w7bkCjAOSxCC+11Scs1a9n0jJRtaBVt9EqF0uxsccq+gcjeKLzL4VE8qjVRKf6mKRyY8PrsI8NjBoKMICcmoZMRAWT9WHmVkPRnbhGydSbu9V31QOj83PP5K61mlBCcUaamvfpDyvaqpl+H7KdXgjVRC1VJG7bEONaywXzOXZ+RhnLvPsjzlNtq2v5qLlJk+G8AqcBPKwxDWtMwwXsr6/HJu1hpBX2y563u7B9a9hHQVIDGBzSnmiQtgpJXDVF8yebnjKa01g05zUC46TEFVPQsK0vj/nTCdq6QRcOhpKrYPT5tDptKhPSZh9URtA0gjb79aFIGZwzyuoCOA/gvMI0SHBIovkbsEXzZULB5ZiSwLFojicuc0AGtMGThG1TyJJlOZS5Vc1rx6qqwLiV0Bv3qze/dyZEpfVq2XC4AdYYrTY/FYG2tEgGBT8gfLy7tN6aK6iVNgpYW9uE8wO2tT0GOVjE9BHLt/PfEyOxsFDLNZjPqzQQrdA9/+DY9YmlkP15Rq0VjHptda5EQ8wgDUJMwxolrzHlNca0xkhiSo88eP9y0lSb2HdHjlPrlQAJAiYqmNLg3A4pTWIplMkXhiaVp5NYLUTQlgayJzCzz70t4k46gryVyuP3Zpkan6oBI+cVeFij5AElrzxyTga0zOCcQcMK6BapKxNe8hxPWtyE5G3NBAxvZO5d2ux3BgUkJiSHz6M0GpEBYwC2CmqdyaTmkmlr0sxI9zkTsa5gVyOePdb5gxUi9PHY7bg1dxNBg4OWRM6Av5/fDODHbXa994fXa9j1t7q5XJ9a6ubpO13O4Jw/L4KvzcNhgbRomAPkJjRn6Y9twDjlCowbHtRnSq4ZErbr02X/LUGwa+a6iEk7CGDKkpYVyTEOG7P97edAX1SQpBzmIoNnkrYlv5JFCySAh1XVFld7osXmlXMTZNqAiyShp9UF39/uEV+mMJZo9UmKmK/qK+oijAkApdByskukZiRMapUW2n4ot83pUlN2gjkdE5MnNZsmDO7Ut3pqAJjzkUnksDbGIiQkHlGKlLkVnpCKmez2mx15jDqWzGMlEbAIdkhPaTStILPAuJVgzL5AAKqpGFkERqlO2VGPGwlbbV9G1lA7FpbmHL3JWUd+W4KmH5wIdV7VvzylQVwXeQ3hNCQcrK/DmPewSXu4yBewKStsSsZYBl1S6ti2zr1bQHrXjbs2koFcBSsTb5gFKUW0RhbzwNgm6VsTMuEqJU0LWiGVEVL6twEN4qphZpCazWV1ASUPmPIeDvau1wCUaM4AvMJnKBuUtEKaDpDHA6RNbWB3JbKY1ScsDInGWpQ6+tNan1bLtWi/Vd5kf99rRr3QjJ/Rfms5azYeA8bm96hma1yTOeasqZ+KqEj0MLFngrgp14Fj87B60nD9zkDOF4ZAynEYQHKn7fSa3fa5sWun9fM6T65ZRe0RMRBTxyfHD8BA/fzB92GmrzUtc5+m5rMaYKXENQhjvYZKLRpwAmNqsxyrjzQESnSsXgywFVWfF/cjMm8tlrv8uO2cBbcB1bpzy1tkFPWtarsHdRmZtjjlNTb5gvvEhaw3IWFAziuMSbIv8nSAkg+QhjWORXgBxxMWqrW10Ju7CzhYWVovEyeppjhEs5MjBA2peegrkFYS1+x/e2DsxxBThqQVKMEObz5H9z+atkZt29S6szbFpAXL2sDJxiygsw2U23RnQBNFRdnaf981MIJX1NRtvzIXQcNvmskXP3bNnaycgomsvLPuUxLG5ddZ50TM+jjf1KTTRJ9wBEXTOP1KUz1XB3INGtm59oG59m8HdoFGLmqhPSimmc9iD/ZaNR+S1ikjJXV7DnYP6TVOGdNwQVKW8hqbvOeR+Y0GhAgDEgoGjKAVI+eNV/0cjyzdB09UChLuK9f4DW5mEVB9jaZZtCa13GgjZ9c2hIG6AxaURttCBC+V6rus0ccpaDzG2uNmY8hNLCmD84AyASkpeKj/kVV7NOLTkiqgRFNZHjiNuHc5ibsfsOyAHoHSgYCF7sv9qdRqmX0liQGY6VtRw4pkqwI2PVONLT6BSgvVZzuhsu1YO4iBRs+/TDSpOV/bLxh1mDCr236lk18sD9xqHWHjCr7QmJSejZYsdDSUsrvdGmPMTJD7AeBYzaJMSzlo6HMdIX3+WeffFhGdrymvUXgCMpBK1fasGmeT98SUphUu8gWPym9K23qDiHExXZC802FCHrbZqe6vXG3NkYgeBuBnAdwI4E8A/ENm/ssd22YIwc2fMfMXXGrf5w4cmYHNjFkkD+LuC9FoPmFFtm8B0/QkrcUo+8XkUjDpgWMmKAR05v2WBis3N1IGF4vIpuBniw9cr3nWyHqvocQyxeY7mguwRO24Rs4bE1Hb15r7gO18LdGlq6c241ke5KrpOaDF/tldAn4MNjGoyTlMHlUPFTQMz1uNkWUDsbk5nxNPCdrhVXHAZ/Z6amO6aQsA0MyVhbAjuW4tUc2ujTKn9jh6roWBWHrY3k3hv6VeASiJ/L601KFN3tO+Nzn8r89N5Bq1uR6pIGE1PyGXKQycRLT6OwD8GjO/gIi+Q99/+45tvxHAOwA8+Cg7PnfgWDjh3nEP1g8aEDOaiJE1BSKFoMxhxJ3bHQplh5kIbA70NCBpsvh2Tbbun+UGt5szsvbEahp7eKY0iJnpvIpGnaWA4+YzbR2vB0YD75qa1GpqW0wzESgDIMo4udHmGOya2UgrB8UNrxqTFBCwsgdt4LExRa35WW96ejWPtQPg1GilMkiZ81xGDOVAu/jFSpTsKTwyY+x8lD3Bg9wrog1yIu/vasn61kJ3zg8owCh0c8N4ET13Y6FBriclYYwKtemSJE6+H6mAaYNYzTE102AKGqSRlRXmxv8cLaM+pWzD66aCyRrAjaUCpMmmCM+kzcOxCAPTeNWj1c8EcKu+vgPAnZgBRyJ6DIC/D+B7AHzLUXZ87sCRAUwloYQLG2sNmuoLsvqQrgzONB5qTSsPfkBXZIYTjEqaSqv1mB7leW0GBhaJZW4j3YhpKbJ1EhrsEKltKyu2gidOFrADIIGtyPb8fqrGGKnUTFt15h1LVQrug1hH7ccwgLGHV4O2SV0TRqMVSTqMU9POwT1yXYkjkZHXKj2Y+cSI3F3Q04/Fc2/O2+4NFCUnUc3Tkt2bee1ZjPo8qxjBFk3QI9szFU+mPZq7JQJ6PSYFhu4wNyGPs/pnqzXj80AJEyIgGjGL0sb1uax+GEIhBrg99pXJkfMcbyCiN4b3P8LMP3LEgzySmd8LAMz8XiJ6xI7tfgDSiuVBR9zvOQRHJkyl1RTiPWugGCnst24+S7KFMkEzEB92y1EkhTndMSozyjZDSjVz0Djse/PLdiZJ3dsmOZum01Bo0c6HqT1+3tqXfx9AIiazbzML6R68jlqDGZYTqOAYiSViAIzAmOyamK9sNj8xBniCL7QPrhmQsWiMuWyQp/36PQ3glJEMsBugrIGLKDmUklpKTeSWnAUjC6YdVoJHuGQpqN0TW0QkiO2Cs7sm+tasskjH4FpNNHfY59RwXk4zwCiLgRw5SoE0hzsOEXf6kTTH9x9GQkNEvwrgb8589Z1H2TkRfQGA9zHzm4jo1qP8BjiP4AhgDE2Ih2SmsHT3W6UJe7QvznkW+iZ7+O0GstxEoaDXFI+mtla0nYkSIhO3kQEkMHI5aMzQI43diSLCtM88Q62vL/qsdBwd+PWaYVt7HfxaxvqigNi3RDAz1EgZJhqwjwsYecBBWau/qn3QzG/HVCB0cFwrdAgokD7OZqZT0FTi2CUQExYjm2/oIjcdYBj3kad95M2+a0wpZYASpmEtC0qqvWZKyk1AxuYuY6zli1zadDCd22rarzFB+B8zjchJrl0uo7RYZXbLxHIq43V0HzPM36q+1yKvU2mTuZkyMABJTeORho4CLlgW3OVIkkT6jePUfPPR/QHIswIwLN7Xg+ZxynGQ3TLz5+z6joj+nIgepVrjowC8b2azTwHwD4joGQAuAHgwEb2Umf/xYcc9d+AIVCc9oFqLRhqz+pOs4VEuG6ymfbRaitXQZrXqNOrb1TVHMS3Cj6mMKAB70/lm+/jgh+qFOoZt8Js97g5tzwF5ByjOMX07sJoZDeU77JigxScqwDjSCpsiJXb+oHHrpEhNeWQ7X9WZEMxTqkzljWbWazb2SzJznGuqSumCIUndAAha1I45tmvdt8eIoFz9nZL+VUhsCE5JmIGyBKsGuxZlew7j6755WKQXkwBTdZ5PaYVcNuAkvvPMxa0b3+ch94zPf5eq5Off5GvaGHdbJFcqJxCQeSWArwDwAv37ipkxPA/A8wBANcdvvRQwAucUHE0MGDMZm/SEQYFxKAcYpgPp7RE0LSarVGCnwGKu5lXdd+9/UoD01B8BxjwdzGoPTKnxiYlz3voQBxOQWnYWoAZUmqoUN33DTRzMtx4Ye0DwfRjoOPOzakqBczDSeB2UNUZOOJiG+X2mWo3UlwemZt5Fc5Q5jsBYz997V6Puw87bgDG+lp3rouakFzMuh7jIWHWKRdR58OvauFbMtFaXxoiV3wMpaVBFQTtRaloR+HmFYFFLPFLqIhUWKEZCBjDxWqLjKLAywYlS47ro7wn0fuYZAI3M6zrUWdlV8365wswoVz8g8wIAP0dEXw3gTwE8CwCI6NEAXsLMz7i/Oz534EgwTVH+rlJBThPWacQ6bbCmfazH+8QEKxvhuXOn9eBmF/IauWww5fpwxPtp3q+XVPNhT+nI48WGbdmpsYikgiHvSSIyzNyrfYPNf9eDo7NiU0ghiT23fTwGLmF8AQLjedSWDmKiGhegzItUkEhp2Qr3luux4RUOpgEfGtco6ucF5IFa5QmZ4AuSaew1N9B0xtIcw8bctLGFAVaryRGxlxj2jEBSfnn0h676iFtwYaqpQAlyjSaWgIaBY1EXS6GERAMyJtXq9rCm7O0vUtk0UXjWZmA98bEc+yJygQL75DyMokGPGCiD8horGkBpjYIC4uoWEFDkbWuiWQTCnRC5IkMOZ18G6fs6RtO6HBuJxbxou5XPnvn8PZDWLP3nd0Ii2peUcweOoGBKwzRGNakxysNkeWjeSN2aHrXU9XWX9Uaqn7VJ39D8vRh4AVCTmp1UVR+DlCWpWytfEMAhMupEItp47C2zeCYNJn4XH4wtMxL1QXITVT9zglyStqcjVtjwCvuTgOPBlCUApoGXIVXtNQdXxpBGzwyIBLH23wHbckZ1nBbBjaauaXUW8e+B0VKg5CDt9fD5AEn6zI7gmfxN6hcN/XGc0Ui31ddmdhNYfJAE6RjICSgbkNPJwTVGXwR1IfQrnlZyTp7KZYn8Et1NPEl9vaZAgYbG9I0Oi1jr35cnxrSkFIojLEgZt+210mMRxlI+eNJiwCj104EXkKzr2tQ0DKoRPaOyWjUrel3VW7PVwEtew7XLiQZQVnBJWQAnpKwwE6iIT6ekCpxx3wCqX6gLCFg1RORSbNNgAGKLeNdmV72Paat151ZteMaUVyhpwEG+Bge8h4vTHu45uAYXx4yDMePiJqEwkBNjNTASETIxVmnCKk24Jl+U/t10UKP0HCOvNWHeQEjGX+cj8YQVDvR6tO0hLGAhfZalPS7nFRpqLgVMaY0gtGElASnkMfYic0xAWglAqi80ljlGsSLGwin0JVohWaoTVd+z5RpuaO1EulZamqigJLEe0jBioANgRG2wxgU0jRggvbrlPi+gNMByYnsyFHBptECLxhsk23FNYxxCBkd/zx+n1sjgBRxPS1pOwvrQsWSFwwhPAX0YvM42uS9wl3M7+p6ASgIAFo0h8YQprzCkLIX+QOPv4lmNRvxizmqjQSAinn2A7Xzq31ZT8POi1pzmMFb3ryL4/YhQ+0xnJyPYaOBlfxJg3B8JB6M9XNW5bg+a+Hg3GCCBr2j+FsoOPq4tB9+epUTFKLzPW6dJ2+dQc9Wqiprv4pyphs02v502JONotW2TsuN+2KqT98VI5jSmC01pQEFWvsjs3RLteqck90FJA0qZBPQ1uZ/Uf21WBxnwMQMUeEWjSW0LH+XuLmB3FV3KOgLa5+m4ZOFzPGExrRHYXulqPpr2DrYUcY0EluAHMgqsuRYC8rdyMwLiFAfgvWISF5QkpVYJaKPdc8nHuuIbfZXoAVqdTKLh9Npe8/cQ/43d+rGsT7QK3bemLgFAogzDYk/bgQDkWAZspoSxEMaJ0KepmbY+pCKpU3yAoRxgNe0jVq4kTAISnF2zlR1IVNlTWszsU2AVNu+Z89MFLRkbTammqGxQAzKebF0Ayfrqd6h8h3H/PA/K8T4zU9SKJm3eY1tXABix8iTsibNXpMjcFyQaxDynASnZ/RDmJFgJ7hKJwapGGahcnbJdqeNtktS376td73cpDJctDJRjYhU/DTl34Pjga6iWCwbzGrAbVcq3RggIWNleSVKoP9GATd5riA7mqLycsDaUsiVIou+EQW6+VJCGPQyTaTQdm0nnF5S8NsYAqu1XE4vxw1kf2FQDMuHhQPMw1EM4DReHgAJXLcaqVibKyEkyCce0dqAdk+TxHUzKb8gVGGN55pAZq8xY5wkX8gEupH2saR/XHNwjvZvHfQeMoosQwJh08aipMgnsQZBYVihmmDzgrVZvTaqKRsa5JICCq4IZQAnlgOKvLBDTusn77Hyzlu8qmp4xLMVrbmkvwXWDqiFXqMpOxGGguD+tMHLCVLIyjbPmGAKcCHt5T6/vhEE16wj25qLoNbq+hj7ya8bOldF/GhnpJ1jk2+ZC51XP+RM+7qNxHMJglOn4OhmetJw7cASAz3riNfj1t32oWckBXf1VwyBilFQ/A4KDPNTvxpzAWvUR1ucmAZf8JotVE1Gj2SJVgJn6ufrCYlUEJxCZJkONr9FqrufMnN6UtofbNBY5j8pUxCBo8Z88hEZy4AsEBUCQskYqhJTE3zgkxioXrJIw5Awk6VJZ06UkWmuBr9yCB1Gzf+FcVE3NABg8a+o2vJdz4nOphA9c20yIO6HVrvxnjXWQnFWp5nJWcOzTk/pgBgBfZCck1cCTLzZFK7pI8cjne0ZTdfH7q73/zCfdz0kMbLm7BiEQJjtwC2UCeVYB69wR+NiA0Y63+BxPQT7jCdfiN3//Hr9RYwG+gGOIL2pgIEYObZU/KjDqnpoVujFzzYQn6zdSo6m6Y68RZkrIHswxU9TYsAP3X8O+Hdsq6C6t4gbSInViAchRKakAYNLxciLRHmmCk13ow+O0Y7rtkGvr01wEKFdDwSpLEGZFG88lNWBM08b3UVIbXWa0GrqDvaXtHHKd/VrM1JpH+jPrwsKW8xjYdvpE/KYc0K5zuO5iNchvCxFSl+Y1P8bkdedj0b8KjELKDAnalQLOnWdwtrzSZqrev3qwZk62+SMtONPzCRhAq98btW+NXY9jBUY77gKOpyOf/PgH4c1/+P6GAQbQnLoEcJe+4RHqDvR2ASPQAuKaDpCoYFX2vTRx0H7Brca4o67Wgg+T9RyxHsUFnAgxGBFrniVhO4JxTS62ZG2j/d+ULOk3+kACCLmJjIEK9vLG8xIHMo7EgnUSuq+ySlhn8j7giRjXrg6wTiP28gYXcB/W031Ybe7zBvIokywQCaiJ0JpUzoMz+di1kLp3QibhDsw8uvYomm6VbVCsGQnue9RjpwLxSTKhSaEyU50o+JxzAMRUa5FLLNuU0sikZaRiQNd7CkDt3+3gOKg5nbQ/DXSO2dNrot/QzhEkLhNj7x61GZgFzOQ8GQNtxOIoDuWz95ufW0ftlylpHukkEEmMJ3zcR87u48qEr3qe49WUcw2OAPDkj78Bb/2j/yMmQpfU6mZItzr30eGE2gSqFyNvzZbwjEqdlbS+NjrSJUWk1tg2WoElC2Lbdzh77C7J187Fzs3SUSZO4ivU/5tScxMtyMMsOYqcCDnVRaMog7YTdCRgyiMSJQyJzY3nqTsrkr4jldOQt9JqIklDZUqvfrwJZupr5P0ws/kS4hRrSJpCVNys9mkP47FFMmpuvp1DTV0cQVDQZNW21I3SLLyhPpwT5uDAQDEmYUdhGDt88s6JnnvKAyZ9VD27gQoSaYZsl8Hg++SqCbe9fJwADUyEJ37cHKfDlQsvZvXpyxMfKxf3XX/8Tq8EMa3LfV9MGqRUs0IfTjP3EuAtTG0bABhoEsIBTFhP92EoG6w394KmEalskMcahLHKmJJXDUBGoGRU1p2SMsa0RqGMkapm5WP0B4j9fBDIDAplbFBrnzclYzNlbEYJqhS1LgHCxIQhJQxJoqXIo/trhWm7mvWZJuVWlIc9gbFKG6xI8hkzC6+hqUSWLgVK0v5TqfnHtBYCBF5JJVDwOU5gEG8/0PW6SbqPmII7tI9QRkg8gSEaJBUhuxBk14BQ8A/X8s3OZRIAq9g9YxkERQhls0JfCuV8Bj4czHHZhp0HwEBxSOK3lcWoUsyVYY0C6Xc+DhewyXu4SNdiwyuMZWj6aq8oi8afUKunghIQ/ZnGexoB38zrWz7x4fPzeoxyXD2wT0MeEOBoYlT2LXGr3a32YIr2BLKuzhrpjACpIhqVAGPmUXL5yuhd2qhMIGVmgeXOaa9kX8lngDE2ep/S4J0LAblxM0YF8JZ4Iv61bV07MMc/eyvlLc3RHhL5LrgNxCvoPsAVRkwkJmYyM7+P0mreobUkdfp+GuQc7Xz7Ujw7dgB/86/6fvUzRrvNpcTIJ4hZOvElY0cP1UnBXxcDInUeWsvDxlvgt4nPCTRtJibzx/1ZZNoYgJoyS6+mEX/imNeu8W7yHsZkde1CFTeVWn9OSYAw0+jzZelAUROeE6MkO272nVnhJVp9ZuRvPfZxeM8f3OWMzY3maOCYGMVSXTTqLJtIaWEso5JHW6nPPPgwCjBOG9A0gkrtt2F111HiDTvlFQClBKMBUxqw4bWCYw0OgQDwKCktMzd7Q4irZnWUBICJkRNhKhwzipq5MDFqMPkuIdMIYgVvnY+MDpRVA6O08gWg1q5XktwY5IjH89eBiMFGbz7HuaqiduA1G8DGThCWHCKSdrcw0GnN/RgcagJtrkG2i8gEkpktQM6Hs+RkErqIbP5cQNKoiLW3kORLMJIHDw3wmBI2aU9BUSwCC/LY3HmAjQeA5D7xsVA7z+Zp7Kfwkz7xIfNzeozCOB7KstOSEwNHInomgH8DWbxGAN/EzP9dv7sNwtL7E8z8A1dynEd/wpPwl295rQdJqEzqByNMeQ+cB9CKHaA47UkkkKOWUlssDOVAfYwbDON90tf34D4BxzKBJqXcpySlZIBHSt2MU8CwY27Snpub+9Oe58LJXDDWacSQRqyxwVqTzXuqLwGuQc1Vm2OtfR6gvIvUfJcTh9LLNim4pn5Ut4OkwFc2HgZhQsYmX0ChjZ5XavyhJdXzLJSdsd38umb0Zc0bFG2/hNQUMbfNrAZqpH5XWpP8rAS3g6RLcV6B8oRkprnXt3cBHmJkrgS4UucNMFh0Zct3VUilksUni+16bWEnKkgWeCG4v9pY4weMPl8TDSg5YYM9WFrRxSIcmveNe5p3mhwcEzFKTlix7G9ICStsMJDct6zWkMTOs2vorIpAYjoRYNRJWczqI8qvAXglMzMR/R0APwfgcfrdbQBuAfAyIrqemT94JQf6iJs/E/e84VWSPmNRVKtuQUHKawcY0xRkfQ2ECQoOlXUlEFmU0YERXEATwBn1ATWh4F+k5NqiRW+FRFZy4karoIAlbmdMZH1nNHAQchv7oIKZcYWAAUVN7epvig/qLpOqAQy0/bxZNafC0EWFJGKaGUba6iSzO0ozPWfQdUkOmqONKbSUCJpjBMg5WjKE34OTX3vS8rx4HrtMz0Z7JAY4+OnYHDAJzAVFX/dzmVD91ZZH6OxFaIk56lhqSpHkq4olYcBoC52d5pQE5DzCrjXpiNowyQJkSnDWhfuWxz109tyvjiy11UeSDvCuQ6vo2916iYyyo8uDnv4FuPd1P19NrpTd/JMHeUKi3f6Q1h9WKmu2pZBwqf9J0irmbwOqmp76Fy1AMSpbc68Z5CJJ5fXG7yLUZhp24W55IKTlKyCR5tK1lBDNphUD4F1kv4ClO0nJ46T+SQBa/ibfASEyfAQQqj5Mdq14dvtQV+4gaHPfiwGo+kF3JdJvuRbUoTinmZpL2fx14ostngPpFSyaBZEV/GJVzYCxYSuKY4g5t6PeF1Ox9gZCF2eUcYnkmhbNVOiJdEndQxHkE8sYnvrxN8zO79UUnrtG50RO1OdIRF8M4N8CeASkE5jJyyH9ZF/KzPcc1/Gu+7Rn4b5fvUOOnQYxuSgJaYRpI56sEscZtBs1+UgfRiddLSGFZY7EwAIUsal8aJO54QEbpQQbS8I4yQ2eE2OVMiYqmNQkr4S5qNUmQdsAxM9V9KEL7a4xkXX1E7FRxgfUq4h2dGpsU0HYTe1MhKTare04BjyAEPgJJXCuQRrRQmCX2WpKZYsUt5pmI91ndjm40zS9RnmHJF1QiNCU7cl5yGgK6TZRqw4Bjqh9CtdlQexl1Mw7ai285UlanqXlSU6ldY8UiI85MWNiQmZCoWo9xDmTxUdo6Z742NMARkYZz29Ahk6DNYOIPh3Adx3WG6Lb/icBfAkApJSuffKTn3w1h3fZcvfdd+Omm2467WG4LOM5XM7aeICzN6Y3v/nNKKV8KHz0cma+/XL2QUSvBnAUVH4/M3/eZQ3wBOSqgiMRPRfA1+rbZyg7r313N4BbmPn9l7nPe5n5umMc5hXLWRvTMp7D5ayNBzh7Yzpr4zkNOaTy/cqFmV/MzDcz880AriUSW4uIngJgDeADV/P4iyyyyCL3V07S5/ilAP4JEW0A3Afg2XyemTAXWWSRB7ScZLT6hQBeeAy7evkx7OO45ayNaRnP4XLWxgOcvTGdtfGcuJxKQGaRRRZZ5KzLVfU5LrLIIoucV1nAcZFFFllkRs40OBLRBSL6bSK6i4jeTkT/Wj9/NBG9hoheQUTXn/CYPoqIXktE79AxfeNpjomIfoyI3kdEbwufndr86PE/j4j+gIjeSUTfcRJjOuReeT4R/RkRvUX/P0M/XxPRjxPRW/U3t4Z93UpEbySi7z3B8ayI6A4dzzuI6HmnPJ4vD5+9hYgKEd18XOM5F8LaSPws/ofUpF2vr1cA3gDgkwC8AMDfBvCFAL7uhMf0KABP0dcPAvCHAB5/WmMC8OkAngLgbeGz05yfDOCPAXwMJF3rrpOYn0PulecD+NaZ7Z8L4Mf19SMAvAlA0vc/C+AaAP8OwONOaDz/CMDP6OtrAfwJgBtPazzdb58I4F3h/RWP5zz8P9OaI4tYTfZK/zPkASz6/1hqsS9jTO9l5t/V1/cAeAeAjzytMTHzbwD4v93HpzY/AP4ugHcy87uY+QDAzwB45tUe0yH3yi55PIQMBcz8PgB/BeBp+l3S397vsd6P8TCA64hogADPAYC/PsXxRHkOgJ8O7694POdBzjQ4AgARZSJ6C4D3AfhvzPwGAC8C8B8AfB2Al57i2G4E8GTIKnwmxqRymmP5SAD/O7x/t3521ce0414BgG8got9TF8RH6Gd3AXgmEQ1EdBOApwL4KP3uJQB+E6JJvuOExvMLAO4F8F4Afwrg+5jZFr3TGE+UZ6MFx2MZz5mX01Zdj/ofwEMBvBbAE057LDqe6yGm2JecgbHciGBWn/JYngXgJeH97QB+8LTuFQCPhGitCcD3APgx3WYA8P0A3gLgFQB+GcAzT3E8nwLgZRCN7hEA/gDAx5zWeMK2Twfw1tO+r07j/5nXHE2Y+a8A3Ang1AvUiWgF4BcBvIyZP+yTZTt5N6oGBgCPAfCeHdteFYn3CjP/OTNPLNxZ/xFi9oOZR2b+Zpby1mdCAOOPTms8EJ/jq5l5w2Lm/w9UM/80xmNyG1qt8cNGzjQ4EtHDieih+voaAJ8D4H+e8pgIwI8CeAcz//vTHMsZld8B8FgiuomI1pCH65VX+6C77hUielTY7IsBvE23uZaIrtPXnwtgZObfP63xQEzpzyKR6yDBkmO71+/HeEDSxOhZEL/xh52c9R4yjwJwB0mTjATg55j5Vac8pk+BmIpvVf8NAPwLZv7l0xgMEf00gFsB3EBE7wbwr5j5R09jLIBoZET0DQB+BWKu/Rgzv/0EDj17rxDRT2oKCkMiwP9Mt38EgF8hogLgzyDX9DTH82IAPw4BJ4JE0n/vFMcDSCbEu5n5Xcc4jnMjS/ngIossssiMnGmzepFFFlnktGQBx0UWWWSRGVnAcZFFFllkRhZwXGSRRRaZkQUcF1lkkUVmZAHHRRZZZJEZWcDxHAkRPZKIfoqI3kVEbyKi3yLpBX7Yb26kQGd2mcf7SiJ6dHj/EiJ6/BF/eysRXbWcVBIKtF/Q1zcb1dZl7uP5RPStxz+6RR4IsoDjORGtzPklAL/BzB/DzE+FVJ885ioe9isBODgy89ccZxXJlQgzv4eZv0zf3gzgssFxkUUOkwUcz498FoADZv5h+4CZ/xcz/yDgGuLriOh39f8n9zs4bBsi+jaqxK8vIKIvg9T2vkzJTq8hojuJ6Gm6/efpPu4iol876kkQ0XP0OG8joheGzz9IRN+j+3s9ET1SP/9Yff87RPTdRPTBcC5v0xLF7wbwbB3ns3uNULe7UV9/JwkR768C+ISwzccS0atVI38dET3uqOe0yANUTpv5Yvl/tP8A/jmA7z/k+2sBXNDXjwXwRn19I5Sx55BtPh9CQXWtvn+Y/r0TwNPCMe6EAObDIbRkN8Xtu/HcCuBV3WePhtQQPxxSuvoaAF+k3zGAL9TX3wvgX+rrVwF4jr7+OgAfnDmvrwTwonCc5yMQuEJK8m6E0JK9VefhwQDeadtBuB0fq6+fDuA1p33Nl/+n+/+s11YvskOI6MUAPhWiTd4Cobp6kdbJTgA+fuZnu7b5HEgt74cAgCuP4C75JIh5f/cRtze5BcCdzPwXeg4vg9Tv/hKE3NV8lG8C8Ln6+u8B+CJ9/VMAvu+Ix5qTTwPwn+08ieiV+vd6AJ8M4OfFewEA2LuC4yzyAJAFHM+PvB3Al9obZn4uEd0A4I360TcD+HMAT4K4Sy7O7GPXNoSjs0Lfn+3j73bJhpltnxOu7N4c0bqMLoTXc+NOAP6KmW++gmMu8gCTxed4fuQ1AC4Q0deHz64Nrx8C4L0svHy3Qxhxetm1zX8F8FVEdC0AENHD9PN7IH1yevktAJ9BwqAdt7+UvEF/d4OywzwHwK9f4jevR10UbtuxTT/OP4H01QERPQXATfr5bwD4YvWfPgjSzwbM/NcA7iaiZ+lviIiedMRzWuQBKgs4nhNRreqLIOByNxH9NoA7AHy7bvJDAL6CiF4PMZfvndnN7DbM/GoI5+IblYbNghn/CcAPW0AmjOUvAPxTAC8norsgDZfm5LOJ6N32H+L3ex6EhfouAL/LzK+4xKl/E4Bv0fN9FID/N7PNawE83gIyECLih+m5fD2kCRpYev/8LIT9+xcBvC7s48sBfLWez9shfW8W+TCWhbJskTMtqs3ex8xMRLdBgjMLcC1y1WXxOS5y1uWpkCASQToEftXpDmeRDxdZNMdFFllkkRlZfI6LLLLIIjOygOMiiyyyyIws4LjIIossMiMLOC6yyCKLzMgCjossssgiM/L/AR9ntVY4aiP4AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset.plot_residuals_spatial(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the injected and fitted models: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:49.746274Z",
     "iopub.status.busy": "2020-11-21T12:20:49.745670Z",
     "iopub.status.idle": "2020-11-21T12:20:49.748649Z",
     "shell.execute_reply": "2020-11-21T12:20:49.748269Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True model: \n",
      " SkyModel\n",
      "\n",
      "  Name                      : model-simu\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   3.000              \n",
      "    amplitude               :   1.00e-11  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :   0.200  deg         \n",
      "    lat_0                   :   0.100  deg         \n",
      "    sigma                   :   0.300  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "\n",
      " \n",
      "\n",
      " Fitted model: \n",
      " SkyModel\n",
      "\n",
      "  Name                      : model-simu\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   2.999              \n",
      "    amplitude               :   9.98e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :   0.191  deg         \n",
      "    lat_0                   :   0.111  deg         \n",
      "    sigma                   :   0.298  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    \"True model: \\n\",\n",
    "    model_simu,\n",
    "    \"\\n\\n Fitted model: \\n\",\n",
    "    models_fit[\"model-simu\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get the errors on the fitted parameters from the parameter table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-21T12:20:49.755549Z",
     "iopub.status.busy": "2020-11-21T12:20:49.755067Z",
     "iopub.status.idle": "2020-11-21T12:20:49.757197Z",
     "shell.execute_reply": "2020-11-21T12:20:49.757637Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=11</i>\n",
       "<table id=\"table140483088357584\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>index</td><td>2.9985e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>1.990e-02</td></tr>\n",
       "<tr><td>amplitude</td><td>9.9809e-12</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>3.255e-13</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>lon_0</td><td>1.9107e-01</td><td>deg</td><td>nan</td><td>nan</td><td>False</td><td>5.953e-03</td></tr>\n",
       "<tr><td>lat_0</td><td>1.1111e-01</td><td>deg</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td>5.866e-03</td></tr>\n",
       "<tr><td>sigma</td><td>2.9835e-01</td><td>deg</td><td>0.000e+00</td><td>nan</td><td>False</td><td>4.051e-03</td></tr>\n",
       "<tr><td>e</td><td>0.0000e+00</td><td></td><td>0.000e+00</td><td>1.000e+00</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>phi</td><td>0.0000e+00</td><td>deg</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>norm</td><td>1.0000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>tilt</td><td>0.0000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=11>\n",
       "   name     value         unit         min        max    frozen   error  \n",
       "   str9    float64       str14       float64    float64   bool   float64 \n",
       "--------- ---------- -------------- ---------- --------- ------ ---------\n",
       "    index 2.9985e+00                       nan       nan  False 1.990e-02\n",
       "amplitude 9.9809e-12 cm-2 s-1 TeV-1        nan       nan  False 3.255e-13\n",
       "reference 1.0000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    lon_0 1.9107e-01            deg        nan       nan  False 5.953e-03\n",
       "    lat_0 1.1111e-01            deg -9.000e+01 9.000e+01  False 5.866e-03\n",
       "    sigma 2.9835e-01            deg  0.000e+00       nan  False 4.051e-03\n",
       "        e 0.0000e+00                 0.000e+00 1.000e+00   True 0.000e+00\n",
       "      phi 0.0000e+00            deg        nan       nan   True 0.000e+00\n",
       "     norm 1.0000e+00                       nan       nan   True 0.000e+00\n",
       "     tilt 0.0000e+00                       nan       nan   True 0.000e+00\n",
       "reference 1.0000e+00            TeV        nan       nan   True 0.000e+00"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0bc9e16fa177479f95827da04f6d9106": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2720bbd669e24ed6aba128af6a583406": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_65995b3b34b04535b4dbfb539fc5daf5",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 2 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "2f782670a6124317a2aa29f093a24dbb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "5e02de260ae443bdba771a9b9dee6e0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e-01 TeV - 1.67e-01 TeV TeV",
        "1.67e-01 TeV - 2.78e-01 TeV TeV",
        "2.78e-01 TeV - 4.64e-01 TeV TeV",
        "4.64e-01 TeV - 7.74e-01 TeV TeV",
        "7.74e-01 TeV - 1.29e+00 TeV TeV",
        "1.29e+00 TeV - 2.15e+00 TeV TeV",
        "2.15e+00 TeV - 3.59e+00 TeV TeV",
        "3.59e+00 TeV - 5.99e+00 TeV TeV",
        "5.99e+00 TeV - 1.00e+01 TeV TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_effe1d3d62d04a7780782ad2a0a44858",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_e30ddd45462044d2afd5eb285987a0b1"
      }
     },
     "65995b3b34b04535b4dbfb539fc5daf5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9be807bbbc15484f8f0fb9cffd060078": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_bebb2d4bb0df4378841f3df66e34cd95",
       "style": "IPY_MODEL_2f782670a6124317a2aa29f093a24dbb"
      }
     },
     "bebb2d4bb0df4378841f3df66e34cd95": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ce80b3579a1f481cb9490b08a64b26e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5e02de260ae443bdba771a9b9dee6e0a",
        "IPY_MODEL_9be807bbbc15484f8f0fb9cffd060078",
        "IPY_MODEL_2720bbd669e24ed6aba128af6a583406"
       ],
       "layout": "IPY_MODEL_0bc9e16fa177479f95827da04f6d9106"
      }
     },
     "e30ddd45462044d2afd5eb285987a0b1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "effe1d3d62d04a7780782ad2a0a44858": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
