{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/analysis_2.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[analysis_2.ipynb](../_static/notebooks/analysis_2.ipynb) |\n",
    "[analysis_2.py](../_static/notebooks/analysis_2.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 1,
   "metadata": {},
   "source": [
    "# First analysis with gammapy library API\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and intrument response functions (IRF).\n",
    "- Understanding of the data reduction and modeling fitting process as shown in the [first gammapy analysis with the high level interface tutorial](analysis_1.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis this time using the lower level classes and functions\n",
    "the library.\n",
    "This allows to understand what happens during two main gammapy analysis steps, data reduction and modeling/fitting. \n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula using the lower level gammapy API.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "Here, we have to interact with the data archive (with the `~gammapy.data.DataStore`) to retrieve a list of selected observations (`~gammapy.data.Observations`). Then, we define the geometry of the `~gammapy.datasets.MapDataset` object we want to produce and the maker object that reduce an observation\n",
    "to a dataset. \n",
    "\n",
    "We can then proceed with data reduction with a loop over all selected observations to produce datasets in the relevant geometry and stack them together (i.e. sum them all).\n",
    "\n",
    "In practice, we have to:\n",
    "- Create a `~gammapy.data.DataStore` poiting to the relevant data \n",
    "- Apply an observation selection to produce a list of observations, a `~gammapy.data.Observations` object.\n",
    "- Define a geometry of the Map we want to produce, with a sky projection and an energy range.\n",
    "    - Create a `~gammapy.maps.MapAxis` for the energy\n",
    "    - Create a `~gammapy.maps.WcsGeom` for the geometry\n",
    "- Create the necessary makers : \n",
    "    - the map dataset maker : `~gammapy.makers.MapDatasetMaker`\n",
    "    - the background normalization maker, here a `~gammapy.makers.FoVBackgroundMaker`\n",
    "    - and usually the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Apply the makers sequentially to produce the current `~gammapy.datasets.MapDataset`\n",
    "    - Stack it on the target one.\n",
    "- Define the `~gammapy.modeling.models.SkyModel` to apply to the dataset.\n",
    "- Create a `~gammapy.modeling.Fit` object and run it to fit the model parameters\n",
    "- Apply a `~gammapy.estimators.FluxPointsEstimator` to compute flux points for the spectral part of the fit.\n",
    "\n",
    "## Setup\n",
    "First, we setup the analysis by performing required imports.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:43.682456Z",
     "iopub.status.busy": "2020-09-16T14:56:43.681848Z",
     "iopub.status.idle": "2020-09-16T14:56:43.994791Z",
     "shell.execute_reply": "2020-09-16T14:56:43.993856Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:43.999620Z",
     "iopub.status.busy": "2020-09-16T14:56:43.998499Z",
     "iopub.status.idle": "2020-09-16T14:56:44.565507Z",
     "shell.execute_reply": "2020-09-16T14:56:44.566091Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:44.572773Z",
     "iopub.status.busy": "2020-09-16T14:56:44.570929Z",
     "iopub.status.idle": "2020-09-16T14:56:45.216620Z",
     "shell.execute_reply": "2020-09-16T14:56:45.217150Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import MapDataset\n",
    "from gammapy.maps import WcsGeom, MapAxis, Map\n",
    "from gammapy.makers import MapDatasetMaker, SafeMaskMaker, FoVBackgroundMaker\n",
    "from gammapy.modeling.models import (\n",
    "    SkyModel,\n",
    "    PowerLawSpectralModel,\n",
    "    PointSpatialModel,\n",
    ")\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 4,
   "metadata": {},
   "source": [
    "## Defining the datastore and selecting observations\n",
    "\n",
    "We first use the `~gammapy.data.DataStore` object to access the observations we want to analyse. Here the H.E.S.S. DL3 DR1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.222361Z",
     "iopub.status.busy": "2020-09-16T14:56:45.221668Z",
     "iopub.status.idle": "2020-09-16T14:56:45.263089Z",
     "shell.execute_reply": "2020-09-16T14:56:45.263598Z"
    }
   },
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 5,
   "metadata": {},
   "source": [
    "We can now define an observation filter to select only the relevant observations. \n",
    "Here we use a cone search which we define with a python dict.\n",
    "\n",
    "We then filter the `ObservationTable` with `~gammapy.data.ObservationTable.select_observations()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.274923Z",
     "iopub.status.busy": "2020-09-16T14:56:45.273641Z",
     "iopub.status.idle": "2020-09-16T14:56:45.275582Z",
     "shell.execute_reply": "2020-09-16T14:56:45.276120Z"
    }
   },
   "outputs": [],
   "source": [
    "selection = dict(\n",
    "    type=\"sky_circle\",\n",
    "    frame=\"icrs\",\n",
    "    lon=\"83.633 deg\",\n",
    "    lat=\"22.014 deg\",\n",
    "    radius=\"5 deg\",\n",
    ")\n",
    "selected_obs_table = data_store.obs_table.select_observations(selection)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 6,
   "metadata": {},
   "source": [
    "We can now retrieve the relevant observations by passing their `obs_id` to the`~gammapy.data.DataStore.get_observations()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.287232Z",
     "iopub.status.busy": "2020-09-16T14:56:45.286658Z",
     "iopub.status.idle": "2020-09-16T14:56:45.292195Z",
     "shell.execute_reply": "2020-09-16T14:56:45.291617Z"
    }
   },
   "outputs": [],
   "source": [
    "observations = data_store.get_observations(selected_obs_table[\"OBS_ID\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 7,
   "metadata": {},
   "source": [
    "## Preparing reduced datasets geometry\n",
    "\n",
    "Now we define a reference geometry for our analysis, We choose a WCS based geometry with a binsize of 0.02 deg and also define an energy axis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.300985Z",
     "iopub.status.busy": "2020-09-16T14:56:45.299311Z",
     "iopub.status.idle": "2020-09-16T14:56:45.301557Z",
     "shell.execute_reply": "2020-09-16T14:56:45.302169Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(1.0, 10.0, 4, unit=\"TeV\")\n",
    "\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(83.633, 22.014),\n",
    "    binsz=0.02,\n",
    "    width=(2, 2),\n",
    "    frame=\"icrs\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")\n",
    "\n",
    "# Reduced IRFs are defined in true energy (i.e. not measured energy).\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.5, 20, 10, unit=\"TeV\", name=\"energy_true\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 8,
   "metadata": {},
   "source": [
    "Now we can define the target dataset with this geometry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.310326Z",
     "iopub.status.busy": "2020-09-16T14:56:45.307285Z",
     "iopub.status.idle": "2020-09-16T14:56:45.320721Z",
     "shell.execute_reply": "2020-09-16T14:56:45.321192Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"crab-stacked\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 9,
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "### Create the maker classes to be used\n",
    "\n",
    "The `~gammapy.datasets.MapDatasetMaker` object is initialized as well as the `~gammapy.makers.SafeMaskMaker` that carries here a maximum offset selection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.326280Z",
     "iopub.status.busy": "2020-09-16T14:56:45.325006Z",
     "iopub.status.idle": "2020-09-16T14:56:45.326865Z",
     "shell.execute_reply": "2020-09-16T14:56:45.327425Z"
    }
   },
   "outputs": [],
   "source": [
    "offset_max = 2.5 * u.deg\n",
    "maker = MapDatasetMaker()\n",
    "maker_safe_mask = SafeMaskMaker(methods=[\"offset-max\"], offset_max=offset_max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.332830Z",
     "iopub.status.busy": "2020-09-16T14:56:45.332236Z",
     "iopub.status.idle": "2020-09-16T14:56:45.349579Z",
     "shell.execute_reply": "2020-09-16T14:56:45.349085Z"
    }
   },
   "outputs": [],
   "source": [
    "circle = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.2 * u.deg\n",
    ")\n",
    "data = geom.region_mask(regions=[circle], inside=False)\n",
    "exclusion_mask = Map.from_geom(geom=geom, data=data)\n",
    "maker_fov = FoVBackgroundMaker(method=\"fit\", exclusion_mask=exclusion_mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 11,
   "metadata": {},
   "source": [
    "### Perform the data reduction loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:45.358362Z",
     "iopub.status.busy": "2020-09-16T14:56:45.357688Z",
     "iopub.status.idle": "2020-09-16T14:56:48.788174Z",
     "shell.execute_reply": "2020-09-16T14:56:48.787630Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Background norm obs 23523: 0.99\n",
      "Background norm obs 23526: 1.08\n",
      "Background norm obs 23559: 0.99\n",
      "Background norm obs 23592: 1.10\n",
      "CPU times: user 3.3 s, sys: 136 ms, total: 3.43 s\n",
      "Wall time: 3.43 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "for obs in observations:\n",
    "    # First a cutout of the target map is produced\n",
    "    cutout = stacked.cutout(\n",
    "        obs.pointing_radec, width=2 * offset_max, name=f\"obs-{obs.obs_id}\"\n",
    "    )\n",
    "    # A MapDataset is filled in this cutout geometry\n",
    "    dataset = maker.run(cutout, obs)\n",
    "    # The data quality cut is applied\n",
    "    dataset = maker_safe_mask.run(dataset, obs)\n",
    "    # fit background model\n",
    "    dataset = maker_fov.run(dataset)\n",
    "    print(\n",
    "        f\"Background norm obs {obs.obs_id}: {dataset.background_model.norm.value:.2f}\"\n",
    "    )\n",
    "    # The resulting dataset cutout is stacked onto the final one\n",
    "    stacked.stack(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:48.792914Z",
     "iopub.status.busy": "2020-09-16T14:56:48.791619Z",
     "iopub.status.idle": "2020-09-16T14:56:48.802633Z",
     "shell.execute_reply": "2020-09-16T14:56:48.802140Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : crab-stacked \n",
      "\n",
      "  Total counts                    : 2479 \n",
      "  Total predicted counts          : 2113.00\n",
      "  Total background counts         : 2113.00\n",
      "\n",
      "  Exposure min                    : 3.75e+08 m2 s\n",
      "  Exposure max                    : 3.48e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 40000 \n",
      "  Number of fit bins              : 40000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : 17778.05\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 1\n",
      "\n",
      "  Component 0: BackgroundModel\n",
      "  \n",
      "    Name                      : crab-stacked-bkg\n",
      "    Datasets names            : ['crab-stacked']\n",
      "    Parameters:\n",
      "      norm                    :   1.000              \n",
      "      tilt         (frozen)   :   0.000              \n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "print(stacked)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 13,
   "metadata": {},
   "source": [
    "### Inspect the reduced dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:48.810523Z",
     "iopub.status.busy": "2020-09-16T14:56:48.809230Z",
     "iopub.status.idle": "2020-09-16T14:56:49.370542Z",
     "shell.execute_reply": "2020-09-16T14:56:49.371407Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 432x288 with 2 Axes>,\n",
       " <WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <matplotlib.colorbar.Colorbar at 0x7fca02ef2c50>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.counts.sum_over_axes().smooth(0.05 * u.deg).plot(\n",
    "    stretch=\"sqrt\", add_cbar=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 14,
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:49.376056Z",
     "iopub.status.busy": "2020-09-16T14:56:49.375441Z",
     "iopub.status.idle": "2020-09-16T14:56:49.380171Z",
     "shell.execute_reply": "2020-09-16T14:56:49.379628Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"analysis_2\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 15,
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `~gammapy.datasets.MapDataset.write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:49.426291Z",
     "iopub.status.busy": "2020-09-16T14:56:49.382551Z",
     "iopub.status.idle": "2020-09-16T14:56:49.659668Z",
     "shell.execute_reply": "2020-09-16T14:56:49.660582Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "stacked.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 16,
   "metadata": {},
   "source": [
    "## Define the model\n",
    "We first define the model, a `SkyModel`, as the combination of a point source `SpatialModel` with a powerlaw `SpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:49.686868Z",
     "iopub.status.busy": "2020-09-16T14:56:49.680885Z",
     "iopub.status.idle": "2020-09-16T14:56:49.699239Z",
     "shell.execute_reply": "2020-09-16T14:56:49.698582Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "spatial_model = PointSpatialModel(\n",
    "    lon_0=target_position.ra, lat_0=target_position.dec, frame=\"icrs\"\n",
    ")\n",
    "\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2.702,\n",
    "    amplitude=4.712e-11 * u.Unit(\"1 / (cm2 s TeV)\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model, spectral_model=spectral_model, name=\"crab\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 17,
   "metadata": {},
   "source": [
    "Now we assign this model to our reduced dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:49.704424Z",
     "iopub.status.busy": "2020-09-16T14:56:49.703838Z",
     "iopub.status.idle": "2020-09-16T14:56:49.708528Z",
     "shell.execute_reply": "2020-09-16T14:56:49.707993Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked.models.append(sky_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 18,
   "metadata": {},
   "source": [
    "## Fit the model\n",
    "\n",
    "The `~gammapy.modeling.Fit` class is orchestrating the fit, connecting the `stats` method of the dataset to the minimizer. By default, it uses `iminuit`.\n",
    "\n",
    "Its contructor takes a list of dataset as argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:49.715732Z",
     "iopub.status.busy": "2020-09-16T14:56:49.715203Z",
     "iopub.status.idle": "2020-09-16T14:56:52.740620Z",
     "shell.execute_reply": "2020-09-16T14:56:52.740142Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------------\n",
      "| FCN = 1.624e+04               |     Ncalls=124 (124 total)     |\n",
      "| EDM = 4.68e-06 (Goal: 0.0002) |            up = 1.0            |\n",
      "------------------------------------------------------------------\n",
      "|  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |\n",
      "------------------------------------------------------------------\n",
      "|     True      |     True      |   False   |       False        |\n",
      "------------------------------------------------------------------\n",
      "| Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |\n",
      "------------------------------------------------------------------\n",
      "|     False     |     True      |   True    |   True    | False  |\n",
      "------------------------------------------------------------------\n",
      "CPU times: user 2.96 s, sys: 67.7 ms, total: 3.02 s\n",
      "Wall time: 3.02 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit([stacked])\n",
    "result = fit.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 19,
   "metadata": {},
   "source": [
    "The `FitResult` contains information on the fitted parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:52.750631Z",
     "iopub.status.busy": "2020-09-16T14:56:52.750113Z",
     "iopub.status.idle": "2020-09-16T14:56:52.755914Z",
     "shell.execute_reply": "2020-09-16T14:56:52.755377Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=8</i>\n",
       "<table id=\"table140505607891824\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>norm</td><td>9.351e-01</td><td></td><td>0.000e+00</td><td>nan</td><td>False</td><td>2.192e-02</td></tr>\n",
       "<tr><td>tilt</td><td>0.000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>index</td><td>2.600e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>1.004e-01</td></tr>\n",
       "<tr><td>amplitude</td><td>4.587e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>3.702e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>lon_0</td><td>8.362e+01</td><td>deg</td><td>nan</td><td>nan</td><td>False</td><td>3.120e-03</td></tr>\n",
       "<tr><td>lat_0</td><td>2.202e+01</td><td>deg</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td>2.963e-03</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=8>\n",
       "   name     value        unit         min        max    frozen   error  \n",
       "   str9    float64      str14       float64    float64   bool   float64 \n",
       "--------- --------- -------------- ---------- --------- ------ ---------\n",
       "     norm 9.351e-01                 0.000e+00       nan  False 2.192e-02\n",
       "     tilt 0.000e+00                       nan       nan   True 0.000e+00\n",
       "reference 1.000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    index 2.600e+00                       nan       nan  False 1.004e-01\n",
       "amplitude 4.587e-11 cm-2 s-1 TeV-1        nan       nan  False 3.702e-12\n",
       "reference 1.000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    lon_0 8.362e+01            deg        nan       nan  False 3.120e-03\n",
       "    lat_0 2.202e+01            deg -9.000e+01 9.000e+01  False 2.963e-03"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 20,
   "metadata": {},
   "source": [
    "### Inspecting residuals\n",
    "\n",
    "For any fit it is usefull to inspect the residual images. We have a few option on the dataset object to handle this. First we can use `.plot_residuals()` to plot a residual image, summed over all energies: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:52.764392Z",
     "iopub.status.busy": "2020-09-16T14:56:52.763875Z",
     "iopub.status.idle": "2020-09-16T14:56:53.192080Z",
     "shell.execute_reply": "2020-09-16T14:56:53.191493Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>, None)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 21,
   "metadata": {},
   "source": [
    "In addition we can aslo specify a region in the map to show the spectral residuals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:53.199426Z",
     "iopub.status.busy": "2020-09-16T14:56:53.198786Z",
     "iopub.status.idle": "2020-09-16T14:56:53.207735Z",
     "shell.execute_reply": "2020-09-16T14:56:53.208778Z"
    }
   },
   "outputs": [],
   "source": [
    "region = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.5 * u.deg\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:53.217963Z",
     "iopub.status.busy": "2020-09-16T14:56:53.213864Z",
     "iopub.status.idle": "2020-09-16T14:56:53.945424Z",
     "shell.execute_reply": "2020-09-16T14:56:53.944883Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <AxesSubplot:xlabel='Energy [TeV]', ylabel='Residuals ((data - model) / sqrt(model))'>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals(\n",
    "    region=region, method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 23,
   "metadata": {},
   "source": [
    "We can also directly access the `.residuals()` to get a map, that we can plot interactively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:53.953230Z",
     "iopub.status.busy": "2020-09-16T14:56:53.950045Z",
     "iopub.status.idle": "2020-09-16T14:56:54.451180Z",
     "shell.execute_reply": "2020-09-16T14:56:54.450488Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9001408e81d841998857b9b0cf258730",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "residuals = stacked.residuals(method=\"diff\")\n",
    "residuals.smooth(\"0.08 deg\").plot_interactive(\n",
    "    cmap=\"coolwarm\", vmin=-0.1, vmax=0.1, stretch=\"linear\", add_cbar=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 24,
   "metadata": {},
   "source": [
    "## Plot the fitted spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 24,
   "metadata": {},
   "source": [
    "### Making a butterfly plot \n",
    "\n",
    "The `SpectralModel` component can be used to produce a, so-called, butterfly plot showing the enveloppe of the model taking into account parameter uncertainties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:54.466711Z",
     "iopub.status.busy": "2020-09-16T14:56:54.466109Z",
     "iopub.status.idle": "2020-09-16T14:56:54.470733Z",
     "shell.execute_reply": "2020-09-16T14:56:54.470161Z"
    }
   },
   "outputs": [],
   "source": [
    "spec = sky_model.spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 25,
   "metadata": {},
   "source": [
    "Now we can actually do the plot using the `plot_error` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:54.500474Z",
     "iopub.status.busy": "2020-09-16T14:56:54.499837Z",
     "iopub.status.idle": "2020-09-16T14:56:55.025757Z",
     "shell.execute_reply": "2020-09-16T14:56:55.024840Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:323: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:324: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "spec.plot(energy_range=energy_range, energy_power=2)\n",
    "ax = spec.plot_error(energy_range=energy_range, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "execution_count": 26,
   "metadata": {},
   "source": [
    "### Computing flux points\n",
    "\n",
    "We can now compute some flux points using the `~gammapy.estimators.FluxPointsEstimator`. \n",
    "\n",
    "Besides the list of datasets to use, we must provide it the energy intervals on which to compute flux points as well as the model component name. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:55.031203Z",
     "iopub.status.busy": "2020-09-16T14:56:55.030578Z",
     "iopub.status.idle": "2020-09-16T14:56:55.042100Z",
     "shell.execute_reply": "2020-09-16T14:56:55.041506Z"
    }
   },
   "outputs": [],
   "source": [
    "e_edges = [1, 2, 4, 10] * u.TeV\n",
    "fpe = FluxPointsEstimator(e_edges=e_edges, source=\"crab\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:55.048129Z",
     "iopub.status.busy": "2020-09-16T14:56:55.047510Z",
     "iopub.status.idle": "2020-09-16T14:56:57.222236Z",
     "shell.execute_reply": "2020-09-16T14:56:57.221170Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.15 s, sys: 23.6 ms, total: 2.17 s\n",
      "Wall time: 2.17 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "flux_points = fpe.run(datasets=[stacked])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T14:56:57.263995Z",
     "iopub.status.busy": "2020-09-16T14:56:57.262260Z",
     "iopub.status.idle": "2020-09-16T14:56:57.900849Z",
     "shell.execute_reply": "2020-09-16T14:56:57.900050Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:323: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:324: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:669: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy (TeV)', ylabel='dnde (TeV / (cm2 s))'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = spec.plot_error(energy_range=energy_range, energy_power=2)\n",
    "flux_points.plot(ax=ax, energy_power=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "2d24a65fc65b4c4a9bcc6ebfad636adb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e+00 TeV - 1.78e+00 TeV TeV",
        "1.78e+00 TeV - 3.16e+00 TeV TeV",
        "3.16e+00 TeV - 5.62e+00 TeV TeV",
        "5.62e+00 TeV - 1.00e+01 TeV TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_802ef4a112224886b888dec7e87478eb",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_c65af000d97f4008ae92b16ea1a4ced7"
      }
     },
     "510ade7c8a4840ce9e37bd23c2047c9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "770ed686a30042579e2f7365f262fa9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_8962d2bf3dcc4e449f67d62694904a15",
       "style": "IPY_MODEL_510ade7c8a4840ce9e37bd23c2047c9a"
      }
     },
     "7db64fa5bf4c4a3fa794c6d531a05459": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "802ef4a112224886b888dec7e87478eb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "8962d2bf3dcc4e449f67d62694904a15": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9001408e81d841998857b9b0cf258730": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2d24a65fc65b4c4a9bcc6ebfad636adb",
        "IPY_MODEL_770ed686a30042579e2f7365f262fa9a",
        "IPY_MODEL_d1b38604f5ca41788318e8f90b1a5bf2"
       ],
       "layout": "IPY_MODEL_7db64fa5bf4c4a3fa794c6d531a05459"
      }
     },
     "a6c3c90dc2024de5b10fdacb7c2996a6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c65af000d97f4008ae92b16ea1a4ced7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "d1b38604f5ca41788318e8f90b1a5bf2": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_a6c3c90dc2024de5b10fdacb7c2996a6",
       "msg_id": "",
       "outputs": [
        {
         "name": "stderr",
         "output_type": "stream",
         "text": "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n  return super().imshow(X, *args, origin=origin, **kwargs)\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 2 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
