{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/analysis_2.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[analysis_2.ipynb](../_static/notebooks/analysis_2.ipynb) |\n",
    "[analysis_2.py](../_static/notebooks/analysis_2.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First analysis with gammapy library API\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and intrument response functions (IRF).\n",
    "- Understanding of the data reduction and modeling fitting process as shown in the [first gammapy analysis with the high level interface tutorial](analysis_1.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis this time using the lower level classes and functions\n",
    "the library.\n",
    "This allows to understand what happens during two main gammapy analysis steps, data reduction and modeling/fitting. \n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula using the lower level gammapy API.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "Here, we have to interact with the data archive (with the `~gammapy.data.DataStore`) to retrieve a list of selected observations (`~gammapy.data.Observations`). Then, we define the geometry of the `~gammapy.datasets.MapDataset` object we want to produce and the maker object that reduce an observation\n",
    "to a dataset. \n",
    "\n",
    "We can then proceed with data reduction with a loop over all selected observations to produce datasets in the relevant geometry and stack them together (i.e. sum them all).\n",
    "\n",
    "In practice, we have to:\n",
    "- Create a `~gammapy.data.DataStore` poiting to the relevant data \n",
    "- Apply an observation selection to produce a list of observations, a `~gammapy.data.Observations` object.\n",
    "- Define a geometry of the Map we want to produce, with a sky projection and an energy range.\n",
    "    - Create a `~gammapy.maps.MapAxis` for the energy\n",
    "    - Create a `~gammapy.maps.WcsGeom` for the geometry\n",
    "- Create the necessary makers : \n",
    "    - the map dataset maker : `~gammapy.makers.MapDatasetMaker`\n",
    "    - the background normalization maker, here a `~gammapy.makers.FoVBackgroundMaker`\n",
    "    - and usually the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Apply the makers sequentially to produce the current `~gammapy.datasets.MapDataset`\n",
    "    - Stack it on the target one.\n",
    "- Define the `~gammapy.modeling.models.SkyModel` to apply to the dataset.\n",
    "- Create a `~gammapy.modeling.Fit` object and run it to fit the model parameters\n",
    "- Apply a `~gammapy.estimators.FluxPointsEstimator` to compute flux points for the spectral part of the fit.\n",
    "\n",
    "## Setup\n",
    "First, we setup the analysis by performing required imports.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:24.803962Z",
     "iopub.status.busy": "2020-11-04T16:49:24.803307Z",
     "iopub.status.idle": "2020-11-04T16:49:25.113730Z",
     "shell.execute_reply": "2020-11-04T16:49:25.113055Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:25.118449Z",
     "iopub.status.busy": "2020-11-04T16:49:25.117449Z",
     "iopub.status.idle": "2020-11-04T16:49:25.580714Z",
     "shell.execute_reply": "2020-11-04T16:49:25.580210Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:25.586455Z",
     "iopub.status.busy": "2020-11-04T16:49:25.585593Z",
     "iopub.status.idle": "2020-11-04T16:49:26.247278Z",
     "shell.execute_reply": "2020-11-04T16:49:26.245862Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import MapDataset\n",
    "from gammapy.maps import WcsGeom, MapAxis, Map\n",
    "from gammapy.makers import MapDatasetMaker, SafeMaskMaker, FoVBackgroundMaker\n",
    "from gammapy.modeling.models import (\n",
    "    SkyModel,\n",
    "    PowerLawSpectralModel,\n",
    "    PointSpatialModel,\n",
    "    FoVBackgroundModel,\n",
    ")\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the datastore and selecting observations\n",
    "\n",
    "We first use the `~gammapy.data.DataStore` object to access the observations we want to analyse. Here the H.E.S.S. DL3 DR1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.251928Z",
     "iopub.status.busy": "2020-11-04T16:49:26.251335Z",
     "iopub.status.idle": "2020-11-04T16:49:26.297742Z",
     "shell.execute_reply": "2020-11-04T16:49:26.297190Z"
    }
   },
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now define an observation filter to select only the relevant observations. \n",
    "Here we use a cone search which we define with a python dict.\n",
    "\n",
    "We then filter the `ObservationTable` with `~gammapy.data.ObservationTable.select_observations()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.308775Z",
     "iopub.status.busy": "2020-11-04T16:49:26.308103Z",
     "iopub.status.idle": "2020-11-04T16:49:26.310434Z",
     "shell.execute_reply": "2020-11-04T16:49:26.310921Z"
    }
   },
   "outputs": [],
   "source": [
    "selection = dict(\n",
    "    type=\"sky_circle\",\n",
    "    frame=\"icrs\",\n",
    "    lon=\"83.633 deg\",\n",
    "    lat=\"22.014 deg\",\n",
    "    radius=\"5 deg\",\n",
    ")\n",
    "selected_obs_table = data_store.obs_table.select_observations(selection)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now retrieve the relevant observations by passing their `obs_id` to the`~gammapy.data.DataStore.get_observations()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.327410Z",
     "iopub.status.busy": "2020-11-04T16:49:26.325791Z",
     "iopub.status.idle": "2020-11-04T16:49:26.328009Z",
     "shell.execute_reply": "2020-11-04T16:49:26.328577Z"
    }
   },
   "outputs": [],
   "source": [
    "observations = data_store.get_observations(selected_obs_table[\"OBS_ID\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing reduced datasets geometry\n",
    "\n",
    "Now we define a reference geometry for our analysis, We choose a WCS based geometry with a binsize of 0.02 deg and also define an energy axis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.336890Z",
     "iopub.status.busy": "2020-11-04T16:49:26.335870Z",
     "iopub.status.idle": "2020-11-04T16:49:26.338433Z",
     "shell.execute_reply": "2020-11-04T16:49:26.337893Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(1.0, 10.0, 4, unit=\"TeV\")\n",
    "\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(83.633, 22.014),\n",
    "    binsz=0.02,\n",
    "    width=(2, 2),\n",
    "    frame=\"icrs\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")\n",
    "\n",
    "# Reduced IRFs are defined in true energy (i.e. not measured energy).\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.5, 20, 10, unit=\"TeV\", name=\"energy_true\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can define the target dataset with this geometry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.347441Z",
     "iopub.status.busy": "2020-11-04T16:49:26.346787Z",
     "iopub.status.idle": "2020-11-04T16:49:26.357340Z",
     "shell.execute_reply": "2020-11-04T16:49:26.356701Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"crab-stacked\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "### Create the maker classes to be used\n",
    "\n",
    "The `~gammapy.datasets.MapDatasetMaker` object is initialized as well as the `~gammapy.makers.SafeMaskMaker` that carries here a maximum offset selection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.362474Z",
     "iopub.status.busy": "2020-11-04T16:49:26.361162Z",
     "iopub.status.idle": "2020-11-04T16:49:26.363025Z",
     "shell.execute_reply": "2020-11-04T16:49:26.363664Z"
    }
   },
   "outputs": [],
   "source": [
    "offset_max = 2.5 * u.deg\n",
    "maker = MapDatasetMaker()\n",
    "maker_safe_mask = SafeMaskMaker(methods=[\"offset-max\"], offset_max=offset_max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.369130Z",
     "iopub.status.busy": "2020-11-04T16:49:26.368577Z",
     "iopub.status.idle": "2020-11-04T16:49:26.386791Z",
     "shell.execute_reply": "2020-11-04T16:49:26.386122Z"
    }
   },
   "outputs": [],
   "source": [
    "circle = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.2 * u.deg\n",
    ")\n",
    "data = geom.region_mask(regions=[circle], inside=False)\n",
    "exclusion_mask = Map.from_geom(geom=geom, data=data)\n",
    "maker_fov = FoVBackgroundMaker(method=\"fit\", exclusion_mask=exclusion_mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform the data reduction loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:26.396060Z",
     "iopub.status.busy": "2020-11-04T16:49:26.395398Z",
     "iopub.status.idle": "2020-11-04T16:49:29.619781Z",
     "shell.execute_reply": "2020-11-04T16:49:29.619230Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Background norm obs 23523: 0.99\n",
      "Background norm obs 23526: 1.08\n",
      "Background norm obs 23559: 0.99\n",
      "Background norm obs 23592: 1.10\n",
      "CPU times: user 3.13 s, sys: 91 ms, total: 3.23 s\n",
      "Wall time: 3.22 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "for obs in observations:\n",
    "    # First a cutout of the target map is produced\n",
    "    cutout = stacked.cutout(\n",
    "        obs.pointing_radec, width=2 * offset_max, name=f\"obs-{obs.obs_id}\"\n",
    "    )\n",
    "    # A MapDataset is filled in this cutout geometry\n",
    "    dataset = maker.run(cutout, obs)\n",
    "    # The data quality cut is applied\n",
    "    dataset = maker_safe_mask.run(dataset, obs)\n",
    "    # fit background model\n",
    "    dataset = maker_fov.run(dataset)\n",
    "    print(\n",
    "        f\"Background norm obs {obs.obs_id}: {dataset.background_model.spectral_model.norm.value:.2f}\"\n",
    "    )\n",
    "    # The resulting dataset cutout is stacked onto the final one\n",
    "    stacked.stack(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:29.624172Z",
     "iopub.status.busy": "2020-11-04T16:49:29.623208Z",
     "iopub.status.idle": "2020-11-04T16:49:29.632572Z",
     "shell.execute_reply": "2020-11-04T16:49:29.632098Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : crab-stacked \n",
      "\n",
      "  Total counts                    : 2479 \n",
      "  Total background counts         : 2112.97\n",
      "  Total excess counts             : 366.03\n",
      "\n",
      "  Predicted counts                : 2112.97\n",
      "  Predicted background counts     : 2112.97\n",
      "  Predicted excess counts         : nan\n",
      "\n",
      "  Exposure min                    : 3.75e+08 m2 s\n",
      "  Exposure max                    : 3.48e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 40000 \n",
      "  Number of fit bins              : 40000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : nan\n",
      "\n",
      "  Number of models                : 0 \n",
      "  Number of parameters            : 0\n",
      "  Number of free parameters       : 0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(stacked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspect the reduced dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:29.638109Z",
     "iopub.status.busy": "2020-11-04T16:49:29.636886Z",
     "iopub.status.idle": "2020-11-04T16:49:30.147719Z",
     "shell.execute_reply": "2020-11-04T16:49:30.148219Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 432x288 with 2 Axes>,\n",
       " <WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <matplotlib.colorbar.Colorbar at 0x7f25b8a8b358>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.counts.sum_over_axes().smooth(0.05 * u.deg).plot(\n",
    "    stretch=\"sqrt\", add_cbar=True\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:30.152702Z",
     "iopub.status.busy": "2020-11-04T16:49:30.152010Z",
     "iopub.status.idle": "2020-11-04T16:49:30.155408Z",
     "shell.execute_reply": "2020-11-04T16:49:30.156254Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"analysis_2\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `~gammapy.datasets.MapDataset.write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:30.287678Z",
     "iopub.status.busy": "2020-11-04T16:49:30.279044Z",
     "iopub.status.idle": "2020-11-04T16:49:30.507553Z",
     "shell.execute_reply": "2020-11-04T16:49:30.506436Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "stacked.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the model\n",
    "We first define the model, a `SkyModel`, as the combination of a point source `SpatialModel` with a powerlaw `SpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:30.538156Z",
     "iopub.status.busy": "2020-11-04T16:49:30.520241Z",
     "iopub.status.idle": "2020-11-04T16:49:30.541526Z",
     "shell.execute_reply": "2020-11-04T16:49:30.541005Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "spatial_model = PointSpatialModel(\n",
    "    lon_0=target_position.ra, lat_0=target_position.dec, frame=\"icrs\"\n",
    ")\n",
    "\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2.702,\n",
    "    amplitude=4.712e-11 * u.Unit(\"1 / (cm2 s TeV)\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model, spectral_model=spectral_model, name=\"crab\"\n",
    ")\n",
    "\n",
    "bkg_model = FoVBackgroundModel(dataset_name=\"crab-stacked\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we assign this model to our reduced dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:30.549828Z",
     "iopub.status.busy": "2020-11-04T16:49:30.547466Z",
     "iopub.status.idle": "2020-11-04T16:49:30.727285Z",
     "shell.execute_reply": "2020-11-04T16:49:30.727781Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked.models = [sky_model, bkg_model]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the model\n",
    "\n",
    "The `~gammapy.modeling.Fit` class is orchestrating the fit, connecting the `stats` method of the dataset to the minimizer. By default, it uses `iminuit`.\n",
    "\n",
    "Its contructor takes a list of dataset as argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:30.735099Z",
     "iopub.status.busy": "2020-11-04T16:49:30.734557Z",
     "iopub.status.idle": "2020-11-04T16:49:33.794123Z",
     "shell.execute_reply": "2020-11-04T16:49:33.794550Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "┌──────────────────────────────────┬──────────────────────────────────────┐\n",
      "│ FCN = 1.624e+04                  │       Ncalls = 126 (126 total)       │\n",
      "│ EDM = 9.42e-05 (Goal: 0.0002)    │               up = 1.0               │\n",
      "├───────────────┬──────────────────┼──────────────────────────────────────┤\n",
      "│ Valid Minimum │ Valid Parameters │        No Parameters at limit        │\n",
      "├───────────────┴──────────────────┼──────────────────────────────────────┤\n",
      "│ Below EDM threshold (goal x 10)  │           Below call limit           │\n",
      "├───────────────┬──────────────────┼───────────┬─────────────┬────────────┤\n",
      "│   Hesse ok    │  Has Covariance  │ Accurate  │  Pos. def.  │ Not forced │\n",
      "└───────────────┴──────────────────┴───────────┴─────────────┴────────────┘\n",
      "CPU times: user 2.8 s, sys: 253 ms, total: 3.06 s\n",
      "Wall time: 3.06 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit([stacked])\n",
    "result = fit.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `FitResult` contains information on the fitted parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:33.802718Z",
     "iopub.status.busy": "2020-11-04T16:49:33.801973Z",
     "iopub.status.idle": "2020-11-04T16:49:33.807768Z",
     "shell.execute_reply": "2020-11-04T16:49:33.807314Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=8</i>\n",
       "<table id=\"table139799988800536\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>index</td><td>2.6010e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>1.004e-01</td></tr>\n",
       "<tr><td>amplitude</td><td>4.5902e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>3.705e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>lon_0</td><td>8.3619e+01</td><td>deg</td><td>nan</td><td>nan</td><td>False</td><td>3.113e-03</td></tr>\n",
       "<tr><td>lat_0</td><td>2.2024e+01</td><td>deg</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td>2.948e-03</td></tr>\n",
       "<tr><td>norm</td><td>9.3513e-01</td><td></td><td>nan</td><td>nan</td><td>False</td><td>2.192e-02</td></tr>\n",
       "<tr><td>tilt</td><td>0.0000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=8>\n",
       "   name     value         unit         min        max    frozen   error  \n",
       "   str9    float64       str14       float64    float64   bool   float64 \n",
       "--------- ---------- -------------- ---------- --------- ------ ---------\n",
       "    index 2.6010e+00                       nan       nan  False 1.004e-01\n",
       "amplitude 4.5902e-11 cm-2 s-1 TeV-1        nan       nan  False 3.705e-12\n",
       "reference 1.0000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    lon_0 8.3619e+01            deg        nan       nan  False 3.113e-03\n",
       "    lat_0 2.2024e+01            deg -9.000e+01 9.000e+01  False 2.948e-03\n",
       "     norm 9.3513e-01                       nan       nan  False 2.192e-02\n",
       "     tilt 0.0000e+00                       nan       nan   True 0.000e+00\n",
       "reference 1.0000e+00            TeV        nan       nan   True 0.000e+00"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspecting residuals\n",
    "\n",
    "For any fit it is useful to inspect the residual images. We have a few options on the dataset object to handle this. First we can use `.plot_residuals_spatial()` to plot a residual image, summed over all energies:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:33.813716Z",
     "iopub.status.busy": "2020-11-04T16:49:33.813193Z",
     "iopub.status.idle": "2020-11-04T16:49:34.128912Z",
     "shell.execute_reply": "2020-11-04T16:49:34.129634Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals_spatial(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition, we can also specify a region in the map to show the spectral residuals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:34.132474Z",
     "iopub.status.busy": "2020-11-04T16:49:34.131838Z",
     "iopub.status.idle": "2020-11-04T16:49:34.135630Z",
     "shell.execute_reply": "2020-11-04T16:49:34.136127Z"
    }
   },
   "outputs": [],
   "source": [
    "region = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.5 * u.deg\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:34.138522Z",
     "iopub.status.busy": "2020-11-04T16:49:34.138029Z",
     "iopub.status.idle": "2020-11-04T16:49:34.851734Z",
     "shell.execute_reply": "2020-11-04T16:49:34.851090Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <AxesSubplot:xlabel='Energy [TeV]', ylabel='Residuals (data - model)'>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals(\n",
    "    kwargs_spatial=dict(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5),\n",
    "    kwargs_spectral=dict(region=region),\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also directly access the `.residuals()` to get a map, that we can plot interactively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:34.858417Z",
     "iopub.status.busy": "2020-11-04T16:49:34.855459Z",
     "iopub.status.idle": "2020-11-04T16:49:35.262977Z",
     "shell.execute_reply": "2020-11-04T16:49:35.263915Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f9e95edacbf44504a7bf843e15b77ff6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "residuals = stacked.residuals(method=\"diff\")\n",
    "residuals.smooth(\"0.08 deg\").plot_interactive(\n",
    "    cmap=\"coolwarm\", vmin=-0.2, vmax=0.2, stretch=\"linear\", add_cbar=True\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the fitted spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making a butterfly plot \n",
    "\n",
    "The `SpectralModel` component can be used to produce a, so-called, butterfly plot showing the enveloppe of the model taking into account parameter uncertainties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:35.270603Z",
     "iopub.status.busy": "2020-11-04T16:49:35.270038Z",
     "iopub.status.idle": "2020-11-04T16:49:35.272623Z",
     "shell.execute_reply": "2020-11-04T16:49:35.273242Z"
    }
   },
   "outputs": [],
   "source": [
    "spec = sky_model.spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can actually do the plot using the `plot_error` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:35.299564Z",
     "iopub.status.busy": "2020-11-04T16:49:35.295029Z",
     "iopub.status.idle": "2020-11-04T16:49:35.808571Z",
     "shell.execute_reply": "2020-11-04T16:49:35.807816Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:415: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:416: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "spec.plot(energy_range=energy_range, energy_power=2)\n",
    "ax = spec.plot_error(energy_range=energy_range, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Computing flux points\n",
    "\n",
    "We can now compute some flux points using the `~gammapy.estimators.FluxPointsEstimator`. \n",
    "\n",
    "Besides the list of datasets to use, we must provide it the energy intervals on which to compute flux points as well as the model component name. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:35.813755Z",
     "iopub.status.busy": "2020-11-04T16:49:35.812977Z",
     "iopub.status.idle": "2020-11-04T16:49:35.814952Z",
     "shell.execute_reply": "2020-11-04T16:49:35.815517Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_edges = [1, 2, 4, 10] * u.TeV\n",
    "fpe = FluxPointsEstimator(energy_edges=energy_edges, source=\"crab\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:35.823382Z",
     "iopub.status.busy": "2020-11-04T16:49:35.821716Z",
     "iopub.status.idle": "2020-11-04T16:49:38.922226Z",
     "shell.execute_reply": "2020-11-04T16:49:38.921769Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.04 s, sys: 67.2 ms, total: 3.1 s\n",
      "Wall time: 3.1 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/units/quantity.py:377: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
      "  subok=False, ndmin=ndmin)\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "flux_points = fpe.run(datasets=[stacked])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T16:49:38.942860Z",
     "iopub.status.busy": "2020-11-04T16:49:38.938886Z",
     "iopub.status.idle": "2020-11-04T16:49:39.473637Z",
     "shell.execute_reply": "2020-11-04T16:49:39.474407Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0.33352143, 0.5930943 , 2.46113559]), array([0.44475798, 0.79090395, 4.37658675]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:415: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:416: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:669: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy (TeV)', ylabel='dnde (TeV / (cm2 s))'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = spec.plot_error(energy_range=energy_range, energy_power=2)\n",
    "flux_points.plot(ax=ax, energy_power=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "052f0ec751dd4c488c13a4ce9388acbb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "1af7db75c7a0485bbf967724be75dbfd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "319bc00b82174e0e828bb4881daf69cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "508a1394d8e64faf9a5b64f927a73d2b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "858d269ec9f04d56885998654f112899": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "956e875c63b64148af0eca6c98180e0b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_508a1394d8e64faf9a5b64f927a73d2b",
       "style": "IPY_MODEL_052f0ec751dd4c488c13a4ce9388acbb"
      }
     },
     "a02f2eb894b340c08f610cc6fd5844c4": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_858d269ec9f04d56885998654f112899",
       "msg_id": "",
       "outputs": [
        {
         "name": "stderr",
         "output_type": "stream",
         "text": "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n  return super().imshow(X, *args, origin=origin, **kwargs)\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 2 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "a815159b7b44497f9efb5e489946d8b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "bdf6fe3474a348489f2749907e9b1318": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e+00 TeV - 1.78e+00 TeV TeV",
        "1.78e+00 TeV - 3.16e+00 TeV TeV",
        "3.16e+00 TeV - 5.62e+00 TeV TeV",
        "5.62e+00 TeV - 1.00e+01 TeV TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_319bc00b82174e0e828bb4881daf69cb",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_a815159b7b44497f9efb5e489946d8b9"
      }
     },
     "f9e95edacbf44504a7bf843e15b77ff6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bdf6fe3474a348489f2749907e9b1318",
        "IPY_MODEL_956e875c63b64148af0eca6c98180e0b",
        "IPY_MODEL_a02f2eb894b340c08f610cc6fd5844c4"
       ],
       "layout": "IPY_MODEL_1af7db75c7a0485bbf967724be75dbfd"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
