{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/analysis_2.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[analysis_2.ipynb](../_static/notebooks/analysis_2.ipynb) |\n",
    "[analysis_2.py](../_static/notebooks/analysis_2.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First analysis with gammapy library API\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and intrument response functions (IRF).\n",
    "- Understanding of the data reduction and modeling fitting process as shown in the [first gammapy analysis with the high level interface tutorial](analysis_1.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis this time using the lower level classes and functions\n",
    "the library.\n",
    "This allows to understand what happens during two main gammapy analysis steps, data reduction and modeling/fitting. \n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula using the lower level gammapy API.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "Here, we have to interact with the data archive (with the `~gammapy.data.DataStore`) to retrieve a list of selected observations (`~gammapy.data.Observations`). Then, we define the geometry of the `~gammapy.datasets.MapDataset` object we want to produce and the maker object that reduce an observation\n",
    "to a dataset. \n",
    "\n",
    "We can then proceed with data reduction with a loop over all selected observations to produce datasets in the relevant geometry and stack them together (i.e. sum them all).\n",
    "\n",
    "In practice, we have to:\n",
    "- Create a `~gammapy.data.DataStore` poiting to the relevant data \n",
    "- Apply an observation selection to produce a list of observations, a `~gammapy.data.Observations` object.\n",
    "- Define a geometry of the Map we want to produce, with a sky projection and an energy range.\n",
    "    - Create a `~gammapy.maps.MapAxis` for the energy\n",
    "    - Create a `~gammapy.maps.WcsGeom` for the geometry\n",
    "- Create the necessary makers : \n",
    "    - the map dataset maker : `~gammapy.makers.MapDatasetMaker`\n",
    "    - the background normalization maker, here a `~gammapy.makers.FoVBackgroundMaker`\n",
    "    - and usually the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Apply the makers sequentially to produce the current `~gammapy.datasets.MapDataset`\n",
    "    - Stack it on the target one.\n",
    "- Define the `~gammapy.modeling.models.SkyModel` to apply to the dataset.\n",
    "- Create a `~gammapy.modeling.Fit` object and run it to fit the model parameters\n",
    "- Apply a `~gammapy.estimators.FluxPointsEstimator` to compute flux points for the spectral part of the fit.\n",
    "\n",
    "## Setup\n",
    "First, we setup the analysis by performing required imports.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:45.107629Z",
     "iopub.status.busy": "2020-09-29T18:07:45.106968Z",
     "iopub.status.idle": "2020-09-29T18:07:45.427948Z",
     "shell.execute_reply": "2020-09-29T18:07:45.426942Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:45.432522Z",
     "iopub.status.busy": "2020-09-29T18:07:45.431488Z",
     "iopub.status.idle": "2020-09-29T18:07:46.019822Z",
     "shell.execute_reply": "2020-09-29T18:07:46.020307Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.026459Z",
     "iopub.status.busy": "2020-09-29T18:07:46.024655Z",
     "iopub.status.idle": "2020-09-29T18:07:46.652845Z",
     "shell.execute_reply": "2020-09-29T18:07:46.653454Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import MapDataset\n",
    "from gammapy.maps import WcsGeom, MapAxis, Map\n",
    "from gammapy.makers import MapDatasetMaker, SafeMaskMaker, FoVBackgroundMaker\n",
    "from gammapy.modeling.models import (\n",
    "    SkyModel,\n",
    "    PowerLawSpectralModel,\n",
    "    PointSpatialModel,\n",
    ")\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the datastore and selecting observations\n",
    "\n",
    "We first use the `~gammapy.data.DataStore` object to access the observations we want to analyse. Here the H.E.S.S. DL3 DR1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.658180Z",
     "iopub.status.busy": "2020-09-29T18:07:46.657629Z",
     "iopub.status.idle": "2020-09-29T18:07:46.697465Z",
     "shell.execute_reply": "2020-09-29T18:07:46.696934Z"
    }
   },
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now define an observation filter to select only the relevant observations. \n",
    "Here we use a cone search which we define with a python dict.\n",
    "\n",
    "We then filter the `ObservationTable` with `~gammapy.data.ObservationTable.select_observations()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.707783Z",
     "iopub.status.busy": "2020-09-29T18:07:46.707210Z",
     "iopub.status.idle": "2020-09-29T18:07:46.710153Z",
     "shell.execute_reply": "2020-09-29T18:07:46.709561Z"
    }
   },
   "outputs": [],
   "source": [
    "selection = dict(\n",
    "    type=\"sky_circle\",\n",
    "    frame=\"icrs\",\n",
    "    lon=\"83.633 deg\",\n",
    "    lat=\"22.014 deg\",\n",
    "    radius=\"5 deg\",\n",
    ")\n",
    "selected_obs_table = data_store.obs_table.select_observations(selection)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now retrieve the relevant observations by passing their `obs_id` to the`~gammapy.data.DataStore.get_observations()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.718478Z",
     "iopub.status.busy": "2020-09-29T18:07:46.716225Z",
     "iopub.status.idle": "2020-09-29T18:07:46.725447Z",
     "shell.execute_reply": "2020-09-29T18:07:46.725922Z"
    }
   },
   "outputs": [],
   "source": [
    "observations = data_store.get_observations(selected_obs_table[\"OBS_ID\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing reduced datasets geometry\n",
    "\n",
    "Now we define a reference geometry for our analysis, We choose a WCS based geometry with a binsize of 0.02 deg and also define an energy axis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.734864Z",
     "iopub.status.busy": "2020-09-29T18:07:46.733531Z",
     "iopub.status.idle": "2020-09-29T18:07:46.735461Z",
     "shell.execute_reply": "2020-09-29T18:07:46.736020Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(1.0, 10.0, 4, unit=\"TeV\")\n",
    "\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(83.633, 22.014),\n",
    "    binsz=0.02,\n",
    "    width=(2, 2),\n",
    "    frame=\"icrs\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")\n",
    "\n",
    "# Reduced IRFs are defined in true energy (i.e. not measured energy).\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.5, 20, 10, unit=\"TeV\", name=\"energy_true\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can define the target dataset with this geometry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.744759Z",
     "iopub.status.busy": "2020-09-29T18:07:46.744167Z",
     "iopub.status.idle": "2020-09-29T18:07:46.755574Z",
     "shell.execute_reply": "2020-09-29T18:07:46.754993Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"crab-stacked\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "### Create the maker classes to be used\n",
    "\n",
    "The `~gammapy.datasets.MapDatasetMaker` object is initialized as well as the `~gammapy.makers.SafeMaskMaker` that carries here a maximum offset selection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.760898Z",
     "iopub.status.busy": "2020-09-29T18:07:46.759601Z",
     "iopub.status.idle": "2020-09-29T18:07:46.761974Z",
     "shell.execute_reply": "2020-09-29T18:07:46.762534Z"
    }
   },
   "outputs": [],
   "source": [
    "offset_max = 2.5 * u.deg\n",
    "maker = MapDatasetMaker()\n",
    "maker_safe_mask = SafeMaskMaker(methods=[\"offset-max\"], offset_max=offset_max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.768226Z",
     "iopub.status.busy": "2020-09-29T18:07:46.767658Z",
     "iopub.status.idle": "2020-09-29T18:07:46.790267Z",
     "shell.execute_reply": "2020-09-29T18:07:46.787466Z"
    }
   },
   "outputs": [],
   "source": [
    "circle = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.2 * u.deg\n",
    ")\n",
    "data = geom.region_mask(regions=[circle], inside=False)\n",
    "exclusion_mask = Map.from_geom(geom=geom, data=data)\n",
    "maker_fov = FoVBackgroundMaker(method=\"fit\", exclusion_mask=exclusion_mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform the data reduction loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:46.800005Z",
     "iopub.status.busy": "2020-09-29T18:07:46.798340Z",
     "iopub.status.idle": "2020-09-29T18:07:50.323149Z",
     "shell.execute_reply": "2020-09-29T18:07:50.322605Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Background norm obs 23523: 0.99\n",
      "Background norm obs 23526: 1.08\n",
      "Background norm obs 23559: 0.99\n",
      "Background norm obs 23592: 1.10\n",
      "CPU times: user 3.38 s, sys: 144 ms, total: 3.53 s\n",
      "Wall time: 3.52 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "for obs in observations:\n",
    "    # First a cutout of the target map is produced\n",
    "    cutout = stacked.cutout(\n",
    "        obs.pointing_radec, width=2 * offset_max, name=f\"obs-{obs.obs_id}\"\n",
    "    )\n",
    "    # A MapDataset is filled in this cutout geometry\n",
    "    dataset = maker.run(cutout, obs)\n",
    "    # The data quality cut is applied\n",
    "    dataset = maker_safe_mask.run(dataset, obs)\n",
    "    # fit background model\n",
    "    dataset = maker_fov.run(dataset)\n",
    "    print(\n",
    "        f\"Background norm obs {obs.obs_id}: {dataset.background_model.spectral_model.norm.value:.2f}\"\n",
    "    )\n",
    "    # The resulting dataset cutout is stacked onto the final one\n",
    "    stacked.stack(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:50.327845Z",
     "iopub.status.busy": "2020-09-29T18:07:50.327291Z",
     "iopub.status.idle": "2020-09-29T18:07:50.338315Z",
     "shell.execute_reply": "2020-09-29T18:07:50.338880Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : crab-stacked \n",
      "\n",
      "  Total counts                    : 2479 \n",
      "  Total predicted counts          : 2112.97\n",
      "  Total background counts         : 2112.97\n",
      "\n",
      "  Exposure min                    : 3.75e+08 m2 s\n",
      "  Exposure max                    : 3.48e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 40000 \n",
      "  Number of fit bins              : 40000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : 17778.06\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 1\n",
      "\n",
      "  Component 0: BackgroundModel\n",
      "  \n",
      "    Name                      : crab-stacked-bkg\n",
      "    Datasets names            : ['crab-stacked']\n",
      "    Parameters:\n",
      "      norm                    :   1.000              \n",
      "      tilt         (frozen)   :   0.000              \n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "print(stacked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspect the reduced dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:50.345331Z",
     "iopub.status.busy": "2020-09-29T18:07:50.344347Z",
     "iopub.status.idle": "2020-09-29T18:07:50.958608Z",
     "shell.execute_reply": "2020-09-29T18:07:50.957992Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 432x288 with 2 Axes>,\n",
       " <WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <matplotlib.colorbar.Colorbar at 0x7f6c80a562e8>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.counts.sum_over_axes().smooth(0.05 * u.deg).plot(\n",
    "    stretch=\"sqrt\", add_cbar=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:50.963593Z",
     "iopub.status.busy": "2020-09-29T18:07:50.961837Z",
     "iopub.status.idle": "2020-09-29T18:07:50.964950Z",
     "shell.execute_reply": "2020-09-29T18:07:50.965673Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"analysis_2\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `~gammapy.datasets.MapDataset.write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:50.996544Z",
     "iopub.status.busy": "2020-09-29T18:07:50.995941Z",
     "iopub.status.idle": "2020-09-29T18:07:51.194886Z",
     "shell.execute_reply": "2020-09-29T18:07:51.194355Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "stacked.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the model\n",
    "We first define the model, a `SkyModel`, as the combination of a point source `SpatialModel` with a powerlaw `SpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:51.213294Z",
     "iopub.status.busy": "2020-09-29T18:07:51.206804Z",
     "iopub.status.idle": "2020-09-29T18:07:51.231729Z",
     "shell.execute_reply": "2020-09-29T18:07:51.231191Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "spatial_model = PointSpatialModel(\n",
    "    lon_0=target_position.ra, lat_0=target_position.dec, frame=\"icrs\"\n",
    ")\n",
    "\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2.702,\n",
    "    amplitude=4.712e-11 * u.Unit(\"1 / (cm2 s TeV)\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model, spectral_model=spectral_model, name=\"crab\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we assign this model to our reduced dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:51.236997Z",
     "iopub.status.busy": "2020-09-29T18:07:51.235594Z",
     "iopub.status.idle": "2020-09-29T18:07:51.237556Z",
     "shell.execute_reply": "2020-09-29T18:07:51.238122Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked.models.append(sky_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the model\n",
    "\n",
    "The `~gammapy.modeling.Fit` class is orchestrating the fit, connecting the `stats` method of the dataset to the minimizer. By default, it uses `iminuit`.\n",
    "\n",
    "Its contructor takes a list of dataset as argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:51.251841Z",
     "iopub.status.busy": "2020-09-29T18:07:51.250125Z",
     "iopub.status.idle": "2020-09-29T18:07:55.153990Z",
     "shell.execute_reply": "2020-09-29T18:07:55.154568Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "┌──────────────────────────────────┬──────────────────────────────────────┐\n",
      "│ FCN = 1.624e+04                  │       Ncalls = 143 (143 total)       │\n",
      "│ EDM = 4.27e-06 (Goal: 0.0002)    │               up = 1.0               │\n",
      "├───────────────┬──────────────────┼──────────────────────────────────────┤\n",
      "│ Valid Minimum │ Valid Parameters │        No Parameters at limit        │\n",
      "├───────────────┴──────────────────┼──────────────────────────────────────┤\n",
      "│ Below EDM threshold (goal x 10)  │           Below call limit           │\n",
      "├───────────────┬──────────────────┼───────────┬─────────────┬────────────┤\n",
      "│   Hesse ok    │  Has Covariance  │ Accurate  │  Pos. def.  │ Not forced │\n",
      "└───────────────┴──────────────────┴───────────┴─────────────┴────────────┘\n",
      "CPU times: user 3.85 s, sys: 63.3 ms, total: 3.91 s\n",
      "Wall time: 3.91 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit([stacked])\n",
    "result = fit.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `FitResult` contains information on the fitted parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:55.166885Z",
     "iopub.status.busy": "2020-09-29T18:07:55.166044Z",
     "iopub.status.idle": "2020-09-29T18:07:55.169135Z",
     "shell.execute_reply": "2020-09-29T18:07:55.169724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=8</i>\n",
       "<table id=\"table140103990153168\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>norm</td><td>9.351e-01</td><td></td><td>nan</td><td>nan</td><td>False</td><td>2.192e-02</td></tr>\n",
       "<tr><td>tilt</td><td>0.000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>index</td><td>2.600e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>1.004e-01</td></tr>\n",
       "<tr><td>amplitude</td><td>4.587e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>3.702e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>lon_0</td><td>8.362e+01</td><td>deg</td><td>nan</td><td>nan</td><td>False</td><td>3.127e-03</td></tr>\n",
       "<tr><td>lat_0</td><td>2.202e+01</td><td>deg</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td>2.973e-03</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=8>\n",
       "   name     value        unit         min        max    frozen   error  \n",
       "   str9    float64      str14       float64    float64   bool   float64 \n",
       "--------- --------- -------------- ---------- --------- ------ ---------\n",
       "     norm 9.351e-01                       nan       nan  False 2.192e-02\n",
       "     tilt 0.000e+00                       nan       nan   True 0.000e+00\n",
       "reference 1.000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    index 2.600e+00                       nan       nan  False 1.004e-01\n",
       "amplitude 4.587e-11 cm-2 s-1 TeV-1        nan       nan  False 3.702e-12\n",
       "reference 1.000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    lon_0 8.362e+01            deg        nan       nan  False 3.127e-03\n",
       "    lat_0 2.202e+01            deg -9.000e+01 9.000e+01  False 2.973e-03"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspecting residuals\n",
    "\n",
    "For any fit it is usefull to inspect the residual images. We have a few option on the dataset object to handle this. First we can use `.plot_residuals()` to plot a residual image, summed over all energies: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:55.174956Z",
     "iopub.status.busy": "2020-09-29T18:07:55.174375Z",
     "iopub.status.idle": "2020-09-29T18:07:55.523948Z",
     "shell.execute_reply": "2020-09-29T18:07:55.523419Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>, None)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition we can aslo specify a region in the map to show the spectral residuals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:55.530516Z",
     "iopub.status.busy": "2020-09-29T18:07:55.529728Z",
     "iopub.status.idle": "2020-09-29T18:07:55.533795Z",
     "shell.execute_reply": "2020-09-29T18:07:55.533282Z"
    }
   },
   "outputs": [],
   "source": [
    "region = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.5 * u.deg\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:55.542397Z",
     "iopub.status.busy": "2020-09-29T18:07:55.541658Z",
     "iopub.status.idle": "2020-09-29T18:07:56.285948Z",
     "shell.execute_reply": "2020-09-29T18:07:56.285332Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " <AxesSubplot:xlabel='Energy [TeV]', ylabel='Residuals ((data - model) / sqrt(model))'>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals(\n",
    "    region=region, method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also directly access the `.residuals()` to get a map, that we can plot interactively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:56.294250Z",
     "iopub.status.busy": "2020-09-29T18:07:56.289991Z",
     "iopub.status.idle": "2020-09-29T18:07:56.725882Z",
     "shell.execute_reply": "2020-09-29T18:07:56.726455Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ceb7bff0b6e64083a2f5aee3a90d7663",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "residuals = stacked.residuals(method=\"diff\")\n",
    "residuals.smooth(\"0.08 deg\").plot_interactive(\n",
    "    cmap=\"coolwarm\", vmin=-0.1, vmax=0.1, stretch=\"linear\", add_cbar=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the fitted spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making a butterfly plot \n",
    "\n",
    "The `SpectralModel` component can be used to produce a, so-called, butterfly plot showing the enveloppe of the model taking into account parameter uncertainties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:56.735949Z",
     "iopub.status.busy": "2020-09-29T18:07:56.734762Z",
     "iopub.status.idle": "2020-09-29T18:07:56.736504Z",
     "shell.execute_reply": "2020-09-29T18:07:56.737057Z"
    }
   },
   "outputs": [],
   "source": [
    "spec = sky_model.spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can actually do the plot using the `plot_error` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:56.758369Z",
     "iopub.status.busy": "2020-09-29T18:07:56.757428Z",
     "iopub.status.idle": "2020-09-29T18:07:57.379969Z",
     "shell.execute_reply": "2020-09-29T18:07:57.379153Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:329: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:330: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "spec.plot(energy_range=energy_range, energy_power=2)\n",
    "ax = spec.plot_error(energy_range=energy_range, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Computing flux points\n",
    "\n",
    "We can now compute some flux points using the `~gammapy.estimators.FluxPointsEstimator`. \n",
    "\n",
    "Besides the list of datasets to use, we must provide it the energy intervals on which to compute flux points as well as the model component name. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:57.384184Z",
     "iopub.status.busy": "2020-09-29T18:07:57.383627Z",
     "iopub.status.idle": "2020-09-29T18:07:57.387619Z",
     "shell.execute_reply": "2020-09-29T18:07:57.387129Z"
    }
   },
   "outputs": [],
   "source": [
    "e_edges = [1, 2, 4, 10] * u.TeV\n",
    "fpe = FluxPointsEstimator(e_edges=e_edges, source=\"crab\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:57.392552Z",
     "iopub.status.busy": "2020-09-29T18:07:57.391989Z",
     "iopub.status.idle": "2020-09-29T18:07:59.424341Z",
     "shell.execute_reply": "2020-09-29T18:07:59.423727Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2 s, sys: 27.9 ms, total: 2.03 s\n",
      "Wall time: 2.03 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "flux_points = fpe.run(datasets=[stacked])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-29T18:07:59.443996Z",
     "iopub.status.busy": "2020-09-29T18:07:59.443401Z",
     "iopub.status.idle": "2020-09-29T18:07:59.981350Z",
     "shell.execute_reply": "2020-09-29T18:07:59.980630Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:329: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:330: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:669: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy (TeV)', ylabel='dnde (TeV / (cm2 s))'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = spec.plot_error(energy_range=energy_range, energy_power=2)\n",
    "flux_points.plot(ax=ax, energy_power=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "21b0aee4981241ba9cd86ec0e7901d05": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "5fbb96470102405ab3056a8d122740f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "644c2f52807444a8a25a8a9da7a099be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_f3c1cc5c9d8a4923bbc178e91f8e2430",
       "style": "IPY_MODEL_cd5c7f8ee156404e805dfd24a0a6bceb"
      }
     },
     "69fd0b8c15b44ad4b5239529cc126b8b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e+00 TeV - 1.78e+00 TeV TeV",
        "1.78e+00 TeV - 3.16e+00 TeV TeV",
        "3.16e+00 TeV - 5.62e+00 TeV TeV",
        "5.62e+00 TeV - 1.00e+01 TeV TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_21b0aee4981241ba9cd86ec0e7901d05",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_a19488d9938c4561abd012c460c542e3"
      }
     },
     "a19488d9938c4561abd012c460c542e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "cd5c7f8ee156404e805dfd24a0a6bceb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "ceb7bff0b6e64083a2f5aee3a90d7663": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_69fd0b8c15b44ad4b5239529cc126b8b",
        "IPY_MODEL_644c2f52807444a8a25a8a9da7a099be",
        "IPY_MODEL_e203383fcd5941f5832db38b0cf1436a"
       ],
       "layout": "IPY_MODEL_5fbb96470102405ab3056a8d122740f5"
      }
     },
     "d379baa61b9b40f0804f96fcb6c91c99": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e203383fcd5941f5832db38b0cf1436a": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_d379baa61b9b40f0804f96fcb6c91c99",
       "msg_id": "",
       "outputs": [
        {
         "name": "stderr",
         "output_type": "stream",
         "text": "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n  return super().imshow(X, *args, origin=origin, **kwargs)\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 2 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "f3c1cc5c9d8a4923bbc178e91f8e2430": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
