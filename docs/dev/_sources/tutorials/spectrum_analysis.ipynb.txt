{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/spectrum_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_analysis.ipynb](../_static/notebooks/spectrum_analysis.ipynb) |\n",
    "[spectrum_analysis.py](../_static/notebooks/spectrum_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prerequisites \n",
    "\n",
    "- Understanding how spectral extraction is performed in Cherenkov astronomy, in particular regarding OFF background measurements. \n",
    "- Understanding the basics data reduction and modeling/fitting process with the gammapy library API as shown in the [first gammapy analysis with the gammapy library API tutorial](analysis_2.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "While 3D analysis allows in principle to deal with complex situations such as overlapping sources, in many cases, it is not required to extract the spectrum of a source. Spectral analysis, where all data inside a ON region are binned into 1D datasets, provides a nice alternative. \n",
    "\n",
    "In classical Cherenkov astronomy, it is used with a specific background estimation technique that relies on OFF measurements taken in the field-of-view in regions where the background\n",
    "rate is assumed to be equal to the one in the ON region. \n",
    "\n",
    "This allows to use a specific fit statistics for ON-OFF measurements, the wstat (see `~gammapy.stats.fit_statistics`), where no background model is assumed. Background is treated as a set of nuisance parameters. This removes some systematic effects connected\n",
    "to the choice or the quality of the background model. But this comes at the expense of larger statistical uncertainties on the fitted model parameters.\n",
    "\n",
    "**Objective: perform a full region based spectral analysis of 4 Crab observations of  H.E.S.S. data release 1 and fit the resulting datasets.**\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Here, as usual, we use the `~gammapy.data.DataStore` to retrieve a list of selected observations (`~gammapy.data.Observations`). Then, we define the ON region containing the source and the geometry of the `~gammapy.datasets.SpectrumDataset` object we want to produce. We then create the corresponding dataset Maker. \n",
    "\n",
    "We have to define the Maker object that will extract the OFF counts from reflected regions in the field-of-view. To ensure we use data in an energy range where the quality of the IRFs is good enough we also create a safe range Maker.\n",
    "\n",
    "We can then proceed with data reduction with a loop over all selected observations to produce datasets in the relevant geometry.\n",
    "\n",
    "We can then explore the resulting datasets and look at the cumulative signal and significance of our source. We finally proceed with model fitting. \n",
    "\n",
    "In practice, we have to:\n",
    "- Create a `~gammapy.data.DataStore` poiting to the relevant data \n",
    "- Apply an observation selection to produce a list of observations, a `~gammapy.data.Observations` object.\n",
    "- Define a geometry of the spectrum we want to produce:\n",
    "    - Create a `~regions.CircleSkyRegion` for the ON extraction region\n",
    "    - Create a `~gammapy.maps.MapAxis` for the energy binnings: one for the reconstructed (i.e. measured) energy, the other for the true energy (i.e. the one used by IRFs and models)\n",
    "- Create the necessary makers : \n",
    "    - the spectrum dataset maker : `~gammapy.makers.SpectrumDatasetMaker`\n",
    "    - the OFF background maker, here a `~gammapy.makers.ReflectedRegionsBackgroundMaker`\n",
    "    - and the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Apply the makers sequentially to produce a `~gammapy.datasets.SpectrumDatasetOnOff`\n",
    "    - Append it to list of datasets\n",
    "- Define the `~gammapy.modeling.models.SkyModel` to apply to the dataset.\n",
    "- Create a `~gammapy.modeling.Fit` object and run it to fit the model parameters\n",
    "- Apply a `~gammapy.estimators.FluxPointsEstimator` to compute flux points for the spectral part of the fit.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:00.087323Z",
     "iopub.status.busy": "2020-12-14T10:52:00.086835Z",
     "iopub.status.idle": "2020-12-14T10:52:00.333176Z",
     "shell.execute_reply": "2020-12-14T10:52:00.333672Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:00.338806Z",
     "iopub.status.busy": "2020-12-14T10:52:00.337479Z",
     "iopub.status.idle": "2020-12-14T10:52:00.815176Z",
     "shell.execute_reply": "2020-12-14T10:52:00.815546Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gammapy: 0.18.3.dev181+gb59258698\n",
      "numpy: 1.19.4\n",
      "astropy 4.2\n",
      "regions 0.4\n"
     ]
    }
   ],
   "source": [
    "# Check package versions\n",
    "import gammapy\n",
    "import numpy as np\n",
    "import astropy\n",
    "import regions\n",
    "\n",
    "print(\"gammapy:\", gammapy.__version__)\n",
    "print(\"numpy:\", np.__version__)\n",
    "print(\"astropy\", astropy.__version__)\n",
    "print(\"regions\", regions.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:00.820804Z",
     "iopub.status.busy": "2020-12-14T10:52:00.820092Z",
     "iopub.status.idle": "2020-12-14T10:52:01.223394Z",
     "shell.execute_reply": "2020-12-14T10:52:01.223808Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.maps import Map, MapAxis, RegionGeom\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import (\n",
    "    Datasets,\n",
    "    SpectrumDataset,\n",
    "    SpectrumDatasetOnOff,\n",
    "    FluxPointsDataset,\n",
    ")\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    create_crab_spectral_model,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    SpectrumDatasetMaker,\n",
    "    ReflectedRegionsBackgroundMaker,\n",
    ")\n",
    "from gammapy.estimators import FluxPointsEstimator\n",
    "from gammapy.visualization import plot_spectrum_datasets_off_regions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data\n",
    "\n",
    "First, we select and load some H.E.S.S. observations of the Crab nebula (simulated events for now).\n",
    "\n",
    "We will access the events, effective area, energy dispersion, livetime and PSF for containement correction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:01.227730Z",
     "iopub.status.busy": "2020-12-14T10:52:01.227284Z",
     "iopub.status.idle": "2020-12-14T10:52:01.266638Z",
     "shell.execute_reply": "2020-12-14T10:52:01.266196Z"
    }
   },
   "outputs": [],
   "source": [
    "datastore = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "obs_ids = [23523, 23526, 23559, 23592]\n",
    "observations = datastore.get_observations(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Target Region\n",
    "\n",
    "The next step is to define a signal extraction region, also known as on region. In the simplest case this is just a [CircleSkyRegion](http://astropy-regions.readthedocs.io/en/latest/api/regions.CircleSkyRegion.html), but here we will use the ``Target`` class in gammapy that is useful for book-keeping if you run several analysis in a script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:01.271795Z",
     "iopub.status.busy": "2020-12-14T10:52:01.270749Z",
     "iopub.status.idle": "2020-12-14T10:52:01.272289Z",
     "shell.execute_reply": "2020-12-14T10:52:01.272767Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63, dec=22.01, unit=\"deg\", frame=\"icrs\")\n",
    "on_region_radius = Angle(\"0.11 deg\")\n",
    "on_region = CircleSkyRegion(center=target_position, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create exclusion mask\n",
    "\n",
    "We will use the reflected regions method to place off regions to estimate the background level in the on region.\n",
    "To make sure the off regions don't contain gamma-ray emission, we create an exclusion mask.\n",
    "\n",
    "Using http://gamma-sky.net/ we find that there's only one known gamma-ray source near the Crab nebula: the AGN called [RGB J0521+212](http://gamma-sky.net/#/cat/tev/23) at GLON = 183.604 deg and GLAT = -8.708 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:01.283761Z",
     "iopub.status.busy": "2020-12-14T10:52:01.283305Z",
     "iopub.status.idle": "2020-12-14T10:52:01.660835Z",
     "shell.execute_reply": "2020-12-14T10:52:01.661193Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 432x288 with 1 Axes>,\n",
       " <WCSAxesSubplot:xlabel='Right Ascension', ylabel='Declination'>,\n",
       " None)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "exclusion_region = CircleSkyRegion(\n",
    "    center=SkyCoord(183.604, -8.708, unit=\"deg\", frame=\"galactic\"),\n",
    "    radius=0.5 * u.deg,\n",
    ")\n",
    "\n",
    "skydir = target_position.galactic\n",
    "exclusion_mask = Map.create(\n",
    "    npix=(150, 150), binsz=0.05, skydir=skydir, proj=\"TAN\", frame=\"icrs\"\n",
    ")\n",
    "\n",
    "mask = exclusion_mask.geom.region_mask([exclusion_region], inside=False)\n",
    "exclusion_mask.data = mask.data\n",
    "exclusion_mask.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run data reduction chain\n",
    "\n",
    "We begin with the configuration of the maker classes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:01.666876Z",
     "iopub.status.busy": "2020-12-14T10:52:01.665213Z",
     "iopub.status.idle": "2020-12-14T10:52:01.674967Z",
     "shell.execute_reply": "2020-12-14T10:52:01.675387Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(\n",
    "    0.1, 40, 40, unit=\"TeV\", name=\"energy\"\n",
    ")\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.05, 100, 200, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "\n",
    "geom = RegionGeom.create(region=on_region, axes=[energy_axis])\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:01.677320Z",
     "iopub.status.busy": "2020-12-14T10:52:01.676899Z",
     "iopub.status.idle": "2020-12-14T10:52:01.680101Z",
     "shell.execute_reply": "2020-12-14T10:52:01.680520Z"
    }
   },
   "outputs": [],
   "source": [
    "dataset_maker = SpectrumDatasetMaker(\n",
    "    containment_correction=False, selection=[\"counts\", \"exposure\", \"edisp\"]\n",
    ")\n",
    "bkg_maker = ReflectedRegionsBackgroundMaker(exclusion_mask=exclusion_mask)\n",
    "safe_mask_masker = SafeMaskMaker(methods=[\"aeff-max\"], aeff_percent=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:01.682414Z",
     "iopub.status.busy": "2020-12-14T10:52:01.681997Z",
     "iopub.status.idle": "2020-12-14T10:52:04.876247Z",
     "shell.execute_reply": "2020-12-14T10:52:04.876608Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.1 s, sys: 100 ms, total: 3.2 s\n",
      "Wall time: 3.19 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "datasets = Datasets()\n",
    "\n",
    "for obs_id, observation in zip(obs_ids, observations):\n",
    "    dataset = dataset_maker.run(\n",
    "        dataset_empty.copy(name=str(obs_id)), observation\n",
    "    )\n",
    "    dataset_on_off = bkg_maker.run(dataset, observation)\n",
    "    dataset_on_off = safe_mask_masker.run(dataset_on_off, observation)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot off regions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:04.897569Z",
     "iopub.status.busy": "2020-12-14T10:52:04.885163Z",
     "iopub.status.idle": "2020-12-14T10:52:05.421141Z",
     "shell.execute_reply": "2020-12-14T10:52:05.421626Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 8))\n",
    "_, ax, _ = exclusion_mask.plot()\n",
    "on_region.to_pixel(ax.wcs).plot(ax=ax, edgecolor=\"k\")\n",
    "plot_spectrum_datasets_off_regions(ax=ax, datasets=datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Source statistic\n",
    "\n",
    "Next we're going to look at the overall source statistics in our signal region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:05.423843Z",
     "iopub.status.busy": "2020-12-14T10:52:05.423400Z",
     "iopub.status.idle": "2020-12-14T10:52:05.627885Z",
     "shell.execute_reply": "2020-12-14T10:52:05.627081Z"
    }
   },
   "outputs": [],
   "source": [
    "info_table = datasets.info_table(cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:05.634701Z",
     "iopub.status.busy": "2020-12-14T10:52:05.634232Z",
     "iopub.status.idle": "2020-12-14T10:52:05.636409Z",
     "shell.execute_reply": "2020-12-14T10:52:05.636836Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=4</i>\n",
       "<table id=\"table140038163969864\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>counts</th><th>background</th><th>excess</th><th>sqrt_ts</th><th>npred</th><th>npred_background</th><th>npred_signal</th><th>exposure_min</th><th>exposure_max</th><th>livetime</th><th>ontime</th><th>counts_rate</th><th>background_rate</th><th>excess_rate</th><th>n_bins</th><th>n_fit_bins</th><th>stat_type</th><th>stat_sum</th><th>counts_off</th><th>acceptance</th><th>acceptance_off</th><th>alpha</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>m2 s</th><th>m2 s</th><th>s</th><th>s</th><th>1 / s</th><th>1 / s</th><th>1 / s</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>str5</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>int64</th><th>str5</th><th>float64</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>23523</td><td>177.0</td><td>14.916666666666666</td><td>162.08333333333334</td><td>21.050838590041725</td><td>27.384615384615387</td><td>27.384615384615387</td><td>nan</td><td>1808360.59208519</td><td>1099528528.5914836</td><td>1581.7367584109306</td><td>1687.0</td><td>0.11190231184727636</td><td>0.00943056206245879</td><td>0.10247174978481759</td><td>40</td><td>28</td><td>wstat</td><td>485.0079493226156</td><td>179.0</td><td>28.0</td><td>336.0</td><td>0.08333333333333336</td></tr>\n",
       "<tr><td>23523</td><td>353.0</td><td>31.249999291367057</td><td>321.75000070863297</td><td>29.36543771325455</td><td>55.99999890524969</td><td>55.99999890524969</td><td>nan</td><td>7707104.953775072</td><td>2036737418.8943977</td><td>3154.4234824180603</td><td>3370.0</td><td>0.11190634420759628</td><td>0.009906722881549184</td><td>0.1019996213260471</td><td>40</td><td>29</td><td>wstat</td><td>903.6963410710002</td><td>375.0</td><td>29.0</td><td>348.0000078913366</td><td>0.08333333264822256</td></tr>\n",
       "<tr><td>23523</td><td>503.0</td><td>41.884146156955254</td><td>461.11585384304476</td><td>36.94259908645267</td><td>65.53241880504787</td><td>65.53241880504787</td><td>nan</td><td>11107774.944855023</td><td>2786019506.4521184</td><td>4732.546999931335</td><td>5056.0</td><td>0.10628526246169305</td><td>0.008850233533351692</td><td>0.09743502892834136</td><td>40</td><td>29</td><td>wstat</td><td>1425.844981425621</td><td>811.0</td><td>29.0</td><td>561.5251152993709</td><td>0.05006259034146479</td></tr>\n",
       "<tr><td>23523</td><td>632.0</td><td>53.38414629002395</td><td>578.615853709976</td><td>41.679007680191155</td><td>77.98236443084781</td><td>77.98236443084781</td><td>nan</td><td>12189605.052072244</td><td>3625950388.293474</td><td>6313.811640620232</td><td>6742.0</td><td>0.1000980130503095</td><td>0.008455137613953242</td><td>0.09164287543635626</td><td>40</td><td>29</td><td>wstat</td><td>1826.8050407703877</td><td>1225.0</td><td>29.0</td><td>665.4597379341938</td><td>0.04139557204910722</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       " name  counts     background     ...   acceptance_off         alpha       \n",
       "                                 ...                                      \n",
       " str5 float32      float64       ...      float64            float64      \n",
       "----- ------- ------------------ ... ----------------- -------------------\n",
       "23523   177.0 14.916666666666666 ...             336.0 0.08333333333333336\n",
       "23523   353.0 31.249999291367057 ... 348.0000078913366 0.08333333264822256\n",
       "23523   503.0 41.884146156955254 ... 561.5251152993709 0.05006259034146479\n",
       "23523   632.0  53.38414629002395 ... 665.4597379341938 0.04139557204910722"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:05.656464Z",
     "iopub.status.busy": "2020-12-14T10:52:05.655798Z",
     "iopub.status.idle": "2020-12-14T10:52:05.743913Z",
     "shell.execute_reply": "2020-12-14T10:52:05.743452Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Excess')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"), info_table[\"excess\"], marker=\"o\", ls=\"none\"\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Excess\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:05.762994Z",
     "iopub.status.busy": "2020-12-14T10:52:05.762553Z",
     "iopub.status.idle": "2020-12-14T10:52:05.850264Z",
     "shell.execute_reply": "2020-12-14T10:52:05.849858Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sqrt(TS)')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"),\n",
    "    info_table[\"sqrt_ts\"],\n",
    "    marker=\"o\",\n",
    "    ls=\"none\",\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Sqrt(TS)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally you can write the extrated datasets to disk using the OGIP format (PHA, ARF, RMF, BKG, see [here](https://gamma-astro-data-formats.readthedocs.io/en/latest/spectra/ogip/index.html) for details):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:05.853331Z",
     "iopub.status.busy": "2020-12-14T10:52:05.852912Z",
     "iopub.status.idle": "2020-12-14T10:52:05.856248Z",
     "shell.execute_reply": "2020-12-14T10:52:05.855867Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"spectrum_analysis\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:05.868931Z",
     "iopub.status.busy": "2020-12-14T10:52:05.861911Z",
     "iopub.status.idle": "2020-12-14T10:52:06.518853Z",
     "shell.execute_reply": "2020-12-14T10:52:06.518364Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
      "  return array(a, dtype, copy=False, order=order)\n"
     ]
    }
   ],
   "source": [
    "for dataset in datasets:\n",
    "    dataset.write(\n",
    "        filename=path / f\"obs_{dataset.name}.fits.gz\", overwrite=True\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to read back the datasets from disk you can use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:06.524395Z",
     "iopub.status.busy": "2020-12-14T10:52:06.522854Z",
     "iopub.status.idle": "2020-12-14T10:52:07.468594Z",
     "shell.execute_reply": "2020-12-14T10:52:07.468079Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets = Datasets()\n",
    "\n",
    "for obs_id in obs_ids:\n",
    "    filename = path / f\"obs_{obs_id}.fits.gz\"\n",
    "    datasets.append(SpectrumDatasetOnOff.read(filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit spectrum\n",
    "\n",
    "Now we'll fit a global model to the spectrum. First we do a joint likelihood fit to all observations. If you want to stack the observations see below. We will also produce a debug plot in order to show how the global fit matches one of the individual observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:07.477878Z",
     "iopub.status.busy": "2020-12-14T10:52:07.477401Z",
     "iopub.status.idle": "2020-12-14T10:52:07.915522Z",
     "shell.execute_reply": "2020-12-14T10:52:07.915030Z"
    }
   },
   "outputs": [],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2, amplitude=2e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"crab\")\n",
    "\n",
    "\n",
    "datasets.models = [model]\n",
    "\n",
    "fit_joint = Fit(datasets)\n",
    "result_joint = fit_joint.run()\n",
    "\n",
    "# we make a copy here to compare it later\n",
    "model_best_joint = model.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit quality and model residuals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can access the results dictionary to see if the fit converged:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:07.920400Z",
     "iopub.status.busy": "2020-12-14T10:52:07.919330Z",
     "iopub.status.idle": "2020-12-14T10:52:07.921564Z",
     "shell.execute_reply": "2020-12-14T10:52:07.921993Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 47\n",
      "\ttotal stat : 124.41\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_joint)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A simple way to inspect the model residuals is using the function `~SpectrumDataset.plot_fit()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:07.958804Z",
     "iopub.status.busy": "2020-12-14T10:52:07.953175Z",
     "iopub.status.idle": "2020-12-14T10:52:08.667064Z",
     "shell.execute_reply": "2020-12-14T10:52:08.666141Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Perform a full region based on-off spectral analysis and fit the resulting datasets."
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 40)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_spectrum, ax_residuals = datasets[0].plot_fit()\n",
    "ax_spectrum.set_ylim(0.1, 40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more ways of assessing fit quality, please refer to the dedicated [modeling and fitting tutorial](modeling.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute Flux Points\n",
    "\n",
    "To round up our analysis we can compute flux points by fitting the norm of the global model in energy bands. We'll use a fixed energy binning for now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:08.671133Z",
     "iopub.status.busy": "2020-12-14T10:52:08.670701Z",
     "iopub.status.idle": "2020-12-14T10:52:08.673568Z",
     "shell.execute_reply": "2020-12-14T10:52:08.673090Z"
    }
   },
   "outputs": [],
   "source": [
    "e_min, e_max = 0.7, 30\n",
    "energy_edges = np.geomspace(e_min, e_max, 11) * u.TeV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create an instance of the `~gammapy.estimators.FluxPointsEstimator`, by passing the dataset and the energy binning:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:08.677827Z",
     "iopub.status.busy": "2020-12-14T10:52:08.677383Z",
     "iopub.status.idle": "2020-12-14T10:52:20.911897Z",
     "shell.execute_reply": "2020-12-14T10:52:20.912291Z"
    }
   },
   "outputs": [],
   "source": [
    "fpe = FluxPointsEstimator(energy_edges=energy_edges, source=\"crab\")\n",
    "flux_points = fpe.run(datasets=datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a the table of the resulting flux points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:20.923236Z",
     "iopub.status.busy": "2020-12-14T10:52:20.922775Z",
     "iopub.status.idle": "2020-12-14T10:52:20.927417Z",
     "shell.execute_reply": "2020-12-14T10:52:20.927014Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=10</i>\n",
       "<table id=\"table140038156482096\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>counts [4]</th><th>e_ref</th><th>e_min</th><th>e_max</th><th>ref_dnde</th><th>ref_flux</th><th>ref_eflux</th><th>ref_e2dnde</th><th>norm</th><th>stat</th><th>success</th><th>norm_err</th><th>ts</th><th>norm_errp</th><th>norm_errn</th><th>norm_ul</th><th>norm_scan [11]</th><th>stat_scan [11]</th><th>sqrt_ts</th><th>dnde</th><th>dnde_ul</th><th>dnde_err</th><th>dnde_errp</th><th>dnde_errn</th></tr></thead>\n",
       "<thead><tr><th></th><th>TeV</th><th>TeV</th><th>TeV</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s)</th><th>TeV / (cm2 s)</th><th>TeV / (cm2 s)</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>61 .. 42</td><td>0.877</td><td>0.701</td><td>1.099</td><td>3.772e-11</td><td>1.519e-11</td><td>1.309e-11</td><td>2.905e-11</td><td>0.966</td><td>16.146</td><td>True</td><td>0.074</td><td>584.992</td><td>0.075</td><td>0.072</td><td>1.121</td><td>0.200 .. 5.000</td><td>248.571 .. 934.424</td><td>24.187</td><td>3.645e-11</td><td>4.227e-11</td><td>2.780e-12</td><td>2.845e-12</td><td>2.715e-12</td></tr>\n",
       "<tr><td>20 .. 25</td><td>1.276</td><td>1.099</td><td>1.482</td><td>1.432e-11</td><td>5.524e-12</td><td>6.992e-12</td><td>2.331e-11</td><td>0.990</td><td>10.939</td><td>True</td><td>0.115</td><td>264.797</td><td>0.120</td><td>0.111</td><td>1.238</td><td>0.200 .. 5.000</td><td>114.916 .. 385.557</td><td>16.273</td><td>1.418e-11</td><td>1.772e-11</td><td>1.651e-12</td><td>1.711e-12</td><td>1.592e-12</td></tr>\n",
       "<tr><td>36 .. 20</td><td>1.856</td><td>1.482</td><td>2.323</td><td>5.432e-12</td><td>4.626e-12</td><td>8.430e-12</td><td>1.871e-11</td><td>1.213</td><td>7.844</td><td>True</td><td>0.125</td><td>350.376</td><td>0.129</td><td>0.121</td><td>1.478</td><td>0.200 .. 5.000</td><td>167.003 .. 342.942</td><td>18.718</td><td>6.587e-12</td><td>8.029e-12</td><td>6.768e-13</td><td>6.988e-13</td><td>6.551e-13</td></tr>\n",
       "<tr><td>11 .. 12</td><td>2.699</td><td>2.323</td><td>3.135</td><td>2.061e-12</td><td>1.682e-12</td><td>4.503e-12</td><td>1.501e-11</td><td>1.195</td><td>9.790</td><td>True</td><td>0.183</td><td>157.668</td><td>0.192</td><td>0.174</td><td>1.596</td><td>0.200 .. 5.000</td><td>80.721 .. 165.447</td><td>12.557</td><td>2.464e-12</td><td>3.291e-12</td><td>3.765e-13</td><td>3.948e-13</td><td>3.587e-13</td></tr>\n",
       "<tr><td>14 .. 8</td><td>3.924</td><td>3.135</td><td>4.913</td><td>7.823e-13</td><td>1.409e-12</td><td>5.429e-12</td><td>1.205e-11</td><td>0.861</td><td>22.656</td><td>True</td><td>0.158</td><td>92.915</td><td>0.167</td><td>0.150</td><td>1.214</td><td>0.200 .. 5.000</td><td>57.809 .. 214.137</td><td>9.639</td><td>6.736e-13</td><td>9.499e-13</td><td>1.239e-13</td><td>1.310e-13</td><td>1.171e-13</td></tr>\n",
       "<tr><td>7 .. 4</td><td>5.707</td><td>4.913</td><td>6.629</td><td>2.968e-13</td><td>5.123e-13</td><td>2.900e-12</td><td>9.667e-12</td><td>1.111</td><td>6.505</td><td>True</td><td>0.275</td><td>63.182</td><td>0.296</td><td>0.253</td><td>1.749</td><td>0.200 .. 5.000</td><td>32.826 .. 73.940</td><td>7.949</td><td>3.298e-13</td><td>5.193e-13</td><td>8.148e-14</td><td>8.801e-14</td><td>7.523e-14</td></tr>\n",
       "<tr><td>5 .. 5</td><td>8.299</td><td>6.629</td><td>10.390</td><td>1.126e-13</td><td>4.290e-13</td><td>3.496e-12</td><td>7.758e-12</td><td>1.107</td><td>14.176</td><td>True</td><td>0.294</td><td>44.347</td><td>0.318</td><td>0.271</td><td>1.793</td><td>0.200 .. 5.000</td><td>34.899 .. 74.713</td><td>6.659</td><td>1.248e-13</td><td>2.020e-13</td><td>3.309e-14</td><td>3.580e-14</td><td>3.050e-14</td></tr>\n",
       "<tr><td>0 .. 0</td><td>12.068</td><td>10.390</td><td>14.018</td><td>4.275e-14</td><td>1.560e-13</td><td>1.867e-12</td><td>6.226e-12</td><td>0.771</td><td>11.511</td><td>True</td><td>0.413</td><td>8.495</td><td>0.476</td><td>0.355</td><td>1.858</td><td>0.200 .. 5.000</td><td>14.893 .. 40.219</td><td>2.915</td><td>3.298e-14</td><td>7.943e-14</td><td>1.766e-14</td><td>2.036e-14</td><td>1.517e-14</td></tr>\n",
       "<tr><td>1 .. 0</td><td>17.550</td><td>14.018</td><td>21.971</td><td>1.622e-14</td><td>1.307e-13</td><td>2.252e-12</td><td>4.996e-12</td><td>0.424</td><td>7.712</td><td>True</td><td>0.300</td><td>3.175</td><td>0.374</td><td>0.234</td><td>1.333</td><td>0.200 .. 5.000</td><td>8.603 .. 41.037</td><td>1.782</td><td>6.873e-15</td><td>2.163e-14</td><td>4.860e-15</td><td>6.068e-15</td><td>3.794e-15</td></tr>\n",
       "<tr><td>0 .. 0</td><td>25.521</td><td>21.971</td><td>29.645</td><td>6.156e-15</td><td>4.751e-14</td><td>1.203e-12</td><td>4.009e-12</td><td>-0.000</td><td>0.524</td><td>False</td><td>0.031</td><td>-0.000</td><td>0.001</td><td>0.001</td><td>1.124</td><td>0.200 .. 5.000</td><td>1.235 .. 18.312</td><td>nan</td><td>-2.687e-25</td><td>6.921e-15</td><td>1.935e-16</td><td>3.430e-18</td><td>3.430e-18</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=10>\n",
       "counts [4]  e_ref   e_min  ...     dnde_err       dnde_errp       dnde_errn   \n",
       "             TeV     TeV   ... 1 / (cm2 s TeV) 1 / (cm2 s TeV) 1 / (cm2 s TeV)\n",
       "  int64    float64 float64 ...     float64         float64         float64    \n",
       "---------- ------- ------- ... --------------- --------------- ---------------\n",
       "  61 .. 42   0.877   0.701 ...       2.780e-12       2.845e-12       2.715e-12\n",
       "  20 .. 25   1.276   1.099 ...       1.651e-12       1.711e-12       1.592e-12\n",
       "  36 .. 20   1.856   1.482 ...       6.768e-13       6.988e-13       6.551e-13\n",
       "  11 .. 12   2.699   2.323 ...       3.765e-13       3.948e-13       3.587e-13\n",
       "   14 .. 8   3.924   3.135 ...       1.239e-13       1.310e-13       1.171e-13\n",
       "    7 .. 4   5.707   4.913 ...       8.148e-14       8.801e-14       7.523e-14\n",
       "    5 .. 5   8.299   6.629 ...       3.309e-14       3.580e-14       3.050e-14\n",
       "    0 .. 0  12.068  10.390 ...       1.766e-14       2.036e-14       1.517e-14\n",
       "    1 .. 0  17.550  14.018 ...       4.860e-15       6.068e-15       3.794e-15\n",
       "    0 .. 0  25.521  21.971 ...       1.935e-16       3.430e-18       3.430e-18"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flux_points.table_formatted"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we plot the flux points and their likelihood profiles. For the plotting of upper limits we choose a threshold of TS < 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:20.949005Z",
     "iopub.status.busy": "2020-12-14T10:52:20.931724Z",
     "iopub.status.idle": "2020-12-14T10:52:21.517511Z",
     "shell.execute_reply": "2020-12-14T10:52:21.517002Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:667: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:742: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n",
      "  caxes = ax.pcolormesh(x.value, y_values.value, -z.T, **kwargs)\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:743: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:744: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy (TeV)', ylabel='e2dnde (erg / (cm2 s))'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 4\n",
    "ax = flux_points.plot(\n",
    "    energy_power=2, flux_unit=\"erg-1 cm-2 s-1\", color=\"darkorange\"\n",
    ")\n",
    "flux_points.to_sed_type(\"e2dnde\").plot_ts_profiles(ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final plot with the best fit model, flux points and residuals can be quickly made like this: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:21.521323Z",
     "iopub.status.busy": "2020-12-14T10:52:21.520882Z",
     "iopub.status.idle": "2020-12-14T10:52:21.523501Z",
     "shell.execute_reply": "2020-12-14T10:52:21.523850Z"
    }
   },
   "outputs": [],
   "source": [
    "flux_points_dataset = FluxPointsDataset(\n",
    "    data=flux_points, models=model_best_joint\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:21.564138Z",
     "iopub.status.busy": "2020-12-14T10:52:21.556864Z",
     "iopub.status.idle": "2020-12-14T10:52:22.071681Z",
     "shell.execute_reply": "2020-12-14T10:52:22.072049Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:401: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:402: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<AxesSubplot:ylabel='E2 * Flux [erg / (cm2 s)]'>,\n",
       " <AxesSubplot:xlabel='Energy [TeV]', ylabel='Residuals\\n(data - model) / model'>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flux_points_dataset.plot_fit();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stack observations\n",
    "\n",
    "And alternative approach to fitting the spectrum is stacking all observations first and the fitting a model. For this we first stack the individual datasets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:22.100948Z",
     "iopub.status.busy": "2020-12-14T10:52:22.081199Z",
     "iopub.status.idle": "2020-12-14T10:52:22.205529Z",
     "shell.execute_reply": "2020-12-14T10:52:22.204997Z"
    }
   },
   "outputs": [],
   "source": [
    "dataset_stacked = Datasets(datasets).stack_reduce()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again we set the model on the dataset we would like to fit (in this case it's only a single one) and pass it to the `~gammapy.modeling.Fit` object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:22.212179Z",
     "iopub.status.busy": "2020-12-14T10:52:22.210798Z",
     "iopub.status.idle": "2020-12-14T10:52:22.288390Z",
     "shell.execute_reply": "2020-12-14T10:52:22.287861Z"
    }
   },
   "outputs": [],
   "source": [
    "dataset_stacked.models = model\n",
    "stacked_fit = Fit([dataset_stacked])\n",
    "result_stacked = stacked_fit.run()\n",
    "\n",
    "# make a copy to compare later\n",
    "model_best_stacked = model.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:22.291662Z",
     "iopub.status.busy": "2020-12-14T10:52:22.291227Z",
     "iopub.status.idle": "2020-12-14T10:52:22.295056Z",
     "shell.execute_reply": "2020-12-14T10:52:22.294670Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 31\n",
      "\ttotal stat : 29.88\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_stacked)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:22.300493Z",
     "iopub.status.busy": "2020-12-14T10:52:22.300067Z",
     "iopub.status.idle": "2020-12-14T10:52:22.304337Z",
     "shell.execute_reply": "2020-12-14T10:52:22.303874Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=3</i>\n",
       "<table id=\"table140038172524048\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>index</td><td>2.5876e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>5.867e-02</td></tr>\n",
       "<tr><td>amplitude</td><td>2.6900e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>1.234e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=3>\n",
       "   name     value         unit        min     max   frozen   error  \n",
       "   str9    float64       str14      float64 float64  bool   float64 \n",
       "--------- ---------- -------------- ------- ------- ------ ---------\n",
       "    index 2.5876e+00                    nan     nan  False 5.867e-02\n",
       "amplitude 2.6900e-11 cm-2 s-1 TeV-1     nan     nan  False 1.234e-12\n",
       "reference 1.0000e+00            TeV     nan     nan   True 0.000e+00"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_best_joint.parameters.to_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:22.309454Z",
     "iopub.status.busy": "2020-12-14T10:52:22.309015Z",
     "iopub.status.idle": "2020-12-14T10:52:22.313179Z",
     "shell.execute_reply": "2020-12-14T10:52:22.312724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=3</i>\n",
       "<table id=\"table140038163781896\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>index</td><td>2.5912e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>5.881e-02</td></tr>\n",
       "<tr><td>amplitude</td><td>2.6933e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>1.234e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=3>\n",
       "   name     value         unit        min     max   frozen   error  \n",
       "   str9    float64       str14      float64 float64  bool   float64 \n",
       "--------- ---------- -------------- ------- ------- ------ ---------\n",
       "    index 2.5912e+00                    nan     nan  False 5.881e-02\n",
       "amplitude 2.6933e-11 cm-2 s-1 TeV-1     nan     nan  False 1.234e-12\n",
       "reference 1.0000e+00            TeV     nan     nan   True 0.000e+00"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_best_stacked.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we compare the results of our stacked analysis to a previously published Crab Nebula Spectrum for reference. This is available in `~gammapy.modeling.models.create_crab_spectral_model`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-14T10:52:22.342668Z",
     "iopub.status.busy": "2020-12-14T10:52:22.337740Z",
     "iopub.status.idle": "2020-12-14T10:52:22.769771Z",
     "shell.execute_reply": "2020-12-14T10:52:22.769240Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:401: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:402: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:401: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:402: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:401: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:402: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f5d2c67ffd0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_kwargs = {\n",
    "    \"energy_range\": [0.1, 30] * u.TeV,\n",
    "    \"energy_power\": 2,\n",
    "    \"flux_unit\": \"erg-1 cm-2 s-1\",\n",
    "}\n",
    "\n",
    "# plot stacked model\n",
    "model_best_stacked.spectral_model.plot(\n",
    "    **plot_kwargs, label=\"Stacked analysis result\"\n",
    ")\n",
    "model_best_stacked.spectral_model.plot_error(**plot_kwargs)\n",
    "\n",
    "# plot joint model\n",
    "model_best_joint.spectral_model.plot(\n",
    "    **plot_kwargs, label=\"Joint analysis result\", ls=\"--\"\n",
    ")\n",
    "model_best_joint.spectral_model.plot_error(**plot_kwargs)\n",
    "\n",
    "create_crab_spectral_model(\"hess_pl\").plot(\n",
    "    **plot_kwargs, label=\"Crab reference\"\n",
    ")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "Now you have learned the basics of a spectral analysis with Gammapy. To practice you can continue with the following exercises:\n",
    "\n",
    "- Fit a different spectral model to the data.\n",
    "  You could try `~gammapy.modeling.models.ExpCutoffPowerLawSpectralModel` or `~gammapy.modeling.models.LogParabolaSpectralModel`.\n",
    "- Compute flux points for the stacked dataset.\n",
    "- Create a `~gammapy.estimators.FluxPointsDataset` with the flux points you have computed for the stacked dataset and fit the flux points again with obe of the spectral models. How does the result compare to the best fit model, that was directly fitted to the counts data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "The methods shown in this tutorial is valid for point-like or midly extended sources where we can assume that the IRF taken at the region center is valid over the whole region. If one wants to extract the 1D spectrum of a large source and properly average the response over the extraction region, one has to use a different approach explained in [the extended source spectral analysis tutorial](extended_source_spectral_analysis.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
