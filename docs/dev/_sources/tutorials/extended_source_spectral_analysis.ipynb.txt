{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/extended_source_spectral_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[extended_source_spectral_analysis.ipynb](../_static/notebooks/extended_source_spectral_analysis.ipynb) |\n",
    "[extended_source_spectral_analysis.py](../_static/notebooks/extended_source_spectral_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral analysis of extended sources\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding of spectral analysis techniques in classical Cherenkov astronomy.\n",
    "- Understanding of how the spectrum and cube extraction API works, please refer to the [spectrum extraction notebook](spectrum_analysis.ipynb) and to the [3D analysis notebook](analysis_2.ipynb).\n",
    "\n",
    "## Context\n",
    "\n",
    "Many VHE sources in the Galaxy are extended. Studying them with a 1D spectral analysis is more complex than studying point sources. \n",
    "One often has to use complex (i.e. non circular) regions and more importantly, one has to take into account the fact that the instrument response is non uniform over the selectred region.\n",
    "A typical example is given by the supernova remnant RX J1713-3935 which is nearly 1 degree in diameter. See the [following article](https://ui.adsabs.harvard.edu/abs/2018A%26A...612A...6H/abstract).\n",
    "\n",
    "**Objective: Measure the spectrum of RX J1713-3945 in a 1 degree region fully enclosing it.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "We have seen in the general presentation of the spectrum extraction for point sources, see [the corresponding notebook](spectrum_analysis.ipynb), that Gammapy uses specific datasets makers to first produce reduced spectral data and then to extract OFF measurements with reflected background techniques: the `~gammapy.makers.SpectrumDatasetMaker` and the `~gammapy.makers.ReflectedRegionsBackgroundMaker`. The former simply computes the reduced IRF at the center of the ON region (assumed to be circular).\n",
    "\n",
    "This is no longer valid for extended sources. To be able to compute average responses in the ON region, Gammapy relies on the creation of a cube enclosing it (i.e. a `~gammapy.datasets.MapDataset`) which can be reduced to a simple spectrum (i.e. a `~gammapy.datasets.SpectrumDataset`). We can then proceed with the OFF extraction as the standard point source case.\n",
    "\n",
    "In summary, we have to:\n",
    "\n",
    "- Define an ON region (a `~regions.SkyRegion`) fully enclosing the source we want to study.\n",
    "- Define a geometry that fully contains the region and that covers the required energy range (beware in particular, the true energy range).  \n",
    "- Create the necessary makers : \n",
    "    - the map dataset maker : `~gammapy.makers.MapDatasetMaker`\n",
    "    - the OFF background maker, here a `~gammapy.makers.ReflectedRegionsBackgroundMaker`\n",
    "    - and usually the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Produce a map dataset and squeeze it to a spectrum dataset with `~gammapy.datasets.MapDataset.to_spectrum_dataset(on_region)`\n",
    "    - Extract the OFF data to produce a `~gammapy.datasets.SpectrumDatasetOnOff` and compute a safe range for it.\n",
    "    - Stack or store the resulting spectrum dataset.\n",
    "- Finally proceed with model fitting on the dataset as usual.\n",
    "\n",
    "Here, we will use the RX J1713-3945 observations from the H.E.S.S. first public test data release. The tutorial is implemented with the intermediate level API.\n",
    "\n",
    "## Setup \n",
    "\n",
    "As usual, we'll start with some general imports..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:25.149739Z",
     "iopub.status.busy": "2020-11-04T00:33:25.149161Z",
     "iopub.status.idle": "2020-11-04T00:33:25.409569Z",
     "shell.execute_reply": "2020-11-04T00:33:25.408472Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:25.414111Z",
     "iopub.status.busy": "2020-11-04T00:33:25.413625Z",
     "iopub.status.idle": "2020-11-04T00:33:26.296611Z",
     "shell.execute_reply": "2020-11-04T00:33:26.295639Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.maps import Map, MapAxis, WcsGeom\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.datasets import Datasets, MapDataset\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    MapDatasetMaker,\n",
    "    ReflectedRegionsBackgroundMaker,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select the data\n",
    "\n",
    "We first set the datastore and retrieve a few observations from our source."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.303368Z",
     "iopub.status.busy": "2020-11-04T00:33:26.301860Z",
     "iopub.status.idle": "2020-11-04T00:33:26.347060Z",
     "shell.execute_reply": "2020-11-04T00:33:26.345944Z"
    }
   },
   "outputs": [],
   "source": [
    "datastore = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "obs_ids = [20326, 20327, 20349, 20350, 20396, 20397]\n",
    "# In case you want to use all RX J1713 data in the HESS DR1\n",
    "# other_ids=[20421, 20422, 20517, 20518, 20519, 20521, 20898, 20899, 20900]\n",
    "\n",
    "observations = datastore.get_observations(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare the datasets creation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the ON region\n",
    "\n",
    "Here we take a simple 1 degree circular region because it fits well with the morphology of RX J1713-3945. More complex regions could be used e.g. `~regions.EllipseSkyRegion` or `~regions.RectangleSkyRegion`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.352785Z",
     "iopub.status.busy": "2020-11-04T00:33:26.351748Z",
     "iopub.status.idle": "2020-11-04T00:33:26.353357Z",
     "shell.execute_reply": "2020-11-04T00:33:26.353843Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(347.3, -0.5, unit=\"deg\", frame=\"galactic\")\n",
    "radius = Angle(\"0.5 deg\")\n",
    "on_region = CircleSkyRegion(target_position, radius)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the geometries\n",
    "\n",
    "This part is especially important. \n",
    "- We have to define first energy axes. They define the axes of the resulting `~gammapy.datasets.SpectrumDatasetOnOff`. In particular, we have to be careful to the true energy axis: it has to cover a larger range than the reconstructed energy one.\n",
    "- Then we define the geometry itself. It does not need to be very finely binned and should enclose all the ON region. To limit CPU and memory usage, one should avoid using a much larger region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.361380Z",
     "iopub.status.busy": "2020-11-04T00:33:26.360166Z",
     "iopub.status.idle": "2020-11-04T00:33:26.361874Z",
     "shell.execute_reply": "2020-11-04T00:33:26.362484Z"
    }
   },
   "outputs": [],
   "source": [
    "# The binning of the final spectrum is defined here.\n",
    "energy_axis = MapAxis.from_energy_bounds(0.3, 40.0, 10, unit=\"TeV\")\n",
    "\n",
    "# Reduced IRFs are defined in true energy (i.e. not measured energy).\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.05, 100, 30, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "\n",
    "# Here we use 1.5 degree which is slightly larger than needed.\n",
    "geom = WcsGeom.create(\n",
    "    skydir=target_position,\n",
    "    binsz=0.04,\n",
    "    width=(1.5, 1.5),\n",
    "    frame=\"galactic\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create the makers\n",
    "\n",
    "First we instantiate the target `~gammapy.datasets.MapDataset`.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.367138Z",
     "iopub.status.busy": "2020-11-04T00:33:26.366096Z",
     "iopub.status.idle": "2020-11-04T00:33:26.376907Z",
     "shell.execute_reply": "2020-11-04T00:33:26.376374Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"rxj-stacked\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create its associated maker. Here we need to produce, counts, exposure and edisp (energy dispersion) entries. PSF and IRF background are not needed, therefore we don't compute them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.381185Z",
     "iopub.status.busy": "2020-11-04T00:33:26.380031Z",
     "iopub.status.idle": "2020-11-04T00:33:26.381697Z",
     "shell.execute_reply": "2020-11-04T00:33:26.382156Z"
    }
   },
   "outputs": [],
   "source": [
    "maker = MapDatasetMaker(selection=[\"counts\", \"exposure\", \"edisp\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create the OFF background maker for the spectra. If we have an exclusion region, we have to pass it here. We also define the safe range maker."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.386653Z",
     "iopub.status.busy": "2020-11-04T00:33:26.385830Z",
     "iopub.status.idle": "2020-11-04T00:33:26.388046Z",
     "shell.execute_reply": "2020-11-04T00:33:26.387524Z"
    }
   },
   "outputs": [],
   "source": [
    "bkg_maker = ReflectedRegionsBackgroundMaker()\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"aeff-max\"], aeff_percent=10\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perform the data reduction loop.\n",
    "\n",
    "We can now run over selected observations. For each of them, we:\n",
    "- create the map dataset and stack it on our target dataset.\n",
    "- squeeze the map dataset to a spectral dataset in the ON region\n",
    "- Compute the OFF and create a `~gammapy.datasets.SpectrumDatasetOnOff` object\n",
    "- Run the safe mask maker on it\n",
    "- Add the `~gammapy.datasets.SpectrumDatasetOnOff` to the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:26.393039Z",
     "iopub.status.busy": "2020-11-04T00:33:26.392567Z",
     "iopub.status.idle": "2020-11-04T00:33:30.225561Z",
     "shell.execute_reply": "2020-11-04T00:33:30.225951Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.73 s, sys: 99.8 ms, total: 3.83 s\n",
      "Wall time: 3.83 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "datasets = Datasets()\n",
    "\n",
    "for obs in observations:\n",
    "    # A MapDataset is filled in this geometry\n",
    "    dataset = maker.run(stacked, obs)\n",
    "    # To make images, the resulting dataset cutout is stacked onto the final one\n",
    "    stacked.stack(dataset)\n",
    "\n",
    "    # Extract 1D spectrum\n",
    "    spectrum_dataset = dataset.to_spectrum_dataset(\n",
    "        on_region, name=f\"obs-{obs.obs_id}\"\n",
    "    )\n",
    "    # Compute OFF\n",
    "    spectrum_dataset = bkg_maker.run(spectrum_dataset, obs)\n",
    "    # Define safe mask\n",
    "    spectrum_dataset = safe_mask_maker.run(spectrum_dataset, obs)\n",
    "    # Append dataset to the list\n",
    "    datasets.append(spectrum_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:30.234154Z",
     "iopub.status.busy": "2020-11-04T00:33:30.229682Z",
     "iopub.status.idle": "2020-11-04T00:33:30.238764Z",
     "shell.execute_reply": "2020-11-04T00:33:30.238345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=6</i>\n",
       "<table id=\"table140477790956456\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>NAME</th><th>TYPE</th><th>TELESCOP</th><th>OBS_ID</th><th>RA_PNT</th><th>DEC_PNT</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th>deg</th><th>deg</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>str20</th><th>str4</th><th>int64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>obs-20326</td><td>SpectrumDatasetOnOff</td><td>HESS</td><td>20326</td><td>259.29852294921875</td><td>-39.76222229003906</td></tr>\n",
       "<tr><td>obs-20327</td><td>SpectrumDatasetOnOff</td><td>HESS</td><td>20327</td><td>257.4773254394531</td><td>-39.76222229003906</td></tr>\n",
       "<tr><td>obs-20349</td><td>SpectrumDatasetOnOff</td><td>HESS</td><td>20349</td><td>259.29852294921875</td><td>-39.76222229003906</td></tr>\n",
       "<tr><td>obs-20350</td><td>SpectrumDatasetOnOff</td><td>HESS</td><td>20350</td><td>257.4773254394531</td><td>-39.76222229003906</td></tr>\n",
       "<tr><td>obs-20396</td><td>SpectrumDatasetOnOff</td><td>HESS</td><td>20396</td><td>258.3879089355469</td><td>-39.06222152709961</td></tr>\n",
       "<tr><td>obs-20397</td><td>SpectrumDatasetOnOff</td><td>HESS</td><td>20397</td><td>258.3879089355469</td><td>-40.462223052978516</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=6>\n",
       "   NAME           TYPE         ...       RA_PNT             DEC_PNT      \n",
       "                               ...        deg                 deg        \n",
       "   str9          str20         ...      float64             float64      \n",
       "--------- -------------------- ... ------------------ -------------------\n",
       "obs-20326 SpectrumDatasetOnOff ... 259.29852294921875  -39.76222229003906\n",
       "obs-20327 SpectrumDatasetOnOff ...  257.4773254394531  -39.76222229003906\n",
       "obs-20349 SpectrumDatasetOnOff ... 259.29852294921875  -39.76222229003906\n",
       "obs-20350 SpectrumDatasetOnOff ...  257.4773254394531  -39.76222229003906\n",
       "obs-20396 SpectrumDatasetOnOff ...  258.3879089355469  -39.06222152709961\n",
       "obs-20397 SpectrumDatasetOnOff ...  258.3879089355469 -40.462223052978516"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets.meta_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's look at the data to see if our region is correct.\n",
    "We plot it over the excess. To do so we convert it to a pixel region using the WCS information stored on the geom."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:30.242836Z",
     "iopub.status.busy": "2020-11-04T00:33:30.242335Z",
     "iopub.status.idle": "2020-11-04T00:33:30.456888Z",
     "shell.execute_reply": "2020-11-04T00:33:30.457577Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<WCSAxesSubplot:xlabel='Galactic Longitude', ylabel='Galactic Latitude'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.counts.sum_over_axes().smooth(width=\"0.05 deg\").plot()\n",
    "on_region.to_pixel(stacked.counts.geom.wcs).plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now turn to the spectral datasets. We can peek at their content:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:30.459963Z",
     "iopub.status.busy": "2020-11-04T00:33:30.459506Z",
     "iopub.status.idle": "2020-11-04T00:33:31.804576Z",
     "shell.execute_reply": "2020-11-04T00:33:31.804144Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/irf/edisp_kernel.py:536: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  caxes = ax.pcolormesh(x, y, z.T, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "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8AyxfvAed383y3qHAEO23qa8Jj0UkcxFNIP41jXXXAN3/yTsMMrCyJEj+eSTTzj00EM57bTT6NKlC6+99hrHH388jz/+OH/729+46qqrmDZtGttss8361w0bNozNNtuMN998c/2V2lGjRrFixQratWvHvffeS9++famurubxxx9n+fLl/Otf/+JnP/sZv/nNbwC4++67uf7669lyyy3ZdtttadOmDbfddhtffvklI0eO5NNPPwVg/PjxdNxqp6TxS+6uueaasEMIWzUZLgPh7u/FdzkeOL2QQaldRIJVzsecux/XxPbpwPQc6q0BavpX7aaLGSKSVOQT1wEDBsCzkf8zmmXgwIEbbTvmmGM466yzWL58OQcffPBG5cOGDWPYsGEsWLCAo446aoOydLMj3nHHHTz99NM8//zzVFZWUl1dDcTa4NBDD2Xw4MEb1dngww8/ZMaMGVRUVPD111/zwgsv0LJlS2bMmMHYsWOZNm0aEFti4M0336RNmzb07duXX/ziF1RUVHDllVfyxhtv0LFjR/bbbz923XVXAM4991xGjx7NPvvsw6effspPf/pTpvxldppPTpprwIDyHu2a5TIQ75lZT2CJu39dyLjKvV1EgqZjTkQkeJHP+GbNmgXz69H/Qorb0UcfTUVFBQBLlizhlFNO4aOPPsLMWLNmzfr9Bg0aRKdOsaGzO+64I/PmzWPBggX86Ec/YrPNNltf14cffgjAjBkzeO+999a//uuvv+abZUuBzsH8YWVm1qxZgH60NdLUMhAAPwfubeqFiUtA9OzZs9kBqF1EgqVjTkQkeJFPXMeOHQu1q8piHdfGUl0hbd++fcryysrKQNef69Chw/rHl156KT/+8Y959NFHqa2t3eDKcZs2bdY/rqiooL6+HvemZ8Zft24ds2fPpl27duu3vVW3OK+xy7fGjh0LaO3CRpIuAwHg7pelemHiEhBVVVXNXgJC7SISLB1zIiLBi3ziKsWhY8eOLF26NKN9lyxZQrdu3QDWDzdOZY899mD06NEsWrSIjh07Mm3aNHbeeWcADjjgAG677TYuuOACIDbUuO13tw4kef3fohUcNObJnOupbZuHYCRMWgZCREREpMCUuEpeHHvssQwfPpwJEyYwderUDSZnauzCCy/klFNO4eabb2a//fZLW3e3bt0YO3Yse+65J1tuuSU77rjj+uHEEyZM4Oyzz2aXXXahvr6eH/7wh9xxxx15+7tSeX9pO2qvOyT3isblXoWESstAiIjkKKhZhdesW5OmvD5tHWt9bcryFfUrU5YvWv1VyvKn65anjeG3j6TeZ9Xq1H/HeSdsmvY9DunRPmV559abpSxv37JdyvLWFa3TxtDKUqcqZskGPUmpUuIqWamtrV3/uGGiJ4Af/OAHG9xrmqjxVdW99957/T2qAFdeeeVG9QE88cQT6x8ff/zxjBgxgvr6en72s59xwAEHALEhz1OmTMnhLxLJXKGWgRARKXeaVVhE0lHiKpEwbtw4ZsyYwcqVKznggAM4/PDDww5JylAhloFouMrQp0+fXEITERERKWmRT1zHjx8Pd+wTdhhSYDfeeGPYIQjx403yquEqQ1VVVbOvMqhdRIKlY05EJHiRT1z79esHW1SEHYZIWejXr1/YIUgSaheRYOmYExEJXouwA8jVjBkzmPFJ+hvpRSR3M2bMYMaMGWGHIY2oXUSCpWNORCR4kb/ietVVV0HtKvYPOxCRMnDVVVcBsP/+OuKKidpFJFg65vIvqFmFRSS6In/FVUQkysxsiJlNXrJkSdihiIiExt1r3H1E586dwg5FRIpUqFdcNZtmbn5w3V/5z+IVeauvW+d2vDQm/bqqIpI/+ZicSURERKTUhZq46gdbbv6zeAW11x2St/p6jXmy+a/t1YvXXnuNysrKnPZpirtjZowbN45x48atf57IzDjvvPO46aabgNhMxMuWLWPcuHFZvdeXX37J4MGDWb16NRMmTODzzz/n17/+NVtssQXPP/981rGLiIiIiEhuNFRYIuGWW27hrrvu4ptvvuHiiy/mL3/5y0b7tGnThj/96U8sWLAgp/d67rnn2H777XnzzTfZd999ufvuu5k4caKSVhERERGRkEQ+cb3zzju5c3DbsMMoG4cffjj9+/dnp512YvLkyRuV19bWsv3223PKKaewyy67cNRRR7F8+fL15b/97W/Zfffd2Xnnnfnggw8AeOWVVxgwYAC77bYbAwYMYO7cuRvVe95557FgwQImTJjAgQceyAEHHLDRPi1btmTEiBHccsstGf0t8+bNY9CgQeyyyy4MGjSITz/9lDlz5nDhhRcyffp0+vXrx+WXX86LL77IyJEjueCCCzL9mErWnXfeyZ133hl2GNKI2kUkWDrmRESCF/nEtW/fvvSt1DquQbnnnnt4/fXXee2115gwYQILFy7caJ+5c+cyYsQI3nrrLTbddFMmTpy4vqyyspI33niDM888kxtvvBGA7bffnhdeeIE333yTK664grFjx25U5/jx46msrOSXv/wlTz/9dNIrrgBnn302Dz74IJlMdHPOOedw8skn89Zbb3HCCSfwy1/+kn79+nHFFVcwdOhQ5syZw2WXXUZVVRUPPvggN9xwQ6YfU8nq27cvffv2DTuMkpKPyZnULiLB0jGXfw194eLFmqhORJKLfOJaU1NDzdw1YYdRNiZMmMCuu+7KXnvtxfz58/noo4822qdHjx784Ac/AODEE0/kxRdfXF92xBFHANC/f39qa2sBWLJkCUcffTTf//73GT16NO++++5GdZ577rmcfvrpdOjQgauvvrrJJQg23XRTTj75ZCZMmJD2b5k9ezbHH388ACeddNIGcUpyNTU11NTUhB1GSWmYSbNTp+bPpKl2EQmWjrn806zCIpJO5Ndxvemmm6B2NUPCDqQMzJw5kxkzZjB79mzat2/PwIEDWbly5Ub7JZs0qUGbNm0AqKiooL6+HoBLL72UH//4xzz66KPU1tYycODAJutsmGip8XskGjVqFLvvvjunnnpqVn9fqjolpmHiqyFDdMQVE7WLSLB0zImIBC/yiWs569a5XU4zASerL5UlS5bQpUsX2rdvzwcffMDLL7+cdL9PP/2U2bNns/fee/PQQw+xzz77pK23W7duAFRXVzcr9kSbbbYZxxxzDHfffTennXZak/sNGDCAhx9+mJNOOokHH3wwbZwiIiIiIhIOJa4RFvSaqwceeCB33HEHu+yyC3379mWvvfZKut8OO+zAfffdxxlnnMG2227LmWeembLeCy+8kFNOOYWbb76Z/fbLz9/0q1/9ittuuy3lPhMmTOC0007jhhtuYPPNN+fee+/Ny3uLiIiIiEh+KXGVjLVp04annnoqaVnD/arLli2jRYsW3HHHHU3uA1BVVcXMmTMB2Hvvvfnwww/Xl1155ZXNim/ZsmXrH3/3u9/dYDbjZHr16sVf//rXjbYPGzaMYcOGrX/eEKeIiIiIiIQj8pMziYiIiIiISGmL/BXX+++/H27eMewwJK5Xr1688847YYexgauvvpo//vGPG2w7+uijufjii0OKKLruv//+sEMoOWY2BBjSp0+fZtehdhEJlo45EZHgRT5x7dGjB3TShWNp2sUXX6wkNU969OgRdgglx91rgJqqqqrhza1D7SISLB1z+ddwEm/rbXqHHYqIFKnIZ3xTpkxhyjtax1UkCFOmTGHKlClhhyGNqF1EgqVjLv+0jquIpBP5K66TJk2C2tUMDTsQkTIwadIkAIYO1RFXTNQuIsHSMReehasWpSxf5+tSltevq09Zvmbd6rQxLF2zNGX5Xz5LXccdj65MWf71klVpYzh96OYpy0/YNvVP/C5tNkv7Hu0rUi+T2KaidcryCqtIWd7CIn/9TAKmb4yIiIiIiIgUtchfcS1rt+wMSz7NX32desLot/NXn4iIiIiISB4ocY2yJZ/CuCX5q2+c7isREREREZHio6HCIiIiIiIiUtQif8V16tSp8BtNnR6U2tpaDjroIPbZZx9mzZpFt27d+POf/0y7dhvfwD9nzhxGjhzJ8uXL2Wabbbjnnnvo0qULAwcOZM899+T5559n8eLF3H333ey7774h/DWSralTp4YdQsnJxzquaheRYOmYExEJXuSvuFZWVlLZPvJ/RqR89NFHnH322bz77rt07tyZadOmJd3v5JNP5vrrr+ett95i55135vLLL19fVl9fzyuvvML48eM32C7FrbKyksrKyrDDKCkNS0B06tT8ofpqF5Fg6ZgTEQle5DO+6upqquekn7pc8qd3797069cPgP79+1NbW7vRPkuWLGHx4sX86Ec/AuCUU07hhRdeWF9+xBFHpHy9FKfq6mqqq6vDDkMaUbuIBEvHnIhI8PKeuJpZBzO7z8x+Z2Yn5Lv+xmKJ65pCv40kaNOmzfrHFRUV1NenXhMtVR3Nfb2EQz/WipPaRSRYOubyz8yGmNnkxYvzOOmkiJSUjO5xNbN7gMHAF+7+/YTtBwK3AhXAXe5+HXAEMNXda8xsCvBg/sMWILZ8TT5nAu7UM39VdepEly5d+Pvf/86+++7L/fffv/7qq4iIiEgid68BavpX7TY87FhEpDhlOjlTNXAb8PuGDWZWAdwO/ASoA141s8eB7kDDYqBr8xapbKzI11y977771k/OtPXWW3PvvfeGHZKIiIiIiERQRomru79gZr0abd4D+NjdPwEws4eBw4glsd2BOaQYimxmI4ARAD175u9KnxRWr169eOedd9Y/P//885vct1+/frz88ssbbZ85c+b6x5WVlbrH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\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cumulative excess and signficance\n",
    "\n",
    "Finally, we can look at cumulative significance and number of excesses. This is done with the `info_table` method of `~gammapy.datasets.Datasets`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:31.844377Z",
     "iopub.status.busy": "2020-11-04T00:33:31.842840Z",
     "iopub.status.idle": "2020-11-04T00:33:32.104325Z",
     "shell.execute_reply": "2020-11-04T00:33:32.103391Z"
    }
   },
   "outputs": [],
   "source": [
    "info_table = datasets.info_table(cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:32.111032Z",
     "iopub.status.busy": "2020-11-04T00:33:32.110572Z",
     "iopub.status.idle": "2020-11-04T00:33:32.115298Z",
     "shell.execute_reply": "2020-11-04T00:33:32.114797Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=6</i>\n",
       "<table id=\"table140477028857672\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>counts</th><th>background</th><th>excess</th><th>sqrt_ts</th><th>npred</th><th>npred_background</th><th>npred_signal</th><th>exposure_min</th><th>exposure_max</th><th>livetime</th><th>ontime</th><th>counts_rate</th><th>background_rate</th><th>excess_rate</th><th>n_bins</th><th>n_fit_bins</th><th>stat_type</th><th>stat_sum</th><th>counts_off</th><th>acceptance</th><th>acceptance_off</th><th>alpha</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>m2 s</th><th>m2 s</th><th>s</th><th>s</th><th>1 / s</th><th>1 / s</th><th>1 / s</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>int64</th><th>str5</th><th>float64</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>obs-20326</td><td>450.0</td><td>343.5</td><td>106.5</td><td>4.405517626186096</td><td>378.99999999999994</td><td>378.99999999999994</td><td>nan</td><td>4309258.042057536</td><td>422238157.5123817</td><td>1683.0</td><td>1683.0</td><td>0.26737967914438504</td><td>0.20409982174688057</td><td>0.06327985739750445</td><td>10</td><td>10</td><td>wstat</td><td>41.619587630493804</td><td>687.0</td><td>10.0</td><td>20.0</td><td>0.5</td></tr>\n",
       "<tr><td>obs-20326</td><td>845.0</td><td>670.5</td><td>174.5</td><td>5.215405763158092</td><td>728.6666666666667</td><td>728.6666666666667</td><td>nan</td><td>14662719.32774892</td><td>832059034.478945</td><td>3366.0</td><td>3366.0</td><td>0.2510398098633393</td><td>0.19919786096256684</td><td>0.05184194890077243</td><td>10</td><td>10</td><td>wstat</td><td>68.99758872776455</td><td>1341.0</td><td>10.0</td><td>20.0</td><td>0.5</td></tr>\n",
       "<tr><td>obs-20326</td><td>1288.0</td><td>983.0</td><td>305.0</td><td>7.457874883123557</td><td>1084.6666666666667</td><td>1084.6666666666667</td><td>nan</td><td>25046841.769557744</td><td>1241412951.5114164</td><td>5048.0</td><td>5048.0</td><td>0.2551505546751189</td><td>0.19473058637083993</td><td>0.06041996830427892</td><td>10</td><td>10</td><td>wstat</td><td>110.36192929546934</td><td>1966.0</td><td>10.0</td><td>20.0</td><td>0.5</td></tr>\n",
       "<tr><td>obs-20326</td><td>1725.0</td><td>1341.0</td><td>384.0</td><td>8.075257505628382</td><td>1468.9999999999998</td><td>1468.9999999999998</td><td>nan</td><td>29517317.734697957</td><td>1662189705.5499346</td><td>6730.0</td><td>6730.0</td><td>0.2563150074294205</td><td>0.19925705794947995</td><td>0.05705794947994056</td><td>10</td><td>10</td><td>wstat</td><td>150.00796042782275</td><td>2682.0</td><td>10.0</td><td>20.0</td><td>0.5</td></tr>\n",
       "<tr><td>obs-20326</td><td>2198.0</td><td>1653.0001220703125</td><td>544.9998779296875</td><td>10.400166037309209</td><td>1823.1466301979633</td><td>1823.1466301979633</td><td>nan</td><td>39224336.77289754</td><td>2071146470.3666286</td><td>8413.0</td><td>8413.0</td><td>0.2612623321050755</td><td>0.1964816500737326</td><td>0.06478068203134286</td><td>10</td><td>10</td><td>wstat</td><td>193.54833987070583</td><td>3618.0</td><td>10.0</td><td>21.887475967407227</td><td>0.44348058104515076</td></tr>\n",
       "<tr><td>obs-20326</td><td>2626.0</td><td>2001.5001220703125</td><td>624.4998779296875</td><td>10.837684594884903</td><td>2198.593368883069</td><td>2198.593368883069</td><td>nan</td><td>41782883.40346215</td><td>2500415797.968303</td><td>10095.0</td><td>10095.0</td><td>0.26012877662209016</td><td>0.1982664806409423</td><td>0.06186229598114785</td><td>10</td><td>10</td><td>wstat</td><td>213.44165945794245</td><td>4315.0</td><td>10.0</td><td>21.55883026123047</td><td>0.4485357403755188</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=6>\n",
       "   name    counts     background     ...   acceptance_off          alpha       \n",
       "                                     ...                                       \n",
       "   str9   float32      float64       ...      float64             float64      \n",
       "--------- ------- ------------------ ... ------------------ -------------------\n",
       "obs-20326   450.0              343.5 ...               20.0                 0.5\n",
       "obs-20326   845.0              670.5 ...               20.0                 0.5\n",
       "obs-20326  1288.0              983.0 ...               20.0                 0.5\n",
       "obs-20326  1725.0             1341.0 ...               20.0                 0.5\n",
       "obs-20326  2198.0 1653.0001220703125 ... 21.887475967407227 0.44348058104515076\n",
       "obs-20326  2626.0 2001.5001220703125 ...  21.55883026123047  0.4485357403755188"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:32.152863Z",
     "iopub.status.busy": "2020-11-04T00:33:32.136435Z",
     "iopub.status.idle": "2020-11-04T00:33:32.323213Z",
     "shell.execute_reply": "2020-11-04T00:33:32.322571Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sqrt(TS)')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(121)\n",
    "ax.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"), info_table[\"excess\"], marker=\"o\", ls=\"none\"\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Excess events\")\n",
    "\n",
    "ax = fig.add_subplot(122)\n",
    "ax.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"),\n",
    "    info_table[\"sqrt_ts\"],\n",
    "    marker=\"o\",\n",
    "    ls=\"none\",\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Sqrt(TS)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perform spectral model fitting\n",
    "\n",
    "Here we perform a joint fit. \n",
    "\n",
    "We first create the model, here a simple powerlaw, and assign it to every dataset in the `~gammapy.datasets.Datasets`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:32.333615Z",
     "iopub.status.busy": "2020-11-04T00:33:32.333110Z",
     "iopub.status.idle": "2020-11-04T00:33:32.336208Z",
     "shell.execute_reply": "2020-11-04T00:33:32.335484Z"
    }
   },
   "outputs": [],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2, amplitude=2e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"RXJ 1713\")\n",
    "\n",
    "datasets.models = [model]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can run the fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:32.340562Z",
     "iopub.status.busy": "2020-11-04T00:33:32.339862Z",
     "iopub.status.idle": "2020-11-04T00:33:33.224527Z",
     "shell.execute_reply": "2020-11-04T00:33:33.224008Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 39\n",
      "\ttotal stat : 72.95\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fit_joint = Fit(datasets)\n",
    "result_joint = fit_joint.run()\n",
    "print(result_joint)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore the fit results\n",
    "\n",
    "First the fitted parameters values and their errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:33.232713Z",
     "iopub.status.busy": "2020-11-04T00:33:33.232252Z",
     "iopub.status.idle": "2020-11-04T00:33:33.236985Z",
     "shell.execute_reply": "2020-11-04T00:33:33.236583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=3</i>\n",
       "<table id=\"table140477033967176\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>index</td><td>2.1021e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>6.657e-02</td></tr>\n",
       "<tr><td>amplitude</td><td>1.2869e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>1.023e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=3>\n",
       "   name     value         unit        min     max   frozen   error  \n",
       "   str9    float64       str14      float64 float64  bool   float64 \n",
       "--------- ---------- -------------- ------- ------- ------ ---------\n",
       "    index 2.1021e+00                    nan     nan  False 6.657e-02\n",
       "amplitude 1.2869e-11 cm-2 s-1 TeV-1     nan     nan  False 1.023e-12\n",
       "reference 1.0000e+00            TeV     nan     nan   True 0.000e+00"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_joint.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then plot the fit result to compare measured and expected counts. Rather than plotting them for each individual dataset, we stack all datasets and plot the fit result on the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:33:33.244796Z",
     "iopub.status.busy": "2020-11-04T00:33:33.244295Z",
     "iopub.status.idle": "2020-11-04T00:33:34.231627Z",
     "shell.execute_reply": "2020-11-04T00:33:34.230845Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<AxesSubplot:xlabel='Energy [TeV]', ylabel='$\\\\mathrm{}$'>,\n",
       " <AxesSubplot:xlabel='Energy [TeV]', ylabel='Residuals (data - model)'>)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "# First stack them all\n",
    "reduced = datasets.stack_reduce()\n",
    "# Assign the fitted model\n",
    "reduced.models = model\n",
    "# Plot the result\n",
    "reduced.plot_fit();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
