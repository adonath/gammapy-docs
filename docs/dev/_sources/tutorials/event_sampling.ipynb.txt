{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/event_sampling.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[event_sampling.ipynb](../_static/notebooks/event_sampling.ipynb) |\n",
    "[event_sampling.py](../_static/notebooks/event_sampling.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Event Sampling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prerequisites "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand how to generate a Model and a MapDataset, and how to fit the data, please refer to the `~gammapy.modeling.models.SkyModel` and [simulate_3d](simulate_3d.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Context \n",
    "\n",
    "This tutorial describes how to sample events from an observation of a one (or more) gamma-ray source(s). The main aim of the tutorial will be to set the minimal configuration needed to deal with the Gammapy event-sampler and how to obtain an output photon event list.\n",
    "\n",
    "The core of the event sampling lies into the Gammapy `~gammapy.datasets.MapDatasetEventSampler` class, which is based on the inverse cumulative distribution function [(Inverse CDF)](https://en.wikipedia.org/wiki/Cumulative_distribution_function#Inverse_distribution_function_(quantile_function)). \n",
    "\n",
    "The `~gammapy.datasets.MapDatasetEventSampler` takes in input a `~gammapy.datasets.Dataset` object containing the spectral, spatial and temporal properties of the source(s) of interest.\n",
    "\n",
    "The `~gammapy.datasets.MapDatasetEventSampler` class evaluates the map of predicted counts (`npred`) per bin of the given Sky model, and the `npred` map is then used to sample the events. In particular, the output of the event-sampler will be a set of events having information about their true coordinates, true energies and times of arrival. \n",
    "\n",
    "To these events, IRF corrections (i.e. PSF and energy dispersion) can also further applied in order to obtain reconstructed coordinates and energies of the sampled events. \n",
    "\n",
    "At the end of this process, you will obtain an event-list in FITS format. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objective\n",
    "Describe the process of sampling events from a given Sky model and obtaining an output event-list."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Proposed approach\n",
    "\n",
    "In this section, we will show how to define a `gammapy.data.Observations` and to create a `~gammapy.datasets.Dataset` object (for more info on `~gammapy.datasets.Dataset` objects, please visit this [link](analysis_2.ipynb#Preparing-reduced-datasets-geometry)). These are both necessary for the event sampling. \n",
    "Then, we will define the Sky model from which we sample events. \n",
    "\n",
    "In this tutorial, we propose two examples for sampling events: one chosing a point-like source and one using a template map. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "As usual, let's start with some general imports...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import copy\n",
    "import astropy.units as u\n",
    "from astropy.io import fits\n",
    "from astropy.coordinates import SkyCoord\n",
    "from gammapy.data import DataStore, GTI, Observation\n",
    "from gammapy.datasets import MapDataset, MapDatasetEventSampler\n",
    "from gammapy.maps import MapAxis, WcsGeom, Map\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.makers import MapDatasetMaker\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.modeling.models import (\n",
    "    Model,\n",
    "    Models,\n",
    "    SkyModel,\n",
    "    PowerLawSpectralModel,\n",
    "    PointSpatialModel,\n",
    "    GaussianSpatialModel,\n",
    "    SkyDiffuseCube,\n",
    ")\n",
    "from regions import CircleSkyRegion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define an Observation\n",
    "\n",
    "You can firstly create a `gammapy.data.Observations` object that contains the pointing position, the GTIs and the IRF you want to consider. \n",
    "\n",
    "Hereafter, we chose the IRF of the South configuration used for the CTA DC1 and we set the pointing position of the simulated field at the Galactic Center. We also fix the exposure time to 1 hr.\n",
    "\n",
    "Let's start with some initial settings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "IRF_FILE = (\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")\n",
    "\n",
    "POINTING = SkyCoord(0.0, 0.0, frame=\"galactic\", unit=\"deg\")\n",
    "LIVETIME = 1 * u.hr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can create the observation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n"
     ]
    }
   ],
   "source": [
    "irfs = load_cta_irfs(IRF_FILE)\n",
    "observation = Observation.create(\n",
    "    obs_id=1001, pointing=POINTING, livetime=LIVETIME, irfs=irfs\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the MapDataset\n",
    "\n",
    "Let's generate the `~gammapy.datasets.Dataset` object: we define the energy axes (true and reconstruncted), the migration axis and the geometry of the observation. \n",
    "\n",
    "*This is a crucial point for the correct configuration of the event sampler. Indeed the spatial and energetic binning should be treaten carefully and... the finer the better. For this reason, we suggest to define the energy axes by setting a minimum binning of least 10-20 bins per decade for all the sources of interest. The spatial binning may instead be different from source to source and, at first order, it should be adopted a binning significantly smaller than the expected source size.*\n",
    "\n",
    "For the examples that will be shown hereafter, we set the geometry of the dataset to a field of view of 2degx2deg and we  bin the spatial map with pixels of 0.02 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ENERGY_AXIS = MapAxis.from_energy_bounds(\n",
    "    \"0.1 TeV\", \"100 TeV\", nbin=10, per_decade=True\n",
    ")\n",
    "ENERGY_AXIS_TRUE = MapAxis.from_energy_bounds(\n",
    "    \"0.03 TeV\", \"300 TeV\", nbin=20, per_decade=True, name=\"energy_true\"\n",
    ")\n",
    "MIGRA_AXIS = MapAxis.from_bounds(\n",
    "    0.5, 2, nbin=150, node_type=\"edges\", name=\"migra\"\n",
    ")\n",
    "\n",
    "WCS_GEOM = WcsGeom.create(\n",
    "    skydir=POINTING,\n",
    "    width=(2, 2),\n",
    "    binsz=0.02,\n",
    "    frame=\"galactic\",\n",
    "    axes=[ENERGY_AXIS],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following, the dataset is created by selecting the effective area, background model, the PSF and the Edisp from the IRF. The dataset thus produced can be saved into a FITS file just using the `write()` function. We put it into the `evt_sampling` sub-folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.42 s, sys: 164 ms, total: 1.59 s\n",
      "Wall time: 1.59 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "empty = MapDataset.create(\n",
    "    WCS_GEOM, energy_axis_true=ENERGY_AXIS_TRUE, migra_axis=MIGRA_AXIS\n",
    ")\n",
    "maker = MapDatasetMaker(selection=[\"exposure\", \"background\", \"psf\", \"edisp\"])\n",
    "dataset = maker.run(empty, observation)\n",
    "\n",
    "Path(\"event_sampling\").mkdir(exist_ok=True)\n",
    "dataset.write(\"./event_sampling/dataset.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the Sky model: a point-like source\n",
    "\n",
    "Now let's define a Sky model (see how to create it [here](models.ipynb)) for a point-like source centered 0.5 deg far from the Galactic Center and with a power-law spectrum. We then save the model into a yaml file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectral_model_pwl = PowerLawSpectralModel(\n",
    "    index=2, amplitude=\"1e-12 TeV-1 cm-2 s-1\", reference=\"1 TeV\"\n",
    ")\n",
    "spatial_model_point = PointSpatialModel(\n",
    "    lon_0=\"0 deg\", lat_0=\"0.5 deg\", frame=\"galactic\"\n",
    ")\n",
    "sky_model_pntpwl = SkyModel(\n",
    "    spectral_model=spectral_model_pwl,\n",
    "    spatial_model=spatial_model_point,\n",
    "    name=\"point-pwl\",\n",
    ")\n",
    "\n",
    "models_pntpwl = Models([sky_model_pntpwl])\n",
    "\n",
    "file_model = \"./event_sampling/point-pwl.yaml\"\n",
    "models_pntpwl.write(file_model, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sampling the source and background events"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can finally add the `~gammapy.modeling.models.SkyModel` we want to event-sample to the `~gammapy.datasets.Dataset` container:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ProperModels\n",
      "\n",
      "Component 0: BackgroundModel\n",
      "\n",
      "  Name                      : RiSLaCi6-bkg\n",
      "  Datasets names            : ['RiSLaCi6']\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "Component 1: SkyModel\n",
      "\n",
      "  Name                      : point-pwl\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : PointSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   2.000              \n",
      "    amplitude               :   1.00e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :   0.000  deg         \n",
      "    lat_0                   :   0.500  deg         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dataset.models.extend(models_pntpwl)\n",
    "print(dataset.models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step shows how to sample the events with the `~gammapy.datasets.MapDatasetEventSampler` class. The class requests a random number seed generator (that we set with `random_state=0`), the `~gammapy.datasets.Dataset` and the `gammapy.data.Observations` object. From the latter, the `~gammapy.datasets.MapDatasetEventSampler` class takes all the meta data information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.01 s, sys: 27.6 ms, total: 1.04 s\n",
      "Wall time: 1.04 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sampler = MapDatasetEventSampler(random_state=0)\n",
    "events = sampler.run(dataset, observation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output of the event-sampler is an event list with coordinates, energies and time of arrivals of the source and background events. Source and background events are flagged by the MC_ID identifier (where 0 is the default identifier for the background)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source events: 178\n",
      "Background events: 11804\n"
     ]
    }
   ],
   "source": [
    "print(f\"Source events: {(events.table['MC_ID'] == 2).sum()}\")\n",
    "print(f\"Background events: {(events.table['MC_ID'] == 0).sum()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can inspect the properties of the simulated events as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events.peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default, the `~gammapy.datasets.MapDatasetEventSampler` fills the metadata keyword `OBJECT` in the event list using the first model of the SkyModel object. You can change it with the following commands:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "events.table.meta[\"OBJECT\"] = dataset.models[1].name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's write the event list and its GTI extension to a FITS file. We make use of `fits` library in `astropy`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "primary_hdu = fits.PrimaryHDU()\n",
    "hdu_evt = fits.BinTableHDU(events.table)\n",
    "hdu_gti = fits.BinTableHDU(dataset.gti.table, name=\"GTI\")\n",
    "hdu_all = fits.HDUList([primary_hdu, hdu_evt, hdu_gti])\n",
    "hdu_all.writeto(\"./event_sampling/events_0001.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generate a skymap\n",
    "A skymap of the simulated events can be obtained with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts = Map.create(\n",
    "    frame=\"galactic\", skydir=(0, 0.0), binsz=0.02, npix=(100, 100)\n",
    ")\n",
    "counts.fill_events(events)\n",
    "counts.plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fit the simulated data\n",
    "We can now check the sake of the event sampling by fitting the data (a tutorial of source fitting is [here](analysis_2.ipynb#Fit-the-model) and [here](simulate_3d.ipynb). We make use of the same `~gammapy.modeling.models.Models` adopted for the simulation. \n",
    "Hence, we firstly read the `~gammapy.datasets.Dataset` and the model file, and we fill the `~gammapy.datasets.Dataset` with the sampled events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = MapDataset.read(\"./event_sampling/dataset.fits\")\n",
    "models_sim_point = Models.read(\"./event_sampling/point-pwl.yaml\")\n",
    "\n",
    "counts = Map.from_geom(WCS_GEOM)\n",
    "counts.fill_events(events)\n",
    "\n",
    "dataset.counts = counts\n",
    "dataset.models.extend(models_sim_point)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's fit the data and look at the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------------\n",
      "| FCN = 7.137e+04               |     Ncalls=100 (100 total)     |\n",
      "| EDM = 2.12e-05 (Goal: 0.0002) |            up = 1.0            |\n",
      "------------------------------------------------------------------\n",
      "|  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |\n",
      "------------------------------------------------------------------\n",
      "|     True      |     True      |   False   |       False        |\n",
      "------------------------------------------------------------------\n",
      "| Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |\n",
      "------------------------------------------------------------------\n",
      "|     False     |     True      |   True    |   True    | False  |\n",
      "------------------------------------------------------------------\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 100\n",
      "\ttotal stat : 71369.33\n",
      "\n",
      "CPU times: user 8.09 s, sys: 90.4 ms, total: 8.18 s\n",
      "Wall time: 8.18 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit([dataset])\n",
    "result = fit.run(optimize_opts={\"print_level\": 1})\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=8</i>\n",
       "<table id=\"table139866458086760\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>norm</td><td>9.895e-01</td><td></td><td>0.000e+00</td><td>nan</td><td>False</td><td>9.154e-03</td></tr>\n",
       "<tr><td>tilt</td><td>0.000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>index</td><td>1.997e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>6.347e-02</td></tr>\n",
       "<tr><td>amplitude</td><td>1.041e-12</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>9.920e-14</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>lon_0</td><td>1.235e-03</td><td>deg</td><td>nan</td><td>nan</td><td>False</td><td>3.493e-03</td></tr>\n",
       "<tr><td>lat_0</td><td>5.023e-01</td><td>deg</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td>3.421e-03</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=8>\n",
       "   name     value        unit         min        max    frozen   error  \n",
       "   str9    float64      str14       float64    float64   bool   float64 \n",
       "--------- --------- -------------- ---------- --------- ------ ---------\n",
       "     norm 9.895e-01                 0.000e+00       nan  False 9.154e-03\n",
       "     tilt 0.000e+00                       nan       nan   True 0.000e+00\n",
       "reference 1.000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    index 1.997e+00                       nan       nan  False 6.347e-02\n",
       "amplitude 1.041e-12 cm-2 s-1 TeV-1        nan       nan  False 9.920e-14\n",
       "reference 1.000e+00            TeV        nan       nan   True 0.000e+00\n",
       "    lon_0 1.235e-03            deg        nan       nan  False 3.493e-03\n",
       "    lat_0 5.023e-01            deg -9.000e+01 9.000e+01  False 3.421e-03"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results looks great!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extended source using a template\n",
    "The event sampler can also work with a template model.\n",
    "Here we use the interstellar emission model map of the Fermi 3FHL, which can be found in the GAMMAPY data repository.\n",
    "\n",
    "We proceed following the same steps showed above and we finally have a look at the event's properties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n"
     ]
    }
   ],
   "source": [
    "diffuse = SkyDiffuseCube.read(\n",
    "    \"$GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\"\n",
    ")\n",
    "models_diffuse = Models([diffuse])\n",
    "\n",
    "file_model = \"./event_sampling/diffuse.yaml\"\n",
    "models_diffuse.write(file_model, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ProperModels\n",
      "\n",
      "Component 0: BackgroundModel\n",
      "\n",
      "  Name                      : oNzesXPq-bkg\n",
      "  Datasets names            : ['oNzesXPq']\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "Component 1: SkyDiffuseCube\n",
      "\n",
      "  Name                      : gll_iem_v06_gc.fits\n",
      "  Datasets names            : None\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dataset = MapDataset.read(\"./event_sampling/dataset.fits\")\n",
    "dataset.models.extend(models_diffuse)\n",
    "print(dataset.models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.24 s, sys: 59.8 ms, total: 2.3 s\n",
      "Wall time: 2.3 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sampler = MapDatasetEventSampler(random_state=0)\n",
    "events = sampler.run(dataset, observation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events.peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulate mutiple event list\n",
    "In some user case, you may want to sample events from a number of observations. \n",
    "In this section, we show how to simulate a set of event lists. For simplicity we consider only one point-like source, observed three times for 1 hr and assuming the same pointing position.\n",
    "\n",
    "Let's firstly define the time start and the livetime of each observation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "tstarts = [1, 5, 7] * u.hr\n",
    "livetimes = [1, 1, 1] * u.hr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "for idx, tstart in enumerate(tstarts):\n",
    "\n",
    "    observation = Observation.create(\n",
    "        obs_id=idx,\n",
    "        pointing=POINTING,\n",
    "        tstart=tstart,\n",
    "        livetime=livetimes[idx],\n",
    "        irfs=irfs,\n",
    "    )\n",
    "\n",
    "    dataset = maker.run(empty, observation)\n",
    "    dataset.models.extend(models_pntpwl)\n",
    "\n",
    "    sampler = MapDatasetEventSampler(random_state=idx)\n",
    "    events = sampler.run(dataset, observation)\n",
    "    events.table.write(\n",
    "        f\"./event_sampling/events_{idx:04d}.fits\", overwrite=True\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can now load the event list with `Datastore.from_events_files()` and make your own analysis following the instructions in the [`analysis_2`](analysis_2.ipynb) tutorial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>ObservationTable length=3</i>\n",
       "<table id=\"table139866462478120\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>OBS_ID</th><th>RA_PNT</th><th>DEC_PNT</th><th>GLON_PNT</th><th>GLAT_PNT</th><th>ZEN_PNT</th><th>ALT_PNT</th><th>AZ_PNT</th><th>ONTIME</th><th>LIVETIME</th><th>DEADC</th><th>TSTART</th><th>TSTOP</th><th>DATE-OBS</th><th>TIME-OBS</th><th>DATE-END</th><th>TIME-END</th><th>N_TELS</th><th>OBJECT</th><th>TELESCOP</th><th>CALDB</th><th>IRF</th><th>EVENTS_FILENAME</th><th>EVENT_COUNT</th></tr></thead>\n",
       "<thead><tr><th></th><th>deg</th><th>deg</th><th>deg</th><th>deg</th><th>deg</th><th>deg</th><th>deg</th><th>s</th><th>s</th><th></th><th>s</th><th>s</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>str6</th><th>str5</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>str13</th><th>str13</th><th>str13</th><th>str13</th><th>str1</th><th>str9</th><th>str3</th><th>str3</th><th>str12</th><th>str31</th><th>int64</th></tr></thead>\n",
       "<tr><td>2</td><td>266.4049882865447</td><td>-28.93617776179147</td><td>0.0</td><td>4.452776554048922e-14</td><td>70.0</td><td>20.000</td><td>0.000</td><td>3600.0</td><td>3600.0</td><td>0.0</td><td>25199.99999979045</td><td>28800.00000020955</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td></td><td>point-pwl</td><td>CTA</td><td>1dc</td><td>South_z20_50</td><td>event_sampling/events_0002.fits</td><td>12232</td></tr>\n",
       "<tr><td>0</td><td>266.4049882865447</td><td>-28.93617776179147</td><td>0.0</td><td>4.452776554048922e-14</td><td>70.0</td><td>20.000</td><td>0.000</td><td>3600.0</td><td>3600.0</td><td>0.0</td><td>3599.999999790452</td><td>7200.000000209548</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td></td><td>point-pwl</td><td>CTA</td><td>1dc</td><td>South_z20_50</td><td>event_sampling/events_0000.fits</td><td>11982</td></tr>\n",
       "<tr><td>1</td><td>266.4049882865447</td><td>-28.93617776179147</td><td>0.0</td><td>4.452776554048922e-14</td><td>70.0</td><td>20.000</td><td>0.000</td><td>3600.0</td><td>3600.0</td><td>0.0</td><td>18000.00000020955</td><td>21600.0</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td>NOT AVAILABLE</td><td></td><td>point-pwl</td><td>CTA</td><td>1dc</td><td>South_z20_50</td><td>event_sampling/events_0001.fits</td><td>12171</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<ObservationTable length=3>\n",
       "OBS_ID       RA_PNT      ...         EVENTS_FILENAME         EVENT_COUNT\n",
       "              deg        ...                                            \n",
       "int64       float64      ...              str31                 int64   \n",
       "------ ----------------- ... ------------------------------- -----------\n",
       "     2 266.4049882865447 ... event_sampling/events_0002.fits       12232\n",
       "     0 266.4049882865447 ... event_sampling/events_0000.fits       11982\n",
       "     1 266.4049882865447 ... event_sampling/events_0001.fits       12171"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = Path(\"./event_sampling/\")\n",
    "paths = list(path.rglob(\"events*.fits\"))\n",
    "data_store = DataStore.from_events_files(paths)\n",
    "data_store.obs_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!-- ## Read simulated event lists with Datastore.from_events_lists\n",
    "Here we show how to simulate a set of event lists of the same Sky model, but with different GTIs. We make use of the settings we applied previously.\n",
    "Let's define the GTI firstly, chosing a time start and a duration of the observation: -->"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "- Try to sample events for an extended source (e.g. a radial gaussian morphology);\n",
    "- Change the spatial model and the spectrum of the simulated Sky model;\n",
    "- Include a temporal model in the simulation"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
