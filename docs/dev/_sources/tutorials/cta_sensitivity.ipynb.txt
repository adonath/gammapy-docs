{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/cta_sensitivity.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[cta_sensitivity.ipynb](../_static/notebooks/cta_sensitivity.ipynb) |\n",
    "[cta_sensitivity.py](../_static/notebooks/cta_sensitivity.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Estimation of the CTA point source sensitivity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains how to estimate the CTA sensitivity for a point-like IRF at a fixed zenith angle and fixed offset using the full containement IRFs distributed for the CTA 1DC. The significativity is computed for a 1D analysis (On-OFF regions) and the LiMa formula. \n",
    "\n",
    "We use here an approximate approach with an energy dependent integration radius to take into account the variation of the PSF. We will first determine the 1D IRFs including a containment correction. \n",
    "\n",
    "We will be using the following Gammapy class:\n",
    "\n",
    "* `~gammapy.estimators.SensitivityEstimator`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "As usual, we'll start with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import astropy.units as u\n",
    "from astropy.coordinates import Angle, SkyCoord\n",
    "from regions import CircleSkyRegion\n",
    "\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.makers import SpectrumDatasetMaker\n",
    "from gammapy.data import Observation\n",
    "from gammapy.estimators import SensitivityEstimator\n",
    "from gammapy.datasets import SpectrumDataset, SpectrumDatasetOnOff\n",
    "from gammapy.maps import MapAxis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define analysis region and energy binning\n",
    "\n",
    "Here we assume a source at 0.5 degree from pointing position. We perform a simple energy independent extraction for now with a radius of 0.1 degree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "center = SkyCoord(\"0 deg\", \"0.5 deg\")\n",
    "region = CircleSkyRegion(center=center, radius=0.1 * u.deg)\n",
    "\n",
    "e_reco = MapAxis.from_energy_bounds(\"0.03 TeV\", \"30 TeV\", nbin=20)\n",
    "e_true = MapAxis.from_energy_bounds(\n",
    "    \"0.01 TeV\", \"100 TeV\", nbin=100, name=\"energy_true\"\n",
    ")\n",
    "\n",
    "empty_dataset = SpectrumDataset.create(\n",
    "    e_reco=e_reco, e_true=e_true, region=region\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load IRFs and prepare dataset\n",
    "\n",
    "We extract the 1D IRFs from the full 3D IRFs provided by CTA. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n"
     ]
    }
   ],
   "source": [
    "irfs = load_cta_irfs(\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")\n",
    "\n",
    "pointing = SkyCoord(\"0 deg\", \"0 deg\")\n",
    "obs = Observation.create(pointing=pointing, irfs=irfs, livetime=\"5 h\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectrum_maker = SpectrumDatasetMaker(\n",
    "    selection=[\"aeff\", \"edisp\", \"background\"]\n",
    ")\n",
    "dataset = spectrum_maker.run(empty_dataset, obs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we correct for the energy dependent region size:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "containment = 0.68\n",
    "\n",
    "# correct effective area\n",
    "dataset.aeff.data.data *= containment\n",
    "\n",
    "# correct background estimation\n",
    "on_radii = obs.psf.containment_radius(\n",
    "    energy=e_reco.center, theta=0.5 * u.deg, fraction=containment\n",
    ")[0]\n",
    "factor = (1 - np.cos(on_radii)) / (1 - np.cos(region.radius))\n",
    "dataset.background.data *= factor.value.reshape((-1, 1, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally define a `SpectrumDatasetOnOff` with an alpha of `0.2`. The off counts are created from the background model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(\n",
    "    dataset=dataset, acceptance=1, acceptance_off=5\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute sensitivity\n",
    "\n",
    "We impose a minimal number of expected signal counts of 5 per bin and a minimal significance of 3 per bin. We assume an alpha of 0.2 (ratio between ON and OFF area).\n",
    "We then run the sensitivity estimator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "sensitivity_estimator = SensitivityEstimator(gamma_min=5, sigma=3)\n",
    "sensitivity_table = sensitivity_estimator.run(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "The results are given as an Astropy table. A column criterion allows to distinguish bins where the significance is limited by the signal statistical significance from bins where the sensitivity is limited by the number of signal counts.\n",
    "This is visible in the plot below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=20</i>\n",
       "<table id=\"table140413509607496\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>energy</th><th>e2dnde</th><th>excess</th><th>background</th><th>criterion</th></tr></thead>\n",
       "<thead><tr><th>TeV</th><th>erg / (cm2 s)</th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>bytes12</th></tr></thead>\n",
       "<tr><td>0.0356551</td><td>9.81443e-12</td><td>199.602</td><td>3611.86</td><td>significance</td></tr>\n",
       "<tr><td>0.0503641</td><td>7.44863e-12</td><td>141.851</td><td>1808.46</td><td>significance</td></tr>\n",
       "<tr><td>0.0711412</td><td>3.34717e-12</td><td>94.6081</td><td>792.485</td><td>significance</td></tr>\n",
       "<tr><td>0.10049</td><td>1.83443e-12</td><td>67.225</td><td>392.809</td><td>significance</td></tr>\n",
       "<tr><td>0.141945</td><td>1.3367e-12</td><td>47.1992</td><td>188.424</td><td>significance</td></tr>\n",
       "<tr><td>0.200503</td><td>9.51624e-13</td><td>31.7001</td><td>81.2163</td><td>significance</td></tr>\n",
       "<tr><td>0.283218</td><td>6.50443e-13</td><td>21.7761</td><td>35.9296</td><td>significance</td></tr>\n",
       "<tr><td>0.400056</td><td>5.2438e-13</td><td>15.1912</td><td>15.9406</td><td>significance</td></tr>\n",
       "<tr><td>0.565095</td><td>3.83121e-13</td><td>11.1615</td><td>7.6638</td><td>significance</td></tr>\n",
       "<tr><td>0.798218</td><td>3.35256e-13</td><td>8.29778</td><td>3.60441</td><td>significance</td></tr>\n",
       "<tr><td>1.12751</td><td>2.90424e-13</td><td>6.55695</td><td>1.87455</td><td>significance</td></tr>\n",
       "<tr><td>1.59265</td><td>2.42006e-13</td><td>5.69212</td><td>1.22178</td><td>significance</td></tr>\n",
       "<tr><td>2.24968</td><td>2.16291e-13</td><td>5</td><td>0.78233</td><td>gamma</td></tr>\n",
       "<tr><td>3.17776</td><td>2.29643e-13</td><td>5</td><td>0.499028</td><td>gamma</td></tr>\n",
       "<tr><td>4.48871</td><td>2.73642e-13</td><td>5</td><td>0.340861</td><td>gamma</td></tr>\n",
       "<tr><td>6.34047</td><td>3.57511e-13</td><td>5</td><td>0.202769</td><td>gamma</td></tr>\n",
       "<tr><td>8.95615</td><td>4.65419e-13</td><td>5</td><td>0.0940542</td><td>gamma</td></tr>\n",
       "<tr><td>12.6509</td><td>6.65067e-13</td><td>5</td><td>0.0507529</td><td>gamma</td></tr>\n",
       "<tr><td>17.8699</td><td>7.96271e-13</td><td>5</td><td>0.0300523</td><td>gamma</td></tr>\n",
       "<tr><td>25.2419</td><td>1.12581e-12</td><td>5</td><td>0.0137948</td><td>gamma</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=20>\n",
       "  energy      e2dnde     excess background  criterion  \n",
       "   TeV    erg / (cm2 s)                                \n",
       " float64     float64    float64  float64     bytes12   \n",
       "--------- ------------- ------- ---------- ------------\n",
       "0.0356551   9.81443e-12 199.602    3611.86 significance\n",
       "0.0503641   7.44863e-12 141.851    1808.46 significance\n",
       "0.0711412   3.34717e-12 94.6081    792.485 significance\n",
       "  0.10049   1.83443e-12  67.225    392.809 significance\n",
       " 0.141945    1.3367e-12 47.1992    188.424 significance\n",
       " 0.200503   9.51624e-13 31.7001    81.2163 significance\n",
       " 0.283218   6.50443e-13 21.7761    35.9296 significance\n",
       " 0.400056    5.2438e-13 15.1912    15.9406 significance\n",
       " 0.565095   3.83121e-13 11.1615     7.6638 significance\n",
       " 0.798218   3.35256e-13 8.29778    3.60441 significance\n",
       "  1.12751   2.90424e-13 6.55695    1.87455 significance\n",
       "  1.59265   2.42006e-13 5.69212    1.22178 significance\n",
       "  2.24968   2.16291e-13       5    0.78233        gamma\n",
       "  3.17776   2.29643e-13       5   0.499028        gamma\n",
       "  4.48871   2.73642e-13       5   0.340861        gamma\n",
       "  6.34047   3.57511e-13       5   0.202769        gamma\n",
       "  8.95615   4.65419e-13       5  0.0940542        gamma\n",
       "  12.6509   6.65067e-13       5  0.0507529        gamma\n",
       "  17.8699   7.96271e-13       5  0.0300523        gamma\n",
       "  25.2419   1.12581e-12       5  0.0137948        gamma"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the results table\n",
    "sensitivity_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save it to file (could use e.g. format of CSV or ECSV or FITS)\n",
    "# sensitivity_table.write('sensitivity.ecsv', format='ascii.ecsv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY8AAAEKCAYAAADq59mMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy86wFpkAAAACXBIWXMAAAsTAAALEwEAmpwYAAAse0lEQVR4nO3dd5zU1fX/8ddZWFlAQEVcQFRAVEQQREoUFTCKGsUSQMUSCQix9xLsgfhFo8YWG4q9oaLYe8fyk2ZDVAySSEBRYgARZYHz++MOsK4zszO7O/OZ8n4+HvPYmU+ZOeyH3bP3c+8919wdERGRdJREHYCIiOQfJQ8REUmbkoeIiKRNyUNERNKm5CEiImlT8hARkbTVjzqAbNh00029bdu2UYchIpJXpk+f/p27t4i3ryiSR9u2bZk2bVrUYYiI5BUz+1eifbptJSIiaVPyEBGRtCl5iIhI2nK+z8PM2gPnA83cfXCibSKS3yoqKpg/fz4//fRT1KEUnbKyMtq0aUNpaWnK52Q0eZjZ7cABwCJ371xp+77AtUA94DZ3vyzRe7j7XGCEmT2SbFudatkSvvnm19vLy+HrrzPykSLFbv78+TRp0oS2bdtiZlGHUzTcncWLFzN//nzatWuX8nmZvm11J7Bv5Q1mVg+4AdgP6AQMNbNOZtbFzJ6q8tgsw/HFFy9xJNsuIrX2008/0bx5cyWOLDMzmjdvnnaLL6MtD3d/w8zaVtncC/gi1nrAzB4EDnL3cYRWSp0ws1HAKIAtt9yyrt5WRDJIiSMaNfm+R9FhvjnwVaXX82Pb4jKz5mZ2M7CTmY1OtK0qdx/v7j3cvUeLFnHnuIiIVOvYY4/lk08+qdG5CxYsYPDg9d2yQ4cOZccdd+Tqq6/moosu4qWXXqqrMLMuig7zeCku4YpU7r4YOK66bSJSRLLYL3nbbbfV+NzWrVvzyCOha/brr7/m7bff5l//SjjvLq9E0fKYD2xR6XUbYEEEcdTMkiVRRyAiGeqXXL58Ofvvvz9du3alc+fOTJw4kX79+q2rUDFhwgS23XZb+vXrx8iRIznppJMAGDZsGKeccgq77ror7du3X5cw5s2bR+fOYazQgAEDWLRoEd26dePNN99k2LBh646bOnUqu+66K127dqVXr14sW7aMefPmsfvuu9O9e3e6d+/O22+/DcBrr71Gv379GDx4MB07duTII49k7Yqw8d5n9erVnH322fTs2ZMdd9yRW265pVbfo7WiaHlMBbYxs3bAf4DDgSMiiCOx8vLE/wn32AOefRZat85uTCLF5LTT4P33a3Zuv37xt3frBtdck/TU5557jtatW/P0008DsGTJEm666SYg3IIaO3YsM2bMoEmTJuy555507dp13bkLFy5kypQpfPrppxx44IG/uF0F8MQTT3DAAQfwfuzfNWHCBABWrlzJYYcdxsSJE+nZsydLly6lYcOGbLbZZrz44ouUlZUxZ84chg4dui6JzZw5k1mzZtG6dWv69OnDW2+9Ra9eveK+z4QJE2jWrBlTp07l559/pk+fPgwYMCCtkVXxZLTlYWYPAO8A25nZfDMb4e6rgJOA54HZwEPuPiuTcaTt66/B/dePF16AuXNhl11g9uyooxSROtalSxdeeuklzj33XN58802aNWu2bt97771H37592WSTTSgtLWXIkCG/OPfggw+mpKSETp068U0aLaDPPvuMVq1a0bNnTwCaNm1K/fr1qaioYOTIkXTp0oUhQ4b8ot+lV69etGnThpKSErp168a8efMSvs8LL7zA3XffTbdu3ejduzeLFy9mzpw5tfk2AZkfbTU0wfZngGcy+dkAZjYQGNihQ4e6ecO994Y33oD99oM+feCJJ2C33ermvUVkvWpaCCQbHfTaazX+2G233Zbp06fzzDPPMHr0aAYMGLBu39pbQ4k0aNAg5WMrc/e4o52uvvpqysvL+eCDD1izZg1lZWVxP6tevXqsWrUq4fu4O9dffz377LNPyjGloqDLk7j7k+4+qvJfD7W2007wzjvQokVIJo89VnfvLSKRWrBgAY0aNeKoo47irLPOYsaMGev29erVi9dff53vv/+eVatWMWnSpDr5zI4dO7JgwQKmTp0KwLJly1i1ahVLliyhVatWlJSUcM8997B69eoavc8+++zDTTfdREVFBQCff/45y5cvr3XcOV+eJCe1awdvvQUHHACDBsE//gEnnBB1VCLFI1G/ZHl5rd72o48+4uyzz6akpITS0lJuuukmzjrrLAA233xzzjvvPHr37k3r1q3p1KkTdfGH6QYbbMDEiRM5+eSTWbFiBQ0bNuSll17ihBNOYNCgQTz88MP079+fxo0b1+h9jj32WObNm0f37t1xd1q0aMHkyZNrHbel07zKVz169PCM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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the sensitivity curve\n",
    "t = sensitivity_table\n",
    "\n",
    "is_s = t[\"criterion\"] == \"significance\"\n",
    "plt.plot(\n",
    "    t[\"energy\"][is_s],\n",
    "    t[\"e2dnde\"][is_s],\n",
    "    \"s-\",\n",
    "    color=\"red\",\n",
    "    label=\"significance\",\n",
    ")\n",
    "\n",
    "is_g = t[\"criterion\"] == \"gamma\"\n",
    "plt.plot(\n",
    "    t[\"energy\"][is_g], t[\"e2dnde\"][is_g], \"*-\", color=\"blue\", label=\"gamma\"\n",
    ")\n",
    "\n",
    "plt.loglog()\n",
    "plt.xlabel(f\"Energy ({t['energy'].unit})\")\n",
    "plt.ylabel(f\"Sensitivity ({t['e2dnde'].unit})\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We add some control plots showing the expected number of background counts per bin and the ON region size cut (here the 68% containment radius of the PSF)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.01, 0.5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot expected number of counts for signal and background\n",
    "fig, ax1 = plt.subplots()\n",
    "# ax1.plot( t[\"energy\"], t[\"excess\"],\"o-\", color=\"red\", label=\"signal\")\n",
    "ax1.plot(\n",
    "    t[\"energy\"], t[\"background\"], \"o-\", color=\"black\", label=\"blackground\"\n",
    ")\n",
    "\n",
    "ax1.loglog()\n",
    "ax1.set_xlabel(f\"Energy ({t['energy'].unit})\")\n",
    "ax1.set_ylabel(\"Expected number of bkg counts\")\n",
    "\n",
    "ax2 = ax1.twinx()\n",
    "ax2.set_ylabel(f\"ON region radius ({on_radii.unit})\", color=\"red\")\n",
    "ax2.semilogy(t[\"energy\"], on_radii, color=\"red\", label=\"PSF68\")\n",
    "ax2.tick_params(axis=\"y\", labelcolor=\"red\")\n",
    "ax2.set_ylim(0.01, 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Also compute the sensitivity for a 20 hour observation\n",
    "* Compare how the sensitivity differs between 5 and 20 hours by plotting the ratio as a function of energy."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
