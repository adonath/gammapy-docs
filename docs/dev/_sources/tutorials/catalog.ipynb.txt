{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/catalog.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[catalog.ipynb](../_static/notebooks/catalog.ipynb) |\n",
    "[catalog.py](../_static/notebooks/catalog.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Source catalogs\n",
    "\n",
    "`~gammapy.catalog` provides convenient access to common gamma-ray source catalogs. E.g. creating a spectral model and spectral points for a given Fermi-LAT catalog and source from the FITS table is tedious, `~gammapy.catalog` has this implemented and makes it easy.\n",
    "\n",
    "In this tutorial you will learn how to:\n",
    "\n",
    "- List available catalogs\n",
    "- Load a catalog\n",
    "- Select a source\n",
    "- Pretty-print the source information\n",
    "- Get source spectral and spatial models\n",
    "- Get flux points (if available)\n",
    "- Get lightcurves (if available)\n",
    "- Access the source catalog table data\n",
    "\n",
    "In this tutorial we will show examples using the following catalogs:\n",
    "\n",
    "- `~gammapy.catalog.SourceCatalogHGPS`\n",
    "- `~gammapy.catalog.SourceCatalogGammaCat`\n",
    "- `~gammapy.catalog.SourceCatalog3FHL`\n",
    "- `~gammapy.catalog.SourceCatalog4FGL`\n",
    "\n",
    "All catalog and source classes work the same, as long as some information is available. E.g. trying to access a lightcurve from a catalog and source that doesn't have that information will return ``None``.\n",
    "\n",
    "Further information is available at `~gammapy.catalog`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:51.488736Z",
     "iopub.status.busy": "2020-11-19T14:16:51.488159Z",
     "iopub.status.idle": "2020-11-19T14:16:51.764755Z",
     "shell.execute_reply": "2020-11-19T14:16:51.763628Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:51.768675Z",
     "iopub.status.busy": "2020-11-19T14:16:51.767793Z",
     "iopub.status.idle": "2020-11-19T14:16:52.716540Z",
     "shell.execute_reply": "2020-11-19T14:16:52.715531Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.units as u\n",
    "from gammapy.catalog import CATALOG_REGISTRY"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## List available catalogs\n",
    "\n",
    "`~gammapy.catalog` contains a catalog registry ``CATALOG_REGISTRY``, which maps catalog names (e.g. \"3fhl\") to catalog classes (e.g. ``SourceCatalog3FHL``). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:52.723002Z",
     "iopub.status.busy": "2020-11-19T14:16:52.722515Z",
     "iopub.status.idle": "2020-11-19T14:16:52.725650Z",
     "shell.execute_reply": "2020-11-19T14:16:52.726147Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[gammapy.catalog.gammacat.SourceCatalogGammaCat,\n",
       " gammapy.catalog.hess.SourceCatalogHGPS,\n",
       " gammapy.catalog.hawc.SourceCatalog2HWC,\n",
       " gammapy.catalog.fermi.SourceCatalog3FGL,\n",
       " gammapy.catalog.fermi.SourceCatalog4FGL,\n",
       " gammapy.catalog.fermi.SourceCatalog2FHL,\n",
       " gammapy.catalog.fermi.SourceCatalog3FHL]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CATALOG_REGISTRY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:52.730884Z",
     "iopub.status.busy": "2020-11-19T14:16:52.730368Z",
     "iopub.status.idle": "2020-11-19T14:16:52.732648Z",
     "shell.execute_reply": "2020-11-19T14:16:52.733170Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[gammapy.catalog.gammacat.SourceCatalogGammaCat,\n",
       " gammapy.catalog.hess.SourceCatalogHGPS,\n",
       " gammapy.catalog.hawc.SourceCatalog2HWC,\n",
       " gammapy.catalog.fermi.SourceCatalog3FGL,\n",
       " gammapy.catalog.fermi.SourceCatalog4FGL,\n",
       " gammapy.catalog.fermi.SourceCatalog2FHL,\n",
       " gammapy.catalog.fermi.SourceCatalog3FHL]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(CATALOG_REGISTRY)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load catalogs\n",
    "\n",
    "If you have run `gammapy download datasets` or `gammapy download tutorials`,\n",
    "you have a copy of the catalogs as FITS files in `$GAMMAPY_DATA/catalogs`,\n",
    "and that is the default location where `~gammapy.catalog` loads from.\n",
    "\n",
    "You can load a catalog by name via `CATALOG_REGISTRY.get_cls(name)()` (note the `()` to instantiate a catalog object from the catalog class - only this will load the catalog and be useful), or by importing the catalog class (e.g. `SourceCatalog3FGL`) directly. The two ways are equivalent, the result will be the same.\n",
    "\n",
    "Note that `$GAMMAPY_DATA/catalogs` is just the default, you could pass a different `filename` when creating the catalog."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:52.736714Z",
     "iopub.status.busy": "2020-11-19T14:16:52.736236Z",
     "iopub.status.idle": "2020-11-19T14:16:52.886312Z",
     "shell.execute_reply": "2020-11-19T14:16:52.885521Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2HWC.ecsv\r\n",
      "2HWC.yaml\r\n",
      "README.rst\r\n",
      "fermi\r\n",
      "gammacat\r\n",
      "hgps_catalog_v1.fits.gz\r\n",
      "make_2hwc.py\r\n"
     ]
    }
   ],
   "source": [
    "!ls -1 $GAMMAPY_DATA/catalogs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:52.891921Z",
     "iopub.status.busy": "2020-11-19T14:16:52.891431Z",
     "iopub.status.idle": "2020-11-19T14:16:53.138989Z",
     "shell.execute_reply": "2020-11-19T14:16:53.139881Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.catalog.fermi.SourceCatalog3FGL at 0x7f1c54fe9a90>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Catalog object - FITS file is loaded\n",
    "catalog = CATALOG_REGISTRY.get_cls(\"3fgl\")()\n",
    "catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:53.144596Z",
     "iopub.status.busy": "2020-11-19T14:16:53.144045Z",
     "iopub.status.idle": "2020-11-19T14:16:53.386226Z",
     "shell.execute_reply": "2020-11-19T14:16:53.386990Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.catalog.fermi.SourceCatalog3FGL at 0x7f1c815f6ef0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from gammapy.catalog import SourceCatalog3FGL\n",
    "\n",
    "catalog = SourceCatalog3FGL()\n",
    "catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:53.390974Z",
     "iopub.status.busy": "2020-11-19T14:16:53.390466Z",
     "iopub.status.idle": "2020-11-19T14:16:54.210770Z",
     "shell.execute_reply": "2020-11-19T14:16:54.210022Z"
    }
   },
   "outputs": [],
   "source": [
    "# Let's load the source catalogs we will use throughout this tutorial\n",
    "catalog_gammacat = CATALOG_REGISTRY.get_cls(\"gamma-cat\")()\n",
    "catalog_3fhl = CATALOG_REGISTRY.get_cls(\"3fhl\")()\n",
    "catalog_4fgl = CATALOG_REGISTRY.get_cls(\"4fgl\")()\n",
    "catalog_hgps = CATALOG_REGISTRY.get_cls(\"hgps\")()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select a source\n",
    "\n",
    "To create a source object, index into the catalog using `[]`, passing a catalog table row index (zero-based, first row is `[0]`), or a source name. If passing a name, catalog table columns with source names and association names (\"ASSOC1\" in the example below) are searched top to bottom. There is no name resolution web query."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:54.218981Z",
     "iopub.status.busy": "2020-11-19T14:16:54.217758Z",
     "iopub.status.idle": "2020-11-19T14:16:54.220228Z",
     "shell.execute_reply": "2020-11-19T14:16:54.220727Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.catalog.fermi.SourceCatalogObject4FGL at 0x7f1c55013198>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source = catalog_4fgl[42]\n",
    "source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:54.225189Z",
     "iopub.status.busy": "2020-11-19T14:16:54.224684Z",
     "iopub.status.idle": "2020-11-19T14:16:54.226914Z",
     "shell.execute_reply": "2020-11-19T14:16:54.227397Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42, '4FGL J0010.8-2154')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.row_index, source.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:54.260763Z",
     "iopub.status.busy": "2020-11-19T14:16:54.249917Z",
     "iopub.status.idle": "2020-11-19T14:16:56.252363Z",
     "shell.execute_reply": "2020-11-19T14:16:56.251567Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.catalog.fermi.SourceCatalogObject4FGL at 0x7f1c851ccd30>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source = catalog_4fgl[\"4FGL J0010.8-2154\"]\n",
    "source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:56.256959Z",
     "iopub.status.busy": "2020-11-19T14:16:56.256441Z",
     "iopub.status.idle": "2020-11-19T14:16:56.258746Z",
     "shell.execute_reply": "2020-11-19T14:16:56.259232Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42, '4FGL J0010.8-2154')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.row_index, source.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:56.263167Z",
     "iopub.status.busy": "2020-11-19T14:16:56.262663Z",
     "iopub.status.idle": "2020-11-19T14:16:56.264871Z",
     "shell.execute_reply": "2020-11-19T14:16:56.265350Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'PKS 0008-222                '"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.data[\"ASSOC1\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:56.292953Z",
     "iopub.status.busy": "2020-11-19T14:16:56.282575Z",
     "iopub.status.idle": "2020-11-19T14:16:57.289674Z",
     "shell.execute_reply": "2020-11-19T14:16:57.290085Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42, '4FGL J0010.8-2154')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source = catalog_4fgl[\"PKS 0008-222\"]\n",
    "source.row_index, source.name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pretty-print source information\n",
    "\n",
    "A source object has a nice string representation that you can print.\n",
    "You can also call `source.info()` instead and pass an option what information to print."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:57.300702Z",
     "iopub.status.busy": "2020-11-19T14:16:57.300187Z",
     "iopub.status.idle": "2020-11-19T14:16:57.304572Z",
     "shell.execute_reply": "2020-11-19T14:16:57.304037Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "*** Basic info ***\n",
      "\n",
      "Catalog row index (zero-based) : 18\n",
      "Source name          : HESS J1514-591\n",
      "Analysis reference   : HGPS\n",
      "Source class         : PWN\n",
      "Identified object    : MSH 15-52\n",
      "Gamma-Cat id         : 79\n",
      "\n",
      "\n",
      "*** Info from map analysis ***\n",
      "\n",
      "RA                   :  228.499 deg = 15h14m00s\n",
      "DEC                  :  -59.161 deg = -59d09m41s\n",
      "GLON                 :  320.315 +/- 0.008 deg\n",
      "GLAT                 :   -1.188 +/- 0.007 deg\n",
      "Position Error (68%) : 0.020 deg\n",
      "Position Error (95%) : 0.033 deg\n",
      "ROI number           : 13\n",
      "Spatial model        : 3-Gaussian\n",
      "Spatial components   : HGPSC 023, HGPSC 024, HGPSC 025\n",
      "TS                   : 1763.4\n",
      "sqrt(TS)             : 42.0\n",
      "Size                 : 0.145 +/- 0.026 (UL: nan) deg\n",
      "R70                  : 0.215 deg\n",
      "RSpec                : 0.215 deg\n",
      "Total model excess   : 3502.8\n",
      "Excess in RSpec      : 2440.5\n",
      "Model Excess in RSpec : 2414.3\n",
      "Background in RSpec  : 1052.5\n",
      "Livetime             : 41.4 hours\n",
      "Energy threshold     : 0.61 TeV\n",
      "Source flux (>1 TeV) : (6.434 +/- 0.211) x 10^-12 cm^-2 s^-1 = (28.47 +/- 0.94) % Crab\n",
      "\n",
      "Fluxes in RSpec (> 1 TeV):\n",
      "Map measurement                : 4.552 x 10^-12 cm^-2 s^-1 = 20.14 % Crab\n",
      "Source model                   : 4.505 x 10^-12 cm^-2 s^-1 = 19.94 % Crab\n",
      "Other component model          : 0.000 x 10^-12 cm^-2 s^-1 =  0.00 % Crab\n",
      "Large scale component model    : 0.000 x 10^-12 cm^-2 s^-1 =  0.00 % Crab\n",
      "Total model                    : 4.505 x 10^-12 cm^-2 s^-1 = 19.94 % Crab\n",
      "Containment in RSpec                :  70.0 %\n",
      "Contamination in RSpec              :   0.0 %\n",
      "Flux correction (RSpec -> Total)    : 142.8 %\n",
      "Flux correction (Total -> RSpec)    :  70.0 %\n",
      "\n",
      "*** Info from spectral analysis ***\n",
      "\n",
      "Livetime             : 13.7 hours\n",
      "Energy range:        : 0.38 to 61.90 TeV\n",
      "Background           : 1825.9\n",
      "Excess               : 2061.1\n",
      "Spectral model       : ECPL\n",
      "TS ECPL over PL      : 10.2\n",
      "Best-fit model flux(> 1 TeV) : (5.720 +/- 0.417) x 10^-12 cm^-2 s^-1  = (25.31 +/- 1.84) % Crab\n",
      "Best-fit model energy flux(1 to 10 TeV) : (20.779 +/- 1.878) x 10^-12 erg cm^-2 s^-1\n",
      "Pivot energy         : 1.54 TeV\n",
      "Flux at pivot energy : (2.579 +/- 0.083) x 10^-12 cm^-2 s^-1 TeV^-1  = (11.41 +/- 0.24) % Crab\n",
      "PL   Flux(> 1 TeV)   : (5.437 +/- 0.186) x 10^-12 cm^-2 s^-1  = (24.06 +/- 0.82) % Crab\n",
      "PL   Flux(@ 1 TeV)   : (6.868 +/- 0.241) x 10^-12 cm^-2 s^-1 TeV^-1  = (30.39 +/- 0.69) % Crab\n",
      "PL   Index           : 2.26 +/- 0.03\n",
      "ECPL   Flux(@ 1 TeV) : (6.860 +/- 0.252) x 10^-12 cm^-2 s^-1 TeV^-1  = (30.35 +/- 0.72) % Crab\n",
      "ECPL   Flux(> 1 TeV) : (5.720 +/- 0.417) x 10^-12 cm^-2 s^-1  = (25.31 +/- 1.84) % Crab\n",
      "ECPL Index           : 2.05 +/- 0.06\n",
      "ECPL Lambda          : 0.052 +/- 0.014 TeV^-1\n",
      "ECPL E_cut           : 19.20 +/- 5.01 TeV\n",
      "\n",
      "*** Flux points info ***\n",
      "\n",
      "Number of flux points: 6\n",
      "Flux points table: \n",
      "\n",
      "e_ref  e_min  e_max        dnde         dnde_errn       dnde_errp        dnde_ul     is_ul\n",
      " TeV    TeV    TeV   1 / (cm2 s TeV) 1 / (cm2 s TeV) 1 / (cm2 s TeV) 1 / (cm2 s TeV)      \n",
      "------ ------ ------ --------------- --------------- --------------- --------------- -----\n",
      " 0.562  0.383  0.825       2.439e-11       1.419e-12       1.509e-12       2.732e-11 False\n",
      " 1.212  0.825  1.778       4.439e-12       2.489e-13       2.654e-13       4.970e-12 False\n",
      " 2.738  1.778  4.217       7.295e-13       4.788e-14       4.898e-14       8.302e-13 False\n",
      " 6.190  4.217  9.085       1.305e-13       1.220e-14       1.282e-14       1.571e-13 False\n",
      "13.991  9.085 21.544       1.994e-14       2.723e-15       2.858e-15       2.588e-14 False\n",
      "31.623 21.544 46.416       9.474e-16       3.480e-16       4.329e-16       1.919e-15 False\n",
      "\n",
      "*** Gaussian component info ***\n",
      "\n",
      "Number of components: 3\n",
      "Spatial components   : HGPSC 023, HGPSC 024, HGPSC 025\n",
      "\n",
      "Component HGPSC 023:\n",
      "GLON                 :  320.303 +/- 0.005 deg\n",
      "GLAT                 :   -1.124 +/- 0.007 deg\n",
      "Size                 : 0.057 +/- 0.005 deg\n",
      "Flux (>1 TeV)        : (2.01 +/- 0.23) x 10^-12 cm^-2 s^-1 = (8.9 +/- 1.0) % Crab\n",
      "\n",
      "Component HGPSC 024:\n",
      "GLON                 :  320.298 +/- 0.020 deg\n",
      "GLAT                 :   -1.168 +/- 0.021 deg\n",
      "Size                 : 0.206 +/- 0.020 deg\n",
      "Flux (>1 TeV)        : (2.54 +/- 0.29) x 10^-12 cm^-2 s^-1 = (11.2 +/- 1.3) % Crab\n",
      "\n",
      "Component HGPSC 025:\n",
      "GLON                 :  320.351 +/- 0.005 deg\n",
      "GLAT                 :   -1.284 +/- 0.007 deg\n",
      "Size                 : 0.055 +/- 0.005 deg\n",
      "Flux (>1 TeV)        : (1.88 +/- 0.22) x 10^-12 cm^-2 s^-1 = (8.3 +/- 1.0) % Crab\n",
      "\n",
      "\n",
      "*** Source associations info ***\n",
      "\n",
      "  Source_Name    Association_Catalog    Association_Name   Separation\n",
      "                                                              deg    \n",
      "---------------- ------------------- --------------------- ----------\n",
      "  HESS J1514-591                2FHL    2FHL J1514.0-5915e   0.098903\n",
      "  HESS J1514-591                3FGL     3FGL J1513.9-5908   0.026914\n",
      "  HESS J1514-591                3FGL    3FGL J1514.0-5915e   0.094834\n",
      "  HESS J1514-591                COMP            G320.4-1.2   0.070483\n",
      "  HESS J1514-591                 PSR              B1509-58   0.026891\n",
      "\n",
      "*** Source identification info ***\n",
      "\n",
      "Source_Name: HESS J1514-591\n",
      "Identified_Object: MSH 15-52\n",
      "Class: PWN\n",
      "Evidence: Morphology\n",
      "Reference: 2005A%26A...435L..17A\n",
      "Distance_Reference: SNRCat\n",
      "Distance: 5.199999809265137 kpc\n",
      "Distance_Min: 3.799999952316284 kpc\n",
      "Distance_Max: 6.599999904632568 kpc\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = catalog_hgps[\"MSH 15-52\"]\n",
    "print(source)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:57.309370Z",
     "iopub.status.busy": "2020-11-19T14:16:57.308348Z",
     "iopub.status.idle": "2020-11-19T14:16:57.310633Z",
     "shell.execute_reply": "2020-11-19T14:16:57.311130Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "*** Source associations info ***\n",
      "\n",
      "  Source_Name    Association_Catalog    Association_Name   Separation\n",
      "                                                              deg    \n",
      "---------------- ------------------- --------------------- ----------\n",
      "  HESS J1514-591                2FHL    2FHL J1514.0-5915e   0.098903\n",
      "  HESS J1514-591                3FGL     3FGL J1513.9-5908   0.026914\n",
      "  HESS J1514-591                3FGL    3FGL J1514.0-5915e   0.094834\n",
      "  HESS J1514-591                COMP            G320.4-1.2   0.070483\n",
      "  HESS J1514-591                 PSR              B1509-58   0.026891\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(source.info(\"associations\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Source models\n",
    "\n",
    "The `~gammapy.catalog.SourceCatalogObject` classes have a `sky_model()` model\n",
    "which creates a `gammapy.modeling.models.SkyModel` object, with model parameter\n",
    "values and parameter errors from the catalog filled in.\n",
    "\n",
    "In most cases, the `spectral_model()` method provides the `gammapy.modeling.models.SpectralModel`\n",
    "part of the sky model, and the `spatial_model()` method the `gammapy.modeling.models.SpatialModel`\n",
    "part individually.\n",
    "\n",
    "We use the `gammapy.catalog.SourceCatalog3FHL` for the examples in this section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:57.324019Z",
     "iopub.status.busy": "2020-11-19T14:16:57.323505Z",
     "iopub.status.idle": "2020-11-19T14:16:58.322444Z",
     "shell.execute_reply": "2020-11-19T14:16:58.321846Z"
    }
   },
   "outputs": [],
   "source": [
    "source = catalog_4fgl[\"PKS 2155-304\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:58.334773Z",
     "iopub.status.busy": "2020-11-19T14:16:58.333645Z",
     "iopub.status.idle": "2020-11-19T14:16:58.349275Z",
     "shell.execute_reply": "2020-11-19T14:16:58.349772Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SkyModel(spatial_model=<gammapy.modeling.models.spatial.PointSpatialModel object at 0x7f1c54fe10b8>, spectral_model=<gammapy.modeling.models.spectral.LogParabolaSpectralModel object at 0x7f1c54fe9cc0>)temporal_model=None)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = source.sky_model()\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:58.354493Z",
     "iopub.status.busy": "2020-11-19T14:16:58.353395Z",
     "iopub.status.idle": "2020-11-19T14:16:58.355681Z",
     "shell.execute_reply": "2020-11-19T14:16:58.356173Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : 4FGL J2158.8-3013\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : LogParabolaSpectralModel\n",
      "  Spatial  model type       : PointSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    amplitude               :   1.38e-05  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   0.001  TeV         \n",
      "    alpha                   :   1.763              \n",
      "    beta                    :   0.042              \n",
      "    lon_0                   : 329.714  deg         \n",
      "    lat_0                   : -30.225  deg         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:58.361992Z",
     "iopub.status.busy": "2020-11-19T14:16:58.360881Z",
     "iopub.status.idle": "2020-11-19T14:16:58.363175Z",
     "shell.execute_reply": "2020-11-19T14:16:58.363662Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PointSpatialModel\n",
      "\n",
      " name    value    unit    min        max    frozen   error  \n",
      "----- ----------- ---- ---------- --------- ------ ---------\n",
      "lon_0  3.2971e+02  deg        nan       nan  False 3.735e-03\n",
      "lat_0 -3.0225e+01  deg -9.000e+01 9.000e+01  False 3.227e-03\n"
     ]
    }
   ],
   "source": [
    "print(model.spatial_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:58.369520Z",
     "iopub.status.busy": "2020-11-19T14:16:58.368425Z",
     "iopub.status.idle": "2020-11-19T14:16:58.370695Z",
     "shell.execute_reply": "2020-11-19T14:16:58.371184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogParabolaSpectralModel\n",
      "\n",
      "   name     value         unit      min max frozen   error  \n",
      "--------- ---------- -------------- --- --- ------ ---------\n",
      "amplitude 1.3769e-05 cm-2 s-1 TeV-1 nan nan  False 1.801e-07\n",
      "reference 1.1365e-03            TeV nan nan   True 0.000e+00\n",
      "    alpha 1.7632e+00                nan nan  False 1.332e-02\n",
      "     beta 4.1718e-02                nan nan  False 4.680e-03\n"
     ]
    }
   ],
   "source": [
    "print(model.spectral_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:58.395612Z",
     "iopub.status.busy": "2020-11-19T14:16:58.387405Z",
     "iopub.status.idle": "2020-11-19T14:16:59.042118Z",
     "shell.execute_reply": "2020-11-19T14:16:59.041647Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:405: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:406: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy [TeV]', ylabel='E2 * Flux [erg / (cm2 s)]'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = (100 * u.MeV, 100 * u.GeV)\n",
    "opts = dict(energy_power=2, flux_unit=\"erg-1 cm-2 s-1\")\n",
    "model.spectral_model.plot(energy_range, **opts)\n",
    "model.spectral_model.plot_error(energy_range, **opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Flux points\n",
    "\n",
    "The flux points are available via the `flux_points` property as a `gammapy.spectrum.FluxPoints` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:16:59.065320Z",
     "iopub.status.busy": "2020-11-19T14:16:59.054830Z",
     "iopub.status.idle": "2020-11-19T14:17:00.070969Z",
     "shell.execute_reply": "2020-11-19T14:17:00.069460Z"
    }
   },
   "outputs": [],
   "source": [
    "source = catalog_4fgl[\"PKS 2155-304\"]\n",
    "flux_points = source.flux_points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:00.074790Z",
     "iopub.status.busy": "2020-11-19T14:17:00.074296Z",
     "iopub.status.idle": "2020-11-19T14:17:00.079384Z",
     "shell.execute_reply": "2020-11-19T14:17:00.078728Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FluxPoints(sed_type='flux', n_points=7)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flux_points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:00.084609Z",
     "iopub.status.busy": "2020-11-19T14:17:00.084110Z",
     "iopub.status.idle": "2020-11-19T14:17:00.088324Z",
     "shell.execute_reply": "2020-11-19T14:17:00.088831Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=7</i>\n",
       "<table id=\"table139759647338280\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>e_min</th><th>e_max</th><th>flux</th><th>flux_errn</th></tr></thead>\n",
       "<thead><tr><th>MeV</th><th>MeV</th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float32</th><th>float32</th></tr></thead>\n",
       "<tr><td>50.0</td><td>100.0</td><td>7.72853e-08</td><td>4.0041947e-08</td></tr>\n",
       "<tr><td>100.0</td><td>300.0</td><td>6.633264e-08</td><td>3.3468415e-09</td></tr>\n",
       "<tr><td>300.0</td><td>1000.0</td><td>3.2824694e-08</td><td>6.9634254e-10</td></tr>\n",
       "<tr><td>1000.0</td><td>3000.0</td><td>1.2609229e-08</td><td>2.4615918e-10</td></tr>\n",
       "<tr><td>3000.0</td><td>10000.0</td><td>5.407803e-09</td><td>1.3989285e-10</td></tr>\n",
       "<tr><td>10000.0</td><td>30000.0</td><td>1.7188525e-09</td><td>7.4735836e-11</td></tr>\n",
       "<tr><td>30000.0</td><td>300000.0</td><td>6.818578e-10</td><td>4.5728827e-11</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=7>\n",
       " e_min   e_max        flux       flux_errn  \n",
       "  MeV     MeV     1 / (cm2 s)   1 / (cm2 s) \n",
       "float64 float64     float32       float32   \n",
       "------- -------- ------------- -------------\n",
       "   50.0    100.0   7.72853e-08 4.0041947e-08\n",
       "  100.0    300.0  6.633264e-08 3.3468415e-09\n",
       "  300.0   1000.0 3.2824694e-08 6.9634254e-10\n",
       " 1000.0   3000.0 1.2609229e-08 2.4615918e-10\n",
       " 3000.0  10000.0  5.407803e-09 1.3989285e-10\n",
       "10000.0  30000.0 1.7188525e-09 7.4735836e-11\n",
       "30000.0 300000.0  6.818578e-10 4.5728827e-11"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flux_points.table[[\"e_min\", \"e_max\", \"flux\", \"flux_errn\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:00.112651Z",
     "iopub.status.busy": "2020-11-19T14:17:00.102710Z",
     "iopub.status.idle": "2020-11-19T14:17:00.662286Z",
     "shell.execute_reply": "2020-11-19T14:17:00.661732Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:667: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy (TeV)', ylabel='flux (1 / (cm2 s))'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flux_points.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lightcurves\n",
    "\n",
    "The Fermi catalogs contain lightcurves for each source. It is available via the `source.lightcurve` property as a `~gammapy.time.LightCurve` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:00.675379Z",
     "iopub.status.busy": "2020-11-19T14:17:00.674887Z",
     "iopub.status.idle": "2020-11-19T14:17:01.692113Z",
     "shell.execute_reply": "2020-11-19T14:17:01.691622Z"
    }
   },
   "outputs": [],
   "source": [
    "lightcurve = catalog_4fgl[\"4FGL J0349.8-2103\"].lightcurve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.695613Z",
     "iopub.status.busy": "2020-11-19T14:17:01.695104Z",
     "iopub.status.idle": "2020-11-19T14:17:01.699054Z",
     "shell.execute_reply": "2020-11-19T14:17:01.698623Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LightCurve(len=8)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lightcurve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.704211Z",
     "iopub.status.busy": "2020-11-19T14:17:01.703737Z",
     "iopub.status.idle": "2020-11-19T14:17:01.705926Z",
     "shell.execute_reply": "2020-11-19T14:17:01.706388Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=3</i>\n",
       "<table id=\"table139759645271488\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>time_min</th><th>time_max</th><th>flux</th><th>flux_errp</th><th>flux_errn</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float32</th><th>float32</th><th>float32</th></tr></thead>\n",
       "<tr><td>54682.655277777776</td><td>55047.603239293836</td><td>8.4104094e-08</td><td>4.119689e-09</td><td>4.119689e-09</td></tr>\n",
       "<tr><td>55047.603239293836</td><td>55412.55121238397</td><td>3.6117186e-08</td><td>3.434389e-09</td><td>3.434389e-09</td></tr>\n",
       "<tr><td>55412.55121238397</td><td>55777.4991854741</td><td>1.4224756e-08</td><td>2.7470255e-09</td><td>2.6878597e-09</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=3>\n",
       "     time_min           time_max           flux       flux_errp     flux_errn  \n",
       "                                       1 / (cm2 s)   1 / (cm2 s)   1 / (cm2 s) \n",
       "     float64            float64          float32       float32       float32   \n",
       "------------------ ------------------ ------------- ------------- -------------\n",
       "54682.655277777776 55047.603239293836 8.4104094e-08  4.119689e-09  4.119689e-09\n",
       "55047.603239293836  55412.55121238397 3.6117186e-08  3.434389e-09  3.434389e-09\n",
       " 55412.55121238397   55777.4991854741 1.4224756e-08 2.7470255e-09 2.6878597e-09"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lightcurve.table[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.733371Z",
     "iopub.status.busy": "2020-11-19T14:17:01.732367Z",
     "iopub.status.idle": "2020-11-19T14:17:01.855381Z",
     "shell.execute_reply": "2020-11-19T14:17:01.854833Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Time (MJD)', ylabel='Flux (cm-2 s-1)'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lightcurve.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Catalog table and source dictionary\n",
    "\n",
    "Source catalogs are given as `FITS` files that contain one or multiple tables.\n",
    "Above we showed how to get spectra, light curves and other information as Gammapy objects.\n",
    "\n",
    "However, you can also access the underlying `astropy.table.Table` for a catalog,\n",
    "and the row data as a Python `dict`. This can be useful if you want to do something\n",
    "that is not pre-scripted by the `~gammapy.catalog` classes, such as e.g. selecting\n",
    "sources by sky position or association class, or accessing special source information\n",
    "(like e.g. `Npred` in the example below).\n",
    "\n",
    "Note that you can also do a `for source in catalog` loop, to find or process\n",
    "sources of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.859802Z",
     "iopub.status.busy": "2020-11-19T14:17:01.859314Z",
     "iopub.status.idle": "2020-11-19T14:17:01.863559Z",
     "shell.execute_reply": "2020-11-19T14:17:01.863022Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "astropy.table.table.Table"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(catalog_3fhl.table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.867769Z",
     "iopub.status.busy": "2020-11-19T14:17:01.867261Z",
     "iopub.status.idle": "2020-11-19T14:17:01.869565Z",
     "shell.execute_reply": "2020-11-19T14:17:01.870053Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1556"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(catalog_3fhl.table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.880561Z",
     "iopub.status.busy": "2020-11-19T14:17:01.880077Z",
     "iopub.status.idle": "2020-11-19T14:17:01.882411Z",
     "shell.execute_reply": "2020-11-19T14:17:01.882914Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=3</i>\n",
       "<table id=\"table139759644369808\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>Source_Name</th><th>RAJ2000</th><th>DEJ2000</th></tr></thead>\n",
       "<thead><tr><th></th><th>deg</th><th>deg</th></tr></thead>\n",
       "<thead><tr><th>bytes18</th><th>float32</th><th>float32</th></tr></thead>\n",
       "<tr><td>3FHL J0001.2-0748</td><td>0.3107</td><td>-7.8075</td></tr>\n",
       "<tr><td>3FHL J0001.9-4155</td><td>0.4849</td><td>-41.9303</td></tr>\n",
       "<tr><td>3FHL J0002.1-6728</td><td>0.5283</td><td>-67.4825</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=3>\n",
       "   Source_Name     RAJ2000  DEJ2000 \n",
       "                     deg      deg   \n",
       "     bytes18       float32  float32 \n",
       "------------------ -------- --------\n",
       "3FHL J0001.2-0748    0.3107  -7.8075\n",
       "3FHL J0001.9-4155    0.4849 -41.9303\n",
       "3FHL J0002.1-6728    0.5283 -67.4825"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "catalog_3fhl.table[:3][[\"Source_Name\", \"RAJ2000\", \"DEJ2000\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:01.900125Z",
     "iopub.status.busy": "2020-11-19T14:17:01.894975Z",
     "iopub.status.idle": "2020-11-19T14:17:02.209786Z",
     "shell.execute_reply": "2020-11-19T14:17:02.208898Z"
    }
   },
   "outputs": [],
   "source": [
    "source = catalog_3fhl[\"PKS 2155-304\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:02.213876Z",
     "iopub.status.busy": "2020-11-19T14:17:02.213366Z",
     "iopub.status.idle": "2020-11-19T14:17:02.217485Z",
     "shell.execute_reply": "2020-11-19T14:17:02.216920Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3FHL J2158.8-3013 '"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.data[\"Source_Name\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:02.221713Z",
     "iopub.status.busy": "2020-11-19T14:17:02.221218Z",
     "iopub.status.idle": "2020-11-19T14:17:02.223499Z",
     "shell.execute_reply": "2020-11-19T14:17:02.223994Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "678.95544"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.data[\"Npred\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:02.239058Z",
     "iopub.status.busy": "2020-11-19T14:17:02.238548Z",
     "iopub.status.idle": "2020-11-19T14:17:02.240844Z",
     "shell.execute_reply": "2020-11-19T14:17:02.241368Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<SkyCoord (ICRS): (ra, dec) in deg\n",
       "    (329.71694946, -30.22418594)>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source.position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:02.324223Z",
     "iopub.status.busy": "2020-11-19T14:17:02.323671Z",
     "iopub.status.idle": "2020-11-19T14:17:06.126917Z",
     "shell.execute_reply": "2020-11-19T14:17:06.126185Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "352     3FHL J0534.5+2201    2.99e-10 1 / (cm2 s)\n",
      "553     3FHL J0851.9-4620e   1.24e-10 1 / (cm2 s)\n",
      "654     3FHL J1036.3-5833e   1.57e-10 1 / (cm2 s)\n",
      "691     3FHL J1104.4+3812    3.34e-10 1 / (cm2 s)\n",
      "1111    3FHL J1653.8+3945    1.27e-10 1 / (cm2 s)\n",
      "1219    3FHL J1824.5-1351e   1.77e-10 1 / (cm2 s)\n",
      "1361    3FHL J2028.6+4110e   1.75e-10 1 / (cm2 s)\n"
     ]
    }
   ],
   "source": [
    "# Find the brightest sources in the 100 to 200 GeV energy band\n",
    "for source in catalog_3fhl:\n",
    "    flux = (\n",
    "        source.spectral_model()\n",
    "        .integral(100 * u.GeV, 200 * u.GeV)\n",
    "        .to(\"cm-2 s-1\")\n",
    "    )\n",
    "    if flux > 1e-10 * u.Unit(\"cm-2 s-1\"):\n",
    "        print(f\"{source.row_index:<7d} {source.name:20s} {flux:.3g}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "- How many sources are in the 4FGL catalog? (try `len(catalog.table)`\n",
    "- What is the name of the source with row index 42?\n",
    "- What is the row index of the source with name \"4FGL J0536.1-1205\"?\n",
    "- What is the integral flux of \"4FGL J0536.1-1205\" in the energy range 100 GeV to 1 TeV according to the best-fit spectral model?\n",
    "- Which source in the HGPS catalog is closest to Galactic position `glon = 42 deg` and `glat = 0 deg`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-19T14:17:06.129932Z",
     "iopub.status.busy": "2020-11-19T14:17:06.129475Z",
     "iopub.status.idle": "2020-11-19T14:17:06.132760Z",
     "shell.execute_reply": "2020-11-19T14:17:06.132123Z"
    }
   },
   "outputs": [],
   "source": [
    "# Start coding here ..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Next steps\n",
    "\n",
    "`~gammapy.catalog` is mostly independent from the rest of Gammapy.\n",
    "Typically you use it to compare new analyses against catalog results, e.g. overplot the spectral model, or compare the source position.\n",
    "\n",
    "You can also use `~gammapy.catalog` in your scripts to create initial source models for your analyses.\n",
    "This is very common for Fermi-LAT, to start with a catalog model.\n",
    "For TeV analysis, especially in crowded Galactic regions, using the HGPS, gamma-cat or 2HWC catalog in this way can also be useful.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
