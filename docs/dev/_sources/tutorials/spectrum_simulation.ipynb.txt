{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/spectrum_simulation.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_simulation.ipynb](../_static/notebooks/spectrum_simulation.ipynb) |\n",
    "[spectrum_simulation.py](../_static/notebooks/spectrum_simulation.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum simulation\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of spectral extraction and datasets used in gammapy, see for instance the [spectral analysis tutorial](spectrum_analysis.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "To simulate a specific observation, it is not always necessary to simulate the full photon list. For many uses cases, simulating directly a reduced binned dataset is enough: the IRFs reduced in the correct geometry are combined with a source model to predict an actual number of counts per bin. The latter is then used to simulate a reduced dataset using Poisson probability distribution.\n",
    "\n",
    "This can be done to check the feasibility of a measurement, to test whether fitted parameters really provide a good fit to the data etc.\n",
    "\n",
    "Here we will see how to perform a 1D spectral simulation of a CTA observation, in particular, we will generate OFF observations following the template background stored in the CTA IRFs.\n",
    "\n",
    "**Objective: simulate a number of spectral ON-OFF observations of a source with a power-law spectral model with CTA using the CTA 1DC response, fit them with the assumed spectral model and check that the distribution of fitted parameters is consistent with the input values.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "We will use the following classes:\n",
    "\n",
    "* `~gammapy.datasets.SpectrumDatasetOnOff`\n",
    "* `~gammapy.datasets.SpectrumDataset`\n",
    "* `~gammapy.irf.load_cta_irfs`\n",
    "* `~gammapy.modeling.models.PowerLawSpectralModel`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:45.038288Z",
     "iopub.status.busy": "2020-10-30T09:21:45.037214Z",
     "iopub.status.idle": "2020-10-30T09:21:45.386851Z",
     "shell.execute_reply": "2020-10-30T09:21:45.386073Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:45.392928Z",
     "iopub.status.busy": "2020-10-30T09:21:45.391639Z",
     "iopub.status.idle": "2020-10-30T09:21:46.597242Z",
     "shell.execute_reply": "2020-10-30T09:21:46.597795Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.datasets import SpectrumDatasetOnOff, SpectrumDataset, Datasets\n",
    "from gammapy.makers import SpectrumDatasetMaker\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.data import Observation\n",
    "from gammapy.maps import MapAxis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation of a single spectrum\n",
    "\n",
    "To do a simulation, we need to define the observational parameters like the livetime, the offset, the assumed integration radius, the energy range to perform the simulation for and the choice of spectral model. We then use an in-memory observation which is convolved with the IRFs to get the predicted number of counts. This is Poission fluctuated using the `fake()` to get the simulated counts for each observation.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.611371Z",
     "iopub.status.busy": "2020-10-30T09:21:46.608933Z",
     "iopub.status.idle": "2020-10-30T09:21:46.612419Z",
     "shell.execute_reply": "2020-10-30T09:21:46.613267Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define simulation parameters parameters\n",
    "livetime = 1 * u.h\n",
    "\n",
    "pointing = SkyCoord(0, 0, unit=\"deg\", frame=\"galactic\")\n",
    "offset = 0.5 * u.deg\n",
    "\n",
    "# Reconstructed and true energy axis\n",
    "energy_axis = MapAxis.from_edges(\n",
    "    np.logspace(-0.5, 1.0, 10), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "energy_axis_true = MapAxis.from_edges(\n",
    "    np.logspace(-1.2, 2.0, 31), unit=\"TeV\", name=\"energy_true\", interp=\"log\"\n",
    ")\n",
    "\n",
    "on_region_radius = Angle(\"0.11 deg\")\n",
    "\n",
    "center = pointing.directional_offset_by(\n",
    "    position_angle=0 * u.deg, separation=offset\n",
    ")\n",
    "on_region = CircleSkyRegion(center=center, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.630314Z",
     "iopub.status.busy": "2020-10-30T09:21:46.629171Z",
     "iopub.status.idle": "2020-10-30T09:21:46.632593Z",
     "shell.execute_reply": "2020-10-30T09:21:46.633231Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "   name     value         unit      min max frozen   error  \n",
      "--------- ---------- -------------- --- --- ------ ---------\n",
      "    index 3.0000e+00                nan nan  False 0.000e+00\n",
      "amplitude 2.5000e-12 cm-2 s-1 TeV-1 nan nan  False 0.000e+00\n",
      "reference 1.0000e+00            TeV nan nan   True 0.000e+00\n"
     ]
    }
   ],
   "source": [
    "# Define spectral model - a simple Power Law in this case\n",
    "model_simu = PowerLawSpectralModel(\n",
    "    index=3.0,\n",
    "    amplitude=2.5e-12 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "print(model_simu)\n",
    "# we set the sky model used in the dataset\n",
    "model = SkyModel(spectral_model=model_simu, name=\"source\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.638588Z",
     "iopub.status.busy": "2020-10-30T09:21:46.637911Z",
     "iopub.status.idle": "2020-10-30T09:21:46.774525Z",
     "shell.execute_reply": "2020-10-30T09:21:46.773876Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n"
     ]
    }
   ],
   "source": [
    "# Load the IRFs\n",
    "# In this simulation, we use the CTA-1DC irfs shipped with gammapy.\n",
    "irfs = load_cta_irfs(\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.795609Z",
     "iopub.status.busy": "2020-10-30T09:21:46.794008Z",
     "iopub.status.idle": "2020-10-30T09:21:46.797063Z",
     "shell.execute_reply": "2020-10-30T09:21:46.797693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observation\n",
      "\n",
      "\tobs id            : 0 \n",
      " \ttstart            : 51544.00\n",
      "\ttstop             : 51544.04\n",
      "\tduration          : 3600.00 s\n",
      "\tpointing (icrs)   : 266.4 deg, -28.9 deg\n",
      "\n",
      "\tdeadtime fraction : 0.0%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "obs = Observation.create(pointing=pointing, livetime=livetime, irfs=irfs)\n",
    "print(obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.813020Z",
     "iopub.status.busy": "2020-10-30T09:21:46.810093Z",
     "iopub.status.idle": "2020-10-30T09:21:46.902090Z",
     "shell.execute_reply": "2020-10-30T09:21:46.901469Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make the SpectrumDataset\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=energy_axis, e_true=energy_axis_true, region=on_region, name=\"obs-0\"\n",
    ")\n",
    "maker = SpectrumDatasetMaker(selection=[\"exposure\", \"edisp\", \"background\"])\n",
    "\n",
    "dataset = maker.run(dataset_empty, obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.920020Z",
     "iopub.status.busy": "2020-10-30T09:21:46.918400Z",
     "iopub.status.idle": "2020-10-30T09:21:46.921423Z",
     "shell.execute_reply": "2020-10-30T09:21:46.921981Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumDataset\n",
      "---------------\n",
      "\n",
      "  Name                            : obs-0 \n",
      "\n",
      "  Total counts                    : 298 \n",
      "  Total predicted counts          : 303.69\n",
      "  Total background counts         : 22.32\n",
      "\n",
      "  Exposure min                    : 2.53e+08 m2 s\n",
      "  Exposure max                    : 1.77e+10 m2 s\n",
      "\n",
      "  Number of total bins            : 9 \n",
      "  Number of fit bins              : 9 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : -1811.58\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 2\n",
      "\n",
      "  Component 0: SkyModel\n",
      "  \n",
      "    Name                      : source\n",
      "    Datasets names            : None\n",
      "    Spectral model type       : PowerLawSpectralModel\n",
      "    Spatial  model type       : \n",
      "    Temporal model type       : \n",
      "    Parameters:\n",
      "      index                   :   3.000              \n",
      "      amplitude               :   2.50e-12  1 / (cm2 s TeV)\n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Set the model on the dataset, and fake\n",
    "dataset.models = model\n",
    "dataset.fake(random_state=42)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see that backgound counts are now simulated"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### On-Off analysis\n",
    "\n",
    "To do an on off spectral analysis, which is the usual science case, the standard would be to use `SpectrumDatasetOnOff`, which uses the acceptance to fake off-counts "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.928452Z",
     "iopub.status.busy": "2020-10-30T09:21:46.927601Z",
     "iopub.status.idle": "2020-10-30T09:21:46.957548Z",
     "shell.execute_reply": "2020-10-30T09:21:46.958200Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumDatasetOnOff\n",
      "--------------------\n",
      "\n",
      "  Name                            : obs-0 \n",
      "\n",
      "  Total counts                    : 285 \n",
      "  Total predicted counts          : 302.01\n",
      "  Total background counts         : 20.64\n",
      "\n",
      "  Exposure min                    : 2.53e+08 m2 s\n",
      "  Exposure max                    : 1.77e+10 m2 s\n",
      "\n",
      "  Number of total bins            : 9 \n",
      "  Number of fit bins              : 9 \n",
      "\n",
      "  Acceptance mean                 : 1.000\n",
      "  Acceptance off                  : 45.000 \n",
      "\n",
      "  Fit statistic type              : wstat\n",
      "  Fit statistic value (-2 log(L)) : 4.07\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 2\n",
      "\n",
      "  Component 0: SkyModel\n",
      "  \n",
      "    Name                      : source\n",
      "    Datasets names            : None\n",
      "    Spectral model type       : PowerLawSpectralModel\n",
      "    Spatial  model type       : \n",
      "    Temporal model type       : \n",
      "    Parameters:\n",
      "      index                   :   3.000              \n",
      "      amplitude               :   2.50e-12  1 / (cm2 s TeV)\n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(\n",
    "    dataset=dataset, acceptance=1, acceptance_off=5\n",
    ")\n",
    "dataset_on_off.fake(npred_background=dataset.npred_background())\n",
    "print(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see that off counts are now simulated as well. We now simulate several spectra using the same set of observation conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:46.995443Z",
     "iopub.status.busy": "2020-10-30T09:21:46.963732Z",
     "iopub.status.idle": "2020-10-30T09:21:47.863627Z",
     "shell.execute_reply": "2020-10-30T09:21:47.864283Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 895 ms, sys: 12.5 ms, total: 907 ms\n",
      "Wall time: 896 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "n_obs = 100\n",
    "datasets = Datasets()\n",
    "\n",
    "for idx in range(n_obs):\n",
    "    dataset_on_off.fake(\n",
    "        random_state=idx, npred_background=dataset.npred_background()\n",
    "    )\n",
    "    dataset_fake = dataset_on_off.copy(name=f\"obs-{idx}\")\n",
    "    dataset_fake.meta_table[\"OBS_ID\"] = [idx]\n",
    "    datasets.append(dataset_fake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:47.984104Z",
     "iopub.status.busy": "2020-10-30T09:21:47.983466Z",
     "iopub.status.idle": "2020-10-30T09:21:50.106848Z",
     "shell.execute_reply": "2020-10-30T09:21:50.106294Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=100</i>\n",
       "<table id=\"table139774021658496\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>counts</th><th>background</th><th>excess</th><th>sqrt_ts</th><th>npred</th><th>exposure_min</th><th>exposure_max</th><th>livetime</th><th>ontime</th><th>counts_rate</th><th>background_rate</th><th>excess_rate</th><th>n_bins</th><th>n_fit_bins</th><th>stat_type</th><th>stat_sum</th><th>counts_off</th><th>acceptance</th><th>acceptance_off</th><th>alpha</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th>m2 s</th><th>m2 s</th><th>s</th><th>s</th><th>1 / s</th><th>1 / s</th><th>1 / s</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>str6</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>int64</th><th>str5</th><th>float64</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>obs-0</td><td>317.0</td><td>18.65354630236477</td><td>298.34645369763524</td><td>26.956563082502154</td><td>300.0237217925292</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08805555555555555</td><td>0.00518154063954577</td><td>0.08287401491600979</td><td>9</td><td>9</td><td>wstat</td><td>9.917001109718026</td><td>92</td><td>9.0</td><td>44.38834238693968</td><td>0.2</td></tr>\n",
       "<tr><td>obs-1</td><td>275.0</td><td>21.58258771590118</td><td>253.41741228409882</td><td>23.93757877901608</td><td>302.9527632060656</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.0763888888888889</td><td>0.005995163254416995</td><td>0.0703937256344719</td><td>9</td><td>9</td><td>wstat</td><td>8.818660828556197</td><td>110</td><td>9.0</td><td>45.87031050361991</td><td>0.2</td></tr>\n",
       "<tr><td>obs-2</td><td>293.0</td><td>20.469559382761037</td><td>272.530440617239</td><td>25.228370347338384</td><td>301.8397348729254</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08138888888888889</td><td>0.0056859887174336215</td><td>0.07570290017145527</td><td>9</td><td>9</td><td>wstat</td><td>7.359111002998524</td><td>103</td><td>9.0</td><td>45.2867588728215</td><td>0.2</td></tr>\n",
       "<tr><td>obs-3</td><td>280.0</td><td>22.085538412438964</td><td>257.91446158756105</td><td>24.109390474755777</td><td>303.45571390260335</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.07777777777777778</td><td>0.006134871781233045</td><td>0.07164290599654474</td><td>9</td><td>9</td><td>wstat</td><td>11.832983489177304</td><td>112</td><td>9.0</td><td>45.64072567197532</td><td>0.2</td></tr>\n",
       "<tr><td>obs-4</td><td>337.0</td><td>20.911108672416216</td><td>316.0888913275838</td><td>27.539821456081988</td><td>302.2812841625807</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.09361111111111112</td><td>0.005808641297893393</td><td>0.08780246981321772</td><td>9</td><td>9</td><td>wstat</td><td>17.867103727171298</td><td>103</td><td>9.0</td><td>44.33050463856099</td><td>0.2</td></tr>\n",
       "<tr><td>obs-5</td><td>283.0</td><td>24.013638355738106</td><td>258.9863616442619</td><td>23.87198002044941</td><td>305.3838138459025</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.07861111111111112</td><td>0.006670455098816141</td><td>0.07194065601229496</td><td>9</td><td>9</td><td>wstat</td><td>8.00519618043828</td><td>122</td><td>9.0</td><td>45.72401664979812</td><td>0.2</td></tr>\n",
       "<tr><td>obs-6</td><td>330.0</td><td>22.8015068225146</td><td>307.1984931774854</td><td>26.719652510541493</td><td>304.171682312679</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.09166666666666666</td><td>0.0063337518951429445</td><td>0.08533291477152372</td><td>9</td><td>9</td><td>wstat</td><td>10.098766444429586</td><td>112</td><td>9.0</td><td>44.207604692365486</td><td>0.2</td></tr>\n",
       "<tr><td>obs-7</td><td>283.0</td><td>25.65168786228425</td><td>257.34831213771577</td><td>23.512572360872216</td><td>307.02186335244863</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.07861111111111112</td><td>0.007125468850634514</td><td>0.0714856422604766</td><td>9</td><td>9</td><td>wstat</td><td>4.310899779189115</td><td>130</td><td>9.0</td><td>45.611033717600094</td><td>0.2</td></tr>\n",
       "<tr><td>obs-8</td><td>308.0</td><td>23.46500279596388</td><td>284.53499720403613</td><td>25.394607357026857</td><td>304.8351782861283</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08555555555555555</td><td>0.006518056332212189</td><td>0.07903749922334337</td><td>9</td><td>9</td><td>wstat</td><td>4.142947213517404</td><td>117</td><td>9.0</td><td>44.87534091328224</td><td>0.2</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>obs-90</td><td>286.0</td><td>18.895827220954608</td><td>267.10417277904537</td><td>25.179882054875904</td><td>300.266002711119</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.07944444444444444</td><td>0.005248840894709613</td><td>0.07419560354973483</td><td>9</td><td>9</td><td>wstat</td><td>6.7243882280608345</td><td>95</td><td>9.0</td><td>45.24808519903506</td><td>0.2</td></tr>\n",
       "<tr><td>obs-91</td><td>285.0</td><td>24.848973106976626</td><td>260.15102689302336</td><td>23.805699202203606</td><td>306.2191485971411</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.07916666666666666</td><td>0.006902492529715729</td><td>0.07226417413695094</td><td>9</td><td>9</td><td>wstat</td><td>14.577940826871794</td><td>126</td><td>9.0</td><td>45.63568865071599</td><td>0.2</td></tr>\n",
       "<tr><td>obs-92</td><td>313.0</td><td>23.688151850827474</td><td>289.31184814917253</td><td>25.629893966464902</td><td>305.0583273409919</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08694444444444445</td><td>0.00658004218078541</td><td>0.08036440226365904</td><td>9</td><td>9</td><td>wstat</td><td>6.304646568308117</td><td>118</td><td>9.0</td><td>44.83253935080217</td><td>0.2</td></tr>\n",
       "<tr><td>obs-93</td><td>302.0</td><td>18.75577589698646</td><td>283.24422410301355</td><td>26.14514055178928</td><td>300.1259513871509</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08388888888888889</td><td>0.005209937749162906</td><td>0.07867895113972599</td><td>9</td><td>9</td><td>wstat</td><td>5.8650342902905415</td><td>94</td><td>9.0</td><td>45.10610516176668</td><td>0.2</td></tr>\n",
       "<tr><td>obs-94</td><td>322.0</td><td>22.294032475069507</td><td>299.7059675249305</td><td>26.404039878284067</td><td>303.6642079652339</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08944444444444444</td><td>0.006192786798630418</td><td>0.08325165764581402</td><td>9</td><td>9</td><td>wstat</td><td>10.005883760873093</td><td>110</td><td>9.0</td><td>44.40650210351474</td><td>0.2</td></tr>\n",
       "<tr><td>obs-95</td><td>305.0</td><td>24.522844956409255</td><td>280.47715504359076</td><td>25.017415638383994</td><td>305.8930204465737</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08472222222222223</td><td>0.006811901376780349</td><td>0.07791032084544187</td><td>9</td><td>9</td><td>wstat</td><td>5.627799171046492</td><td>123</td><td>9.0</td><td>45.141581328257594</td><td>0.2</td></tr>\n",
       "<tr><td>obs-96</td><td>301.0</td><td>23.669783774384793</td><td>277.33021622561523</td><td>24.942506708061416</td><td>305.03995926454917</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08361111111111111</td><td>0.006574939937329109</td><td>0.077036171173782</td><td>9</td><td>9</td><td>wstat</td><td>5.511772031205281</td><td>118</td><td>9.0</td><td>44.8673300154641</td><td>0.2</td></tr>\n",
       "<tr><td>obs-97</td><td>290.0</td><td>18.723202165294804</td><td>271.2767978347052</td><td>25.45436915895262</td><td>300.0933776554592</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08055555555555556</td><td>0.005200889490359668</td><td>0.07535466606519588</td><td>9</td><td>9</td><td>wstat</td><td>5.667231272491763</td><td>94</td><td>9.0</td><td>45.18457860633154</td><td>0.2</td></tr>\n",
       "<tr><td>obs-98</td><td>301.0</td><td>20.38597306894053</td><td>280.61402693105947</td><td>25.694093963488825</td><td>301.75614855910493</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08361111111111111</td><td>0.005662770296927925</td><td>0.07794834081418318</td><td>9</td><td>9</td><td>wstat</td><td>7.14214115301789</td><td>102</td><td>9.0</td><td>45.03096304971764</td><td>0.2</td></tr>\n",
       "<tr><td>obs-99</td><td>323.0</td><td>21.106516274878086</td><td>301.89348372512194</td><td>26.719793002688032</td><td>302.47669176504246</td><td>252718170.97287494</td><td>17719697919.599255</td><td>3600.0</td><td>3600.0</td><td>0.08972222222222222</td><td>0.005862921187466135</td><td>0.0838593010347561</td><td>9</td><td>9</td><td>wstat</td><td>5.059623929851592</td><td>104</td><td>9.0</td><td>44.3464941258008</td><td>0.2</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=100>\n",
       " name   counts     background     ... acceptance   acceptance_off    alpha \n",
       "                                  ...                                      \n",
       " str6  float64      float64       ...  float64        float64       float64\n",
       "------ ------- ------------------ ... ---------- ------------------ -------\n",
       " obs-0   317.0  18.65354630236477 ...        9.0  44.38834238693968     0.2\n",
       " obs-1   275.0  21.58258771590118 ...        9.0  45.87031050361991     0.2\n",
       " obs-2   293.0 20.469559382761037 ...        9.0   45.2867588728215     0.2\n",
       " obs-3   280.0 22.085538412438964 ...        9.0  45.64072567197532     0.2\n",
       " obs-4   337.0 20.911108672416216 ...        9.0  44.33050463856099     0.2\n",
       " obs-5   283.0 24.013638355738106 ...        9.0  45.72401664979812     0.2\n",
       " obs-6   330.0   22.8015068225146 ...        9.0 44.207604692365486     0.2\n",
       " obs-7   283.0  25.65168786228425 ...        9.0 45.611033717600094     0.2\n",
       " obs-8   308.0  23.46500279596388 ...        9.0  44.87534091328224     0.2\n",
       "   ...     ...                ... ...        ...                ...     ...\n",
       "obs-90   286.0 18.895827220954608 ...        9.0  45.24808519903506     0.2\n",
       "obs-91   285.0 24.848973106976626 ...        9.0  45.63568865071599     0.2\n",
       "obs-92   313.0 23.688151850827474 ...        9.0  44.83253935080217     0.2\n",
       "obs-93   302.0  18.75577589698646 ...        9.0  45.10610516176668     0.2\n",
       "obs-94   322.0 22.294032475069507 ...        9.0  44.40650210351474     0.2\n",
       "obs-95   305.0 24.522844956409255 ...        9.0 45.141581328257594     0.2\n",
       "obs-96   301.0 23.669783774384793 ...        9.0   44.8673300154641     0.2\n",
       "obs-97   290.0 18.723202165294804 ...        9.0  45.18457860633154     0.2\n",
       "obs-98   301.0  20.38597306894053 ...        9.0  45.03096304971764     0.2\n",
       "obs-99   323.0 21.106516274878086 ...        9.0   44.3464941258008     0.2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table = datasets.info_table()\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to the fit let's have a look at the simulated observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:50.147586Z",
     "iopub.status.busy": "2020-10-30T09:21:50.130769Z",
     "iopub.status.idle": "2020-10-30T09:21:50.694874Z",
     "shell.execute_reply": "2020-10-30T09:21:50.694200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'excess')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fix, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
    "axes[0].hist(table[\"counts\"])\n",
    "axes[0].set_xlabel(\"Counts\")\n",
    "axes[1].hist(table[\"counts_off\"])\n",
    "axes[1].set_xlabel(\"Counts Off\")\n",
    "axes[2].hist(table[\"excess\"])\n",
    "axes[2].set_xlabel(\"excess\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we fit each simulated spectrum individually "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:21:50.702728Z",
     "iopub.status.busy": "2020-10-30T09:21:50.699654Z",
     "iopub.status.idle": "2020-10-30T09:22:08.370509Z",
     "shell.execute_reply": "2020-10-30T09:22:08.371153Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 17.7 s, sys: 38.9 ms, total: 17.7 s\n",
      "Wall time: 17.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results = []\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model.copy()\n",
    "    fit = Fit([dataset])\n",
    "    result = fit.optimize()\n",
    "    results.append(\n",
    "        {\n",
    "            \"index\": result.parameters[\"index\"].value,\n",
    "            \"amplitude\": result.parameters[\"amplitude\"].value,\n",
    "        }\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take a look at the distribution of the fitted indices. This matches very well with the spectrum that we initially injected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-30T09:22:08.393495Z",
     "iopub.status.busy": "2020-10-30T09:22:08.392746Z",
     "iopub.status.idle": "2020-10-30T09:22:08.536006Z",
     "shell.execute_reply": "2020-10-30T09:22:08.535455Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index: 3.0036666673436003 += 0.08075110145615079\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([_[\"index\"] for _ in results])\n",
    "plt.hist(index, bins=10, alpha=0.5)\n",
    "plt.axvline(x=model_simu.parameters[\"index\"].value, color=\"red\")\n",
    "print(f\"index: {index.mean()} += {index.std()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Change the observation time to something longer or shorter. Does the observation and spectrum results change as you expected?\n",
    "* Change the spectral model, e.g. add a cutoff at 5 TeV, or put a steep-spectrum source with spectral index of 4.0\n",
    "* Simulate spectra with the spectral model we just defined. How much observation duration do you need to get back the injected parameters?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
