{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/analysis_1.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[analysis_1.ipynb](../_static/notebooks/analysis_1.ipynb) |\n",
    "[analysis_1.py](../_static/notebooks/analysis_1.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First analysis with gammapy high level interface\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and intrument response functions (IRF).\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis using the high level interface. \n",
    "\n",
    "Gammapy analysis consists in two main steps. \n",
    "\n",
    "The first one is data reduction: user selected observations  are reduced to a geometry defined by the user. \n",
    "It can be 1D (spectrum from a given extraction region) or 3D (with a sky projection and an energy axis). \n",
    "The resulting reduced data and instrument response functions (IRF) are called datasets in Gammapy.\n",
    "\n",
    "The second step consists in setting a physical model on the datasets and fitting it to obtain relevant physical informations.\n",
    "\n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "This notebook uses the high level `Analysis` class to orchestrate data reduction. In its current state, `Analysis` supports the standard analysis cases of joint or stacked 3D and 1D analyses. It is instantiated with an `AnalysisConfig` object that gives access to analysis parameters either directly or via a YAML config file. \n",
    "\n",
    "To see what is happening under-the-hood and to get an idea of the internal API, a second notebook performs the same analysis without using the `Analysis` class. \n",
    "\n",
    "In summary, we have to:\n",
    "\n",
    "- Create an `~gammapy.analysis.AnalysisConfig` object and edit it to define the analysis configuration:\n",
    "    - Define what observations to use\n",
    "    - Define the geometry of the dataset (data and IRFs)\n",
    "    - Define the model we want to fit on the dataset.\n",
    "- Instantiate a `~gammapy.analysis.Analysis` from this configuration and run the different analysis steps\n",
    "    - Observation selection\n",
    "    - Data reduction\n",
    "    - Model fitting\n",
    "    - Estimating flux points\n",
    "\n",
    "Finally we will compare the results against a reference model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from gammapy.analysis import Analysis, AnalysisConfig\n",
    "from gammapy.modeling.models import create_crab_spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis configuration\n",
    "\n",
    "For configuration of the analysis we use the [YAML](https://en.wikipedia.org/wiki/YAML) data format. YAML is a machine readable serialisation format, that is also friendly for humans to read. In this tutorial we will write the configuration file just using Python strings, but of course the file can be created and modified with any text editor of your choice.\n",
    "\n",
    "Here is what the configuration for our analysis looks like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnalysisConfig\n",
      "\n",
      "    general:\n",
      "        log: {level: info, filename: null, filemode: null, format: null, datefmt: null}\n",
      "        outdir: .\n",
      "    observations:\n",
      "        datastore: $GAMMAPY_DATA/hess-dl3-dr1\n",
      "        obs_ids: []\n",
      "        obs_file: null\n",
      "        obs_cone: {frame: null, lon: null, lat: null, radius: null}\n",
      "        obs_time: {start: null, stop: null}\n",
      "    datasets:\n",
      "        type: 1d\n",
      "        stack: true\n",
      "        geom:\n",
      "            wcs:\n",
      "                skydir: {frame: null, lon: null, lat: null}\n",
      "                binsize: 0.02 deg\n",
      "                fov: {width: 5.0 deg, height: 5.0 deg}\n",
      "                binsize_irf: 0.2 deg\n",
      "            selection: {offset_max: 2.5 deg}\n",
      "            axes:\n",
      "                energy: {min: 0.1 TeV, max: 10.0 TeV, nbins: 30}\n",
      "                energy_true: {min: 0.1 TeV, max: 10.0 TeV, nbins: 30}\n",
      "        map_selection: [counts, exposure, background, psf, edisp]\n",
      "        background:\n",
      "            method: null\n",
      "            exclusion: null\n",
      "            parameters: {}\n",
      "        safe_mask:\n",
      "            methods: [aeff-default]\n",
      "            parameters: {}\n",
      "        on_region: {frame: null, lon: null, lat: null, radius: null}\n",
      "        containment_correction: true\n",
      "    fit:\n",
      "        fit_range: {min: 0.1 TeV, max: 10.0 TeV}\n",
      "    flux_points:\n",
      "        energy: {min: 0.1 TeV, max: 10.0 TeV, nbins: 30}\n",
      "        source: source\n",
      "        parameters: {}\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "config = AnalysisConfig()\n",
    "# the AnalysisConfig gives access to the various parameters used from logging to reduced dataset geometries\n",
    "print(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the data to use"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to use Crab runs from the H.E.S.S. DL3-DR1. We define here the datastore and a cone search of observations pointing with 5 degrees of the Crab nebula.\n",
    "Parameters can be set directly or as a python dict."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We define the datastore containing the data\n",
    "config.observations.datastore = \"$GAMMAPY_DATA/hess-dl3-dr1\"\n",
    "\n",
    "# We define the cone search parameters\n",
    "config.observations.obs_cone.frame = \"icrs\"\n",
    "config.observations.obs_cone.lon = \"83.633 deg\"\n",
    "config.observations.obs_cone.lat = \"22.014 deg\"\n",
    "config.observations.obs_cone.radius = \"5 deg\"\n",
    "\n",
    "# Equivalently we could have set parameters with a python dict\n",
    "# config.observations.obs_cone = {\"frame\": \"icrs\", \"lon\": \"83.633 deg\", \"lat\": \"22.014 deg\", \"radius\": \"5 deg\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the reduced datasets geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We want to perform a 3D analysis\n",
    "config.datasets.type = \"3d\"\n",
    "# We want to stack the data into a single reduced dataset\n",
    "config.datasets.stack = True\n",
    "\n",
    "# We fix the WCS geometry of the datasets\n",
    "config.datasets.geom.wcs.skydir = {\n",
    "    \"lon\": \"83.633 deg\",\n",
    "    \"lat\": \"22.014 deg\",\n",
    "    \"frame\": \"icrs\",\n",
    "}\n",
    "config.datasets.geom.wcs.fov = {\"width\": \"2 deg\", \"height\": \"2 deg\"}\n",
    "config.datasets.geom.wcs.binsize = \"0.02 deg\"\n",
    "\n",
    "# We now fix the energy axis for the counts map\n",
    "config.datasets.geom.axes.energy.min = \"1 TeV\"\n",
    "config.datasets.geom.axes.energy.max = \"10 TeV\"\n",
    "config.datasets.geom.axes.energy.nbins = 4\n",
    "\n",
    "# We now fix the energy axis for the IRF maps (exposure, etc)\n",
    "config.datasets.geom.axes.energy_true.min = \"0.5 TeV\"\n",
    "config.datasets.geom.axes.energy_true.max = \"20 TeV\"\n",
    "config.datasets.geom.axes.energy.nbins = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the background normalization maker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "config.datasets.background.method = \"fov_background\"\n",
    "config.datasets.background.parameters = {\"method\": \"scale\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting modeling and fitting parameters\n",
    "`Analysis` can perform a few modeling and fitting tasks besides data reduction. Parameters have then to be passed to the configuration object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "config.fit.fit_range.min = 1 * u.TeV\n",
    "config.fit.fit_range.max = 10 * u.TeV\n",
    "config.flux_points.energy = {\"min\": \"1 TeV\", \"max\": \"10 TeV\", \"nbins\": 3}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We're all set. \n",
    "But before we go on let's see how to save or import `AnalysisConfig` objects though YAML files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using YAML configuration files\n",
    "\n",
    "One can export/import the `AnalysisConfig` to/from a YAML file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "config.write(\"config.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnalysisConfig\n",
      "\n",
      "    general:\n",
      "        log: {level: info, filename: null, filemode: null, format: null, datefmt: null}\n",
      "        outdir: .\n",
      "    observations:\n",
      "        datastore: $GAMMAPY_DATA/hess-dl3-dr1\n",
      "        obs_ids: []\n",
      "        obs_file: null\n",
      "        obs_cone: {frame: icrs, lon: 83.633 deg, lat: 22.014 deg, radius: 5.0 deg}\n",
      "        obs_time: {start: null, stop: null}\n",
      "    datasets:\n",
      "        type: 3d\n",
      "        stack: true\n",
      "        geom:\n",
      "            wcs:\n",
      "                skydir: {frame: icrs, lon: 83.633 deg, lat: 22.014 deg}\n",
      "                binsize: 0.02 deg\n",
      "                fov: {width: 2.0 deg, height: 2.0 deg}\n",
      "                binsize_irf: 0.2 deg\n",
      "            selection: {offset_max: 2.5 deg}\n",
      "            axes:\n",
      "                energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 10}\n",
      "                energy_true: {min: 0.5 TeV, max: 20.0 TeV, nbins: 30}\n",
      "        map_selection: [counts, exposure, background, psf, edisp]\n",
      "        background:\n",
      "            method: fov_background\n",
      "            exclusion: null\n",
      "            parameters: {method: scale}\n",
      "        safe_mask:\n",
      "            methods: [aeff-default]\n",
      "            parameters: {}\n",
      "        on_region: {frame: null, lon: null, lat: null, radius: null}\n",
      "        containment_correction: true\n",
      "    fit:\n",
      "        fit_range: {min: 1.0 TeV, max: 10.0 TeV}\n",
      "    flux_points:\n",
      "        energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 3}\n",
      "        source: source\n",
      "        parameters: {}\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "config = AnalysisConfig.read(\"config.yaml\")\n",
    "print(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running the analysis\n",
    "\n",
    "We first create an `~gammapy.analysis.Analysis` object from our configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting logging config: {'level': 'INFO', 'filename': None, 'filemode': None, 'format': None, 'datefmt': None}\n"
     ]
    }
   ],
   "source": [
    "analysis = Analysis(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Observation selection\n",
    "\n",
    "We can directly select and load the observations from disk using `~gammapy.analysis.Analysis.get_observations()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fetching observations.\n",
      "Number of selected observations: 4\n"
     ]
    }
   ],
   "source": [
    "analysis.get_observations()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The observations are now available on the `Analysis` object. The selection corresponds to the following ids:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['23592', '23523', '23526', '23559']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analysis.observations.ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see how to explore observations, please refer to the following notebook: [CTA with Gammapy](cta.ipynb) or  [HESS with Gammapy](hess.ipynb) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "Now we proceed to the data reduction. In the config file we have chosen a WCS map geometry, energy axis and decided to stack the maps. We can run the reduction using `.get_datasets()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Creating geometry.\n",
      "Creating datasets.\n",
      "Processing observation 23592\n",
      "Processing observation 23523\n",
      "Processing observation 23526\n",
      "Processing observation 23559\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.65 s, sys: 199 ms, total: 3.85 s\n",
      "Wall time: 3.84 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "analysis.get_datasets()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we have chosen to stack the data, there is finally one dataset contained which we can print:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : stacked \n",
      "\n",
      "  Total counts                    : 2486 \n",
      "  Total predicted counts          : 2486.00\n",
      "  Total background counts         : 2486.00\n",
      "\n",
      "  Exposure min                    : 2.38e+08 m2 s\n",
      "  Exposure max                    : 3.53e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 100000 \n",
      "  Number of fit bins              : 100000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : 22266.08\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 1\n",
      "\n",
      "  Component 0: BackgroundModel\n",
      "  \n",
      "    Name                      : stacked-bkg\n",
      "    Datasets names            : ['stacked']\n",
      "    Parameters:\n",
      "      norm                    :   1.000              \n",
      "      tilt         (frozen)   :   0.000              \n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "print(analysis.datasets[\"stacked\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see the dataset comes with a predefined background model out of the data reduction, but no source model has been set yet.\n",
    "\n",
    "The counts, exposure and background model maps are directly available on the dataset and can be printed and plotted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts = analysis.datasets[\"stacked\"].counts\n",
    "counts.smooth(\"0.05 deg\").plot_interactive()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = Path(\"analysis_1\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "analysis.datasets[0].write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model fitting\n",
    "\n",
    "Now we define a model to be fitted to the dataset. Here we use its YAML definition to load it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_config = \"\"\"\n",
    "components:\n",
    "- name: crab\n",
    "  type: SkyModel\n",
    "  spatial:\n",
    "    type: PointSpatialModel\n",
    "    frame: icrs\n",
    "    parameters:\n",
    "    - name: lon_0\n",
    "      value: 83.63\n",
    "      unit: deg\n",
    "    - name: lat_0 \n",
    "      value: 22.14    \n",
    "      unit: deg\n",
    "  spectral:\n",
    "    type: PowerLawSpectralModel\n",
    "    parameters:\n",
    "    - name: amplitude      \n",
    "      value: 1.0e-12\n",
    "      unit: cm-2 s-1 TeV-1\n",
    "    - name: index\n",
    "      value: 2.0\n",
    "      unit: ''\n",
    "    - name: reference\n",
    "      value: 1.0\n",
    "      unit: TeV\n",
    "      frozen: true\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we set the model on the analysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading model.\n",
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : crab\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : ['PowerLawSpectralModel', 'pl']\n",
      "  Spatial  model type       : ['PointSpatialModel', 'point']\n",
      "  Temporal model type       : None\n",
      "  Parameters:\n",
      "    index                   :   2.000              \n",
      "    amplitude               :   1.00e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :  83.630  deg         \n",
      "    lat_0                   :  22.140  deg         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "analysis.set_models(model_config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we run the fit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fitting datasets.\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 272\n",
      "\ttotal stat : 20002.07\n",
      "\n"
     ]
    }
   ],
   "source": [
    "analysis.run_fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 272\n",
      "\ttotal stat : 20002.07\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.fit_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is how we can write the model back to file again:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = path / \"model-best-fit.yaml\"\n",
    "analysis.models.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\r\n",
      "-   name: crab\r\n",
      "    type: SkyModel\r\n",
      "    spectral:\r\n",
      "        type: PowerLawSpectralModel\r\n",
      "        parameters:\r\n",
      "        -   name: index\r\n",
      "            value: 2.5581730459907344\r\n",
      "            unit: ''\r\n",
      "            min: .nan\r\n",
      "            max: .nan\r\n",
      "            frozen: false\r\n",
      "            error: 0.10307658987486806\r\n",
      "        -   name: amplitude\r\n",
      "            value: 4.561612762185818e-11\r\n",
      "            unit: cm-2 s-1 TeV-1\r\n",
      "            min: .nan\r\n",
      "            max: .nan\r\n",
      "            frozen: false\r\n",
      "            error: 3.750059910092775e-12\r\n",
      "        -   name: reference\r\n",
      "            value: 1.0\r\n",
      "            unit: TeV\r\n",
      "            min: .nan\r\n",
      "            max: .nan\r\n",
      "            frozen: true\r\n",
      "            error: 0.0\r\n",
      "    spatial:\r\n",
      "        type: PointSpatialModel\r\n",
      "        frame: icrs\r\n",
      "        parameters:\r\n",
      "        -   name: lon_0\r\n",
      "            value: 83.61984949652242\r\n",
      "            unit: deg\r\n",
      "            min: .nan\r\n",
      "            max: .nan\r\n",
      "            frozen: false\r\n",
      "            error: 0.003151487817595056\r\n",
      "        -   name: lat_0\r\n",
      "            value: 22.023363822217537\r\n",
      "            unit: deg\r\n",
      "            min: .nan\r\n",
      "            max: .nan\r\n",
      "            frozen: false\r\n",
      "            error: 0.002845652545592525\r\n",
      "covariance: model-best-fit_covariance.dat\r\n"
     ]
    }
   ],
   "source": [
    "!cat analysis_1/model-best-fit.yaml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flux points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating flux points.\n",
      "\n",
      "      e_ref               ref_flux        ...        dnde_err        is_ul\n",
      "       TeV              1 / (cm2 s)       ...    1 / (cm2 s TeV)          \n",
      "------------------ ---------------------- ... ---------------------- -----\n",
      "1.4125375446227544  1.929722452979076e-11 ... 1.2613893341952512e-12 False\n",
      "3.1622776601683795  7.602522760222738e-12 ... 2.1222139474797397e-13 False\n",
      "  7.07945784384138 1.5659349522981543e-12 ... 4.7947103738903945e-14 False\n"
     ]
    }
   ],
   "source": [
    "analysis.config.flux_points.source = \"crab\"\n",
    "analysis.get_flux_points()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:664: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:665: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:312: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:313: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhkAAAFBCAYAAADaL72MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy86wFpkAAAACXBIWXMAAAsTAAALEwEAmpwYAABKhElEQVR4nO3deXzcV33v/9dnRvs6I8myxrsTZyFkx1ltmVwgbQgECi0tlPay03KB25b21xsubaELF9rb21vaUiCEQBdKSgKUkJtCaSGxHJIQhyTORpqQOIntkWVJM6N9nc/vjxkNY0WSpZG+Mxrp/Xw89NB8t3POTBTro7N8jrk7IiIiIistVOoGiIiIyNqkIENEREQCoSBDREREAqEgQ0RERAKhIENEREQCoSBDREREAlFR6gaUi7a2Nt+xY0epmyEiIlI0DzzwQK+7byj0eQUZi7Rjxw4OHjxY6maIiIgUjZk9t5znNVwiIiIigVCQISIiIoFQkCEiIiKBUJAhIiIigVCQISIiIoFQkCEiIiKBUJBxCmZ2nZndkEqlSt0UERGRsqIg4xTc/Vvu/t7GxkYGBgZK3RwREZGyoWRci5ROp3nqqaeorKyktbWVlpYWamtrS90sERGRVUtBxhJNTk7S3d1Nd3c3dXV1tLS00NLSQmVlZambJiIisqooyFiGkZERRkZGOHr0KI2NjbS2thKJRAiFNAolIiKiIGMFuDsDAwMMDAwQDoeJRCK0tLTQ1NRU6qaJiIiUjIKMFTY9PU1fXx99fX1UVlbS0tJCa2ur5m+IiMi6oyAjQJOTkxw/fpzjx49TW1ubmzCq+RsiIrIeKMhYpBC+rOdHR0c5cuQIR44coampiZaWFqLRqOZviIjImmXuy/vluV70XR/19JnXkox1Mth2IR5afm9EKBQ6af6Gma1AS0VERFaGmT3g7rsLfl5BxuJ8+92b/OrtacLTo0xVNpDaeAWJjk4G2i/Bw9XLLr+ioiK3HLa+vn4FWiwiIrI8CjKK5MILL/SbbvgMTScOEunuItL9AyomB5kO1zDQfimJWCep9stJVy4/QKipqclNGK2qqlqB1ouIiCzdcoMMzclYAg9Xkeq4klTHlTyXnqKx72Ei8S6i3QeIxveTDlUy0PYykrFOkh1XMl3VXFA9Y2NjHDt2jGPHjtHQ0JCbv1FRof9cIiJSPtSTsUgXXnihf+ELX5j7oqepTzxONN5FJN5F9Wg3biEGWy8gGdtHsmMPkzVty6rfzGhubqalpYXm5mZNGBURkcBpuKRIFgwy8rlTm3qKaHcm4Kgdeh6Aoeg5JGOdJDo6majftKy2hMNhotEoLS0tNDY2LqssERGR+SjICJiZXQdct3PnzvfccsstS36+ZvA5IvH9RONd1A08DcBI0y4SsU6SsU7GGrbDMlaVVFVVEY1GlfBLRERWnIKMIll0T8YCqoaPEek+QDTeRUPiMQDG6rdmA459jDSfsayAo7a2NrdCRRNGRURkuRRkFMlKBBn5Ksd6ae6+m2i8i8a+hzBPM17bTrKjk0RsH8Mt54CFCy6/oaGB1tZWotEo4XDh5YiIyPqlIKNIVjrIyBeeSBHp/gGR7i6aTjxAKD3JZHWUZMdeErFOBlsvhFBhK0s0YVRERAqlJaxFEmQ2zumqZvq2vZq+ba8mNDlMc899ROJdtBz5Lhue+xZTlY0kN15JMraXgQ2X4OHFD4W4O8lkkmQyedIOsY2NjcowKiIigVJPxiLt3r3b77333tyW7oODg0xMTARap02P03TiINH4fpqP30PF5BDT4VpSGy8j2dFJauNlpCvqCiq7srIyt0JFGUZFRGQuGi4pkt27d/vBgwdPOjc2NnZS0JFOp4NrQHqKxt4HiXYfIBI/QOVEIpP8a8PuTPKvjVcUnPyruro6N2G0pqZmhRsuIiLlSkFGkcwVZORzd4aGhnJBx8jISHCN8Wka+h8jEu8i0t1F9WhPNvnXRSRie0l27GWqprWgouvq6nIBh7akFxFZ3xRkFMmpgozZpqamcgHHwMAAk5OTwTTMnbrUf+ZycdQMH8ExhqMvzeXimKjrKKjoxsbGXEpzrVAREVl/FGQUyVKDjNlGR0dzAcfQ0FAwQyvu1AwdzqY330/dwDMADDefkVsaO964bcnFmhlNTU20tLQQiUS0QkVEZJ1QkFEkyw0y8qXT6ZOGVkZHR1ek3Nmqho9mAo7uAzQkHgdgtGF7Jr15rJPRpl1LTv4VCoVyK1Sampq0QkVEZA1TkFEkKxlkzDY5OXnS0MrU1NSK11E5eoJI9wEi8S4a+w5hpBmvi5Ho2Esy1slw9BywU/dQXP+1QwB88ufP1x4qIiJrnPJkrAGVlZW0trbS2pqZrDkyMkIqlWJgYIDh4WFWIhCcrN3AiZ1v4MTON1AxnqT5+A+IxvfT/uw36HjmFiaqW0nG9pLs6GSw9QIInXoOxvT0NL29vfT29mpJrIiIvMi6CjLM7DTgI0Czu//C7OPStu6n6urqqKurIxaLMT09zeDgYC7oWIncHFPVEfq2XUvftmsJTQ7RfPw+ot1dtL7wHdoPf5OpyiaSHVeSjHUy0PayRSX/mpycpKenh56eHqqrq3MBhzZtExFZvwINMswsAtwInAs48E53v6eAcm4CXgv0uPu5s65dA3wKCAM3uvsn5yvH3Z8B3mVmt851vBrNZOmMRCLAT3NzpFKpFZlAmq5sILHllSS2vBKbGqP5xP2ZpbHxLtpe+HY2+dflJGKdDLRftqgyx8fH6e7upru7m5qamtwKFeXgEBFZX+YNMszstkU83+/ub1/g+qeAb2d7DaqAk9JTmlk7MOrug3nndrn707PK+RLwN8Dfz3o+DHwauBo4AtyfbXcY+MSsMt7p7j2LeE+rWk1NDTU1NbS3t+cmkM70coyNjS2rbK+oyST2inVi6Ukaex8kEt9PpPtuWo59n3Soio9VnMkdwy8hPLGT6apTz8MYGxvj2LFjHDt2jLq6ulwPh3aJFRFZ++ad+GlmTwHvXuhZ4NPu/tJ5nm8CHgZO83kqMbM3Ae8DrnX3MTN7D/AGd792jnt3ALfn92SY2RXAx9z9Z7PHHwZw99kBxuyybs0fHpl9PJcgJ36ulImJiVzAMTg4yPT09MoUnJ6mof9RIt1d2DPfo92SuIUZaLuIZEcnydgepqpbllRkfX19rodDSb9ERFanICd+fsTd7zpF5X+4wOXTgBPAF83sAuAB4DfcfXjmBne/xcx2Ajeb2S3AO8n0SizWZuCFvOMjwLx9+mbWCnwcuCgbkNyQfzxXcGJm1wHXNW7axS99bskjPSXj7kyNjzA5OsLk6BDTk+PLLNGAfRzuvYhdvMDbNz7N3p5DbD9xkK2H/pJHfScH0udzIH0BJ4guqeSK6lqq6puoqmskFC6vaUL//GtXlLoJIiKrVmBLWM1sN3AvsMfd7zOzTwED7v77c9x7M3AtcLq7n5invB28uCfjTcDPuvu7s8e/Clzq7h9c6ffTsv0lfvX/vGmliy2a9PQUk6NDTI4OMzk2jC9xLkfP4Bg9g7MnnTpXRhK8vvEJ9tohTgvFAXgyvZWu9AUcSJ/PUdoXXYeZUVFdS2VdY9kEHAoyRGQtC3QJq5ltAd4C7AU2AaPAo8D/A/7V3Rf6TXUEOOLu92WPbwWun6OOTjITQ78BfBT4wBLafwTYmne8BTi2hOcX7bQN9WvmF4q7Mzw8nBtaWco+K9d/7RCPHhvg9g/uzTv7OhLAo0NHiHQfYEt8P+9O3s67uZ3Rxh0kOjpJxvYx2nTaopN/mRmNjY1Eo1EikQgVFas/4BARkZMtNPHzi2SGI24H/hToAWqAM4FrgI+Y2fXuvn+u592928xeMLOz3P1J4JXA47PquAj4PPAa4FngH83sT9z99xbZ/vuBM7JDLkeBNwO/vMhn1y0zo6GhgYaGBjZv3szk5GQu4BgYGCh4Lsd4wxaO73ozx3e9mcrRHiLxA0S7u4g99WU2PfUPmeRfsX2Z5F+RsxdM/uXuufY8//zzCjhERMrQQhM/z3X3R+d9MLNaZNscK0Hy77mQzBLWKuAZ4B3unsi7vofMEMoj2eNK4O3u/vlZ5XwFuApoA44DH3X3L2SvXQv8JZkVJTe5+8cXfsuFKYeJnyshfzfZVCr1opTn13/tED2DY9z09ksXXWbFeIJI991E4gdo7P0RIZ9ioqaNZMdeErFOhlrOX1TyL1APh4hIMRU1rbiZRYGt7n6o0ArL1XoJMmabmJjIBRwDAwP87i0PAZm04oUITw7RfPweIvH9NPccJJQeZ7KqmVTHHhIdexlsu3hRyb9AAYeISNACTytuZncCr8ve+xBwwszucvcPFVqplI+qqira2tpoa2vD3Wm8q4/J0SGqq6sZH1/6ipXpygb6t1xN/5arCU2N0tRzP9Hu/USP3Unb83cwXVFPcuPlJDs6GWi/hHTF/BlDNaQiIrK6LeZf4mZ3HzCzdwNfdPePmtm668mQTM9BZW09lbX1nHvuuYyPj5NKpUilUgwODi55j5V0RS3JTftIbtqHTU/Q2Puj7K6xd9N69D9Ih6pJtV9CMtZJauMVTFc2zFvW7ICjoaEhF3AoD4eISGksJsioMLMY8Itk9vkQAaC6upr29vZc9tGZYZVUKsXk5OSSyvJwFQMbL2dg4+U8l/4QDf2HiMb3E+k+QLT7AGmrYLDt4uwmbnuZqo7MX5Y7g4ODDA4OnhRwKPGXiEhxnXJORjYXxe8DB9z9v2U3Ffvf7v7zxWjgarFe52QUamRkhGQySSqVWtIS2RfxNPXJHxOJ7yca76J6JI4TYqj1PBKxTpIdnUzWblh0cfX19bmAQ6nNRUQWVtSJn+uZgozCzSyRnZk8WvCmbu7UDvyESLyLaHcXtYOHARiKvCS358p4/eZFFzezl0okEtHmbSIic1CQUSQKMlZGOp3ObV2fSqWWtXV99dDzROMHiMS7qE89CcBI02kkOzpJxDoZa9y56ORfNTU1uYCjrq7u1A+IiKwDCjKKREFGMEZHR3PDKsPDw6d+YB5VI91EujMBR0P/oxjOWP0WkrG9JDo6GYmcveiAo7q6mkgkQiQSoaFh/smmIiJrnYKMIlGQEbyZYZVkMsng4GDBwyoVY/2Z5F/dXTT1Poj5NBM17SRie0l2dDLUei7Y4pJ/VVZW5gKOxsZGbJGBiojIWhBokGFmZ5NJLX6fuw/lnb/G3b9daKXlSEFGceWvVkkmk0xNTRVUTnhigObj9xCNH6DpxA8JpSeZrIqQ7NhDMtbJYNtFeGhxK07C4TDNzc1EIhGam5sJheZPiy4ishYEFmSY2X8H3g88AVxIZpv2b2av/cjdLy600nKkIKO0hoaGcgHH2NhYQWVkkn/dRzTeRfPxewlPjzJVUU9q4xWZXBwbLsErFjcBNBQK5ZJ/NTc3K/mXiKxJQQYZjwBXuPtQdpv1W4F/cPdPmdmD7n5RoZWWIwUZq8f4+DjJZJJkMsnQ0NCpH5iDTU/QdOIgke4uIt0/oGJykOlwDQPtl5KIdZJqv5x0Zf3iyjKjvr4+N6xSXV1dUJtERFabIIOMx939nLzjBjKBxuPAK9z9wkIrLUcKMlanqampXMBR8DyO9BSNfQ9nl8YeoHK8n3SokoG2l2WWxm68kunq5kUXV1tbmws4tFJFRMpZkEHG94APuftDeecqgJuAt7r74mbOrREKMla/mXkcM0FHQVvWe5r6xOOZ9ObxLqpHu3ELMdh6AcmOTpIde5aU/Kuqqio3j0MTR0Wk3AQZZGwBpty9e45re9z97kIrLUcKMsrLzJb1iUSi8Hwc7tQOPJ1Jbx4/QO3QcwAMRc8hGesk0dHJRP2mRRcXDodpamrKTRwNh9dVnC4iZagoS1hntngnb68Td/9RoZWWEzO7Drhu165d73nqqadK3Rwp0PDwcK6Ho9CJozWDzxGJdxHp7qI+lflZGGk6nURsH8nYXsYadiw6F4eZ0dDQkBtWUYpzEVmNAg8yzOyPgbcDPwFmbnZ3f0WhlZYj9WSsHWNjYySTSRKJRMH7qlSNdGfmcMS7qE88lk3+tTWzn0qsk5HmMxcdcEBmHsfMsEp9/eImnIqIBK0YQcaTwHnuXnj+5zVAQcbaNDExQSKRWNZKlYqxvsxusfEDNPY9iHma8dr2bHrzfQy3nLPo5F+QSQDW3NxMc3MzTU1NyschIiVTjCDja8D73L2n0ErWAgUZa9/k5ORJK1UKyYYbnkgROX4PkXgXTScOZpJ/VUdJduwlEetksPVCCC0+p8ZMPo6ZXg5tVS8ixVSMIGM38E3gUWB85ry7v67QSsuRgoz1ZWpqilQqRSKRYGBgoKCAIzQ1QvPxe4nEu2juuY/w9BhTlY0kN15JMraXgQ278fDScmrU1dXlejk0rCIiQStGkPEY8DngESCXhMDd7yq00nKkIGP9mp6ePingKCQXh02P03TiYDbb6A+omBxiOlxDauPlJDs6SW28jHTF0nJqaFhFRIJWjCDjLnd/eaEVrBUKMgQyuThmAo5UKlV48q/eB4l2HyASP0DlRCKT/GvD7mzyryuYrlp88i/IrFZpbGzMLY/VahURWQnFCDL+gswwyW2cPFyyLpawzlCQIbOtSMDh0zT0P5ZbGls92pNN/nVRdtfYvUzVtC652JnVKjPDKkoCJiKFKEaQ8f05TmsJq0iemWyjMytVCgs4nLrUf2aXxu6nZvgIjjEcfWluaexEXceSi53ZPXZmWEWbuYnIYhUlGZcoyJDFmwk4+vv7l9HD4dQMHSYSP0A03kXdwNMAjDTtyib/6mSscfuSi53ZzG0m6KitrV1620Rk3ShGT8b/Av7M3ZPZ4yjw2+7+e4VWWo4UZEghVmRIBagaPpqdw9FFQ+JxAEYbtpOM7SUR28do064lJf/KlVtVRVNTkyaPisicihFkvGhbdzP7kbtfXGil5UhBhizXSgUclaMnssm/umjoO4SRZrwuRqJjL8lYJ8PRc8CWHizMTB6d6eXQlvUiUowg4xBwibuPZ49rgYPu/tJCKy1HCjJkJaXT6Vxq81QqVVAeDoDweIrI8R9kkn/1PkAoPclEdSvJ2F6SHZ0Mtp6/pORf+aqrq3MBR0NDg3o5RNahYgQZvwu8Dvgimb1L3gnc5u5/Vmil5UhBhgRlenqaZDJJf39/wZlGAUKTQzT33Ec03kVTzw+zyb+aSHZcQTK2j4G2l+Hhwpa25mce1RJZkfWjWLuwXgO8CjDg39z9O4VWWK4UZEgxTE1NnRRwFMqmxrLJv/bTfPweKqaGmQ7Xktp4OYlYJwPtl5GuKHzSZ01NTW4eR2Njo5bIiqxRgQUZZmZ+ighkMfesFQoypNgmJydJJBL09/czPDxccDmWnqSx98FsLo67qZxIkg5VMbDhEhKxTlIbr2C6qrHg8kOhEE1NTbkJpOrlEFk7ggwy7gS+BnzT3Z/PO18F7AXeBnzf3b9UaOXlREGGlNLExAT9/f3L2p4eyCT/6nuUSHdmm/qqsRO4hRlou4hkRyfJjj1M1bQsq60r2cvxS5+7B4B//rUrltUmESlMkEFGDZn5F28FdgJJoBYIAf8GfNrdHyq04nKjIENWi7GxMfr7++nv72d8fPzUD8zHnbrkj4l2dxGJd1EzfBTHGGo5N5PevGNvQcm/8i23l0NBhkhpFWtORiXQBozO5MtYbxRkyGo0MjKSCzgmJycLL8idmsFnicYzAUfd4DMADDefRTLWSSLWyXjD1mW3d6m9HAoyREpruUHGota2ufskEC+0EhEJRl1dHXV1dWzZsoXBwUH6+/tJJpNMTU0trSAzxppOI950GvGz3kb10JFsLo79bP7xjWz+8Y2MNu7IZBvt6GS06bSCkn+NjY0xNjbG8ePHcytWZno5lJdDZO1RWvFFUk+GlAt3z6U1L3gflTyVoz15yb8e+Wnyr1gnydg+hiNnF5T8a7aZvBwzvRyhUEg9GSIlVpSejLXCzE4DPgI0u/svzD4ubetEVoaZ5fJZzCT96u/vZ2BgoKAcHJO17ZzY+UZO7HwjFeMJIt13E4l30f7M1+n4yVeZqGkj2bGXRKyToZbzIRQuqN3j4+P09PTQ09NDKBSioaGBsYF+KmvrCypPREpv3iDDzL4DfBv4V3f/caEVmFkYOAgcdffXFljGTcBrgR53P3fWtWuATwFh4EZ3/+R85bj7M8C7zOzWuY5F1ppQKERLSwstLS1MTU2RSCTo6+sreEnsVHWU3u2vpXf7awlPDtF8/B4i8S7anv9X2g//C5NVzaQ69pDo2Mtg28UFJ/+a2WRuJNEDCXjkkdbcsEpjYyPhcGGBjIgU10I9GW8DrgE+ZmZnAveRCTr+w92HllDHbwBPAE2zL5hZO5nJpIN553a5+9Ozbv0S8DfA3896Pgx8GrgaOALcb2a3kQk4PjGrjHe6e88S2i2yplRUVLBhwwY2bNjA+Ph4bsLo2NhYQeVNVzbQv+Vq+rdcTWhqlKae+zNLY4/dSdvzdzBdUU9q42UkOvYx0H5Jwcm/egbHmJiYoLe3l97e3pN2km1qaqKurq6gckUkePMGGe7eTeaX+5fMLARcBrwa+F0zGyWT+XPB1OJmtgV4DfBx4ENz3PJy4H1mdq27j5nZe4A3ANfOast+M9sxx/OXAk9neyQws5uB17v7J8j0fIjIHKqrq4nFYsRisRVZoZKuqCW5aR/JTfuw6Qkae3+UWanSfTctR79HOlRNqv0SkjPJvyobFl12z+DEScfuztDQEENDQxw9epTKysrcMtmmpiYqKtbVKLDIqrbY1SVp4J7s1x+YWRvws4t49C+B3wXmTCfo7reY2U7gZjO7hUxejqsX06aszcALecdHyARDczKzVjIBz0Vm9mHghvzjbHAy+5nrgOt27dq1hGbJejEzMXGtmBwbZmJogInRQXxZE0brgJ8lxKs4z55hb+gQe+OH2Nl9gEkP86CfwYH0BdyTPpfk3P88APBsb2ZY5/qvHVp0zRVVNVTW1lNRU09Fda1Sni+SJtdKEAoK+d29F/jyQveY2cwcigfM7KoFyvqzbA/EZ4DTlzgUM9e/HvPObHP3PuDXZ52efTz7mW8B39q9e/d7ltAukbJUWVNPZU09demNTI4OMTEywOTocMGbtqUJ87CfwcPTZ/C302/gbHuePaFDdIYe5kMV/8y0f5VH/TQOpM/n7vT5nCAKZIZI8nswHj02AEB7YxXtjTUL1jk1McbUxBik+rBQiMqaOiprG6ioqSdcUVnQ+xCRwgTZr7gHeJ2ZXQvUAE1m9o/u/iv5N5lZJ3Au8A3go8AHllDHESA/Q9AW4NiyWi2yBOvhr7+ZCaP9/f0MDS3lb4C5XAi8jrg7yYFniMT3c2Z3FxcMfoP38w2GI2fnlsaO12/m+q8d4tFjA9z+wb0r8E4yycBmJpBq+3qR4BUlT0a2J+N3Zq8uMbOLgK+QmbfxLPCPwDPu/ntzlLEDuD1/dYmZVQD/CbwSOArcD/yyuz+20u9BeTJEyE0Y7evrW15K81mqh54nEs/k4qhPPQnASONp3Jo8gy927+LPf+2NBSX/WsjMMtmZoKOmZuEeEpH1KPC04mY214TNFPDAYvcuWSDI2AMMuPsj2eNK4O3u/vlZ930FuIpMavPjwEfd/QvZa9eSmfsRBm5y948vpk1LpSBD5GTDw8O5CaNLzjC6gMqR47n9VOr7HiVkzlj9ZpIdmfTmI5GzVzzgAKiqqjppAqmWyYoUJ8j4J2A38K3sqdeQ6TE4G7jlVCtM1goFGSJzm8kw2tfXRyqVWnaG0Xx/+rUD7Ak9wttjz9LU+yDm00zUtJOI7SXZ0clQ67lgKx8MmBl1dXW5Xo66ujpNIJV1qRgZP1uBi2cmZJrZR4FbgX3AA8C6CDJEZG75GUanp6dz8zcGBwdP/fApJGji9vQe9l7+PsITgzQfv4dovIsNz93Oxme/zmRVhGTHlSRj+xhsuwgPrczETndneHiY4eFh4vE44XD4pF6Ope4mK7JeLSbI2AbkL1SfBLa7+6iZrdygrIiUvXA4TFtbG21tbUxMTOTmbxSa8CvfdFUj/Vt/hv6tP5NN/nUf0XgXLUe/z4bn72Cqop7UxisyuTg2XIJXrNwci5ngKZFIAJpAKrJYiwky/gm418y+mT2+DviKmdUDjwfWMhEpa1VVVXR0dNDR0cHIyAh9fX0rNn8jk/zrKpKbrsKmJ2jqfYBIvItI9w9oPfrvTIdrGGi/lESsk1T75aQrV3b/k5ndZHt6ejCz3G6yTU1N1NYWltlUZC1aMMiwzCDkl4A7gL1k8lL8urvPTE54a6CtE5E1IX9L+pn5G8lksuD8G/k8XEVq4xWkNl7Bc+lpGvseJhLfT6T7bqLx/aRDlQy0vYxkrJPkxiuZrm5egXeUV392TsrAQCaXhzKQivzUgj/97u5m9i/u/jIy8y9ERAo21/yNvr6+Fci/kRUKM7jhYgY3XMwL5/136hOPZ9Kbx7uI9NyLE2Kw9fxMwNGxl8naDStTb57JyUn6+vro6+sDMgHWzD4r9fX1mkAq68piVpd8GviSu99fnCatTlpdIhKcoPJv5LhTO/A00fh+IvED1A49B8BQ9JzsNvX7mKjftPL1zhIOh08aWqmurg68TpHlKMYS1seBs4DDwDCZIRN39/MLrbQcKcgQKY6hoSH6+vpIJBJMT08HUkfN4HPZORxd1KeeAmCk6XQSsX0kY3sZa9gRSC6O2aqrq3MBh7awl9WoGEHG9rnOu/tzhVZajhRkiBSXu5NMJunr62NgYGBF5m/MpWqkm0i8K5NtNPEYhjNWvzWb3ryTkeYzixJwzGxhPxN01Nev7GRVkUIEHmRkK9kLnOHuXzSzDUCDuz9baKXlSEGGSOlMTU3lhlNGRkYCq6dirI9I9wGi8QM09j2IeZrx2naSHZmAY6jlpYEk/5qzLRUVuaGV5uZmKiu1uZsUXzF6Mj5KJuPnWe5+ppltIpPpc0+hlZYjBRkiq8Po6GhuOezk5GRg9YQnBogc/wGReBdNJw4SSk8yWR3NzOHo2Mtg20UQKt7KkZqamtwEUuXmkGIpRpDxEHAR8CN3vyh77pDmZIhIKc0sHe3v7yeZTK5oOvPZQlMjNPf8kEh8P83H7yU8PcZUZQOpjVeSiHUysGE3Hi7eJE7l5pBiKUZa8YnsUlbPVqiBQhEpucCXw+ZJV9SR2HQViU1XYdPjNJ04SCR+gMjxH9B65N+YDteQar+MZGwfqY2Xka6oW/E25FNuDikXi+nJ+B3gDOBq4BPAO4F/cve/Dr55q4d6MkTKw/j4eC5PxcTExKkfWI70FI19D2VycXQfoHI8kUn+teFlmXkcHVcyXbWyyb8WY2Zzt5mhFeXmkEIVa+Ln1cDPkFm++h13/26hFZYrBRki5WdwcDC3HDbI4RQAfJr6/sczuTi6u6ge7cEtxGDrhSRjnSQ69jJV0xpsG+YQCoVOGlqpqVm5PV1k7StKkCEKMkTKWTqdzg2nrMTusKfkTl3qKSLx/UTj+6kZPoJjDEfPyebi6GSiriP4dsyhqqrqpNwcGlqRhQQWZJjZ7e7+2lNUfsp71goFGSJrw8TERG44JZDsorO5UzN0mEj8ANF4F3UDTwMw3HxGbmnsWOOc6YiKYmZopbm5WWnP5UWCDDKSwP6FngVe6u6nFVp5OVGQIbL2FCO76GxVw8eIdmf2U2lIZDayHm3Ylh1S6WS0+YyiJP+aSzgcpqGhIRd0KO25BBlkvHwRz0+4+z2FVl5OFGSIrF3pdPqk7KLFUjl6gkj33US6u2jsfRgjzXhtRybgiHUyHD0HrHT5MKqrq0+az6G05+uP5mQUiYIMkfUhfxfVsbGxotUbHk/9NPlX7wPZ5F8tJDr2kox1Mth6QVGTf81mZietWtHQyvqgIKNIFGSIrD/Dw8O57KLFGk4BCE0O0Xz8PqLdXTT1/DCb/KuJZMcVJDtmkn9VFa09c9GOsuuDgowiUZAhsn6VajgFwKbGaDpxkGh8P83H76FiapjpcC2pjZeTjHWSar+MdEXpM35qR9m1qRhpxdvdvWfWubPc/clCKy1HCjJEBEo3nAJg6Ukaex8iEt9PpPtuKieS2eRfl5CI7SO18QqmqxqL2qY52zlrR9m6ujoNrZSpYgQZTwK/7+5fzR7/NvAudz+n0EpLxcxOAz4CNLv7L8w+XuhZBRkiMluphlMA8Gka+h4l0t1FNH6AqrEe3MIMtl6YycXRsYepmpbitmke4XD4pLTnVVWlHeqRxStGkBEDbgDGgI3AE8Bvu/uCGwSYWQ2ZJbDVZPZIudXdP1pQI81uAl4L9Lj7ubOuXQN8CggDN7r7JxdR3q35QcXs47koyBCR+ZRyOAXIJv96kki8i2i8K5f8a6jlXJKxTpIde0uW/GsuNTU1Jw2taEfZ1atYacXfD3wYSANvcfe7F/GMAfXuPmRmlcAB4Dfc/d68e9qBUXcfzDu3y92fnlXWPmAI+Pv8IMPMwsB/ktlX5QhwP/AWMgHHJ2Y16Z0zwz4KMkQkKKUcTgEyyb8GD+fSm9cNPAPAcPNZ2aWxexlv2Fb8ds3DzGhoaMhNIq2v1x6cq0ngu7Ca2XeBOHAusAW4ycz2u/vvLPScZ6KXmd6OyuzX7Ijm5cD7zOxadx8zs/cAbwCunVXWfjPbMUc1lwJPu/sz2bbeDLze3T9BpudDRKSoKisr6ejooKOjoyTJvjBjrGkn8aadxM96G9XDR4nEM8m/Nv/4Rjb/+EZGG7bn0puPNp1esuRfkNlRdnBwkMHBQY4dO0ZFRcVJq1Y0tFLeFrPo+tPu/i/Z10kzu5JMr8YpZXsaHgB2Zcu5L/+6u99iZjuBm83sFjI7vF692MYDm4EX8o6PAJct0J5W4OPARWb2YTLDQLnjbHAy+5nrgOt27dq1hGaJiEBDQwMNDQ1s3bqVZDJJb29vcfZOyTNev5nju97M8V1vpnK0J5PevPsAsae+zKan/oHxuhiJWCfJjk6Goy8pafIvgKmpKRKJBIlEAtDQSrkryhJWM4sA3wA+6O6PznH9ZjK9F6e7+4l5ytgB3D5ruORNwM+6+7uzx78KXOruH1zp96DhEhFZCUXfO2UeFeMJmrt/QLS7i8YTPyLkU0zUtJLs2Esito+hlvMhtLqWoc4MreSvWpFgFWO4ZJCfDnNUkRn2GHL35sVW4u5JM7sTuAY4Kcgws04yQzHfAD4KfGCx5ZLpudiad7wFOLaE50VEiqqqqopYLEYsFivuVvSzTFVH6dv+Gvq2v4bQ5BCR4/cSiXfR9vy3aT/8TSarmkl17CHRsZfBtotLnvwLTh5aOXr0KBUVFSetWqmsrCx1E2WWUwYZ7n7Somsz+zkycyEWZGYbgMlsgFELvAr401n3XAR8HngN8Czwj2b2J+7+e4ts//3AGdkhl6PAm4FfXuSzIiIl1djYSGNjI9u2bSORSNDb28vQ0IIL9wKRrmygf8ur6N/yKkJTozT13E+k+wDRY3fR9vwdTFfUkdp4OYmOTgbaL10Vyb8gM7TS399Pf38/ALW1tbn5HBpaWR0KGi4xs3vd/fJT3HM+8HdkVnqEgK+6+x/NumcPMODuj2SPK4G3u/vnZ933FeAqoA04DnzU3b+QvXYt8JfZem5y948v+Q0tgoZLRKQYxsfHc8MpExMTJW2LTU/Q2Psg0e4umrvvpnIiRTpURar9EpIzyb8qG0raxvloaGVlFCNPxhvzDkPAbuDl7n5FoZWWIwUZIlJsAwMD9PX1kUwmiz6c8iLpaRr6H8kujT1A1VgvaatgsO1ikrG9meRf1dHStnEBGlopTDGCjC/mHU4Bh4HPz041vtYpyBCRUpmenqa/v5++vj6Gh4dL3RzwNPXJHxOJHyAS30/NyDGcEEOt55Ho6CQZ28tkbXupW7mg2traXMDR0NCgoZV5aIO0IlGQISKrwejoaC6V+eTkZKmbA+7UDj6TzTa6n9rBwwAMR87OLY0db9hS2jaegoZW5hdYkGFmf82Lk2fluPt/L7TScqQgQ0RWE3cnlUrR19dHKpVitfzBWD30Qi69eX0qs4/mSONpJGOZpbFjjTtLmvxrMSorK09KCLaeh1aCDDLettCD7v53hVZajhRkiMhqNTU1lZssOjo6Wurm5FSOHCfafYBIvIuG/kcwnLH6zSQ7OknEOhmJnL3qAw5Y30MrQQYZFe4+VXDL1hgFGSJSDkq6M+wCKsb7iXT/gEh8P029D2I+zUTNhtyQylDruWCrK/nXXEKh0ElDK7W1q2M5b1CCDDJ+5O4XZ1//dRBZNMuJggwRKScl3xl2AeGJQZqP30M03kXTifsJpSeYrIqQ7NhDMtbJYNtFeKg8hihmhlaam5tpbGxcc0MrQQYZD7r7RdnXuYBjvVKQISLlarWkMp9LJvnXD4nG99N8/F7C06NMVdST2ngFydheUhsuxStqSt3MRVtrQytBphVfHbOIRERkWVZLKvO5pCtqSW56OclNL8emJ2jqfYBIfD+R7ntoPfrvpEPVpNovJRHbR2rjZaRXafKvGaOjo4yOjnL8+PF1N7Qyl4V6MkaApwEDTs++Jnvs7n5+UVq4SqgnQ0TWkunp6Vwq81WRe2O29DSN/Q9nt6k/QNV4H+lQJYNtF2fmcWzcw3T1orfQWhUqKytPSghWUbGYjdBLK8jhku0LPejuzxVaaTlSkCEia9XY2Bi9vb2rJ/fGbJ6mPvEEkfh+ovEuqke7cUIMtp5PMraPZMceJms3rEhV13/tEACf/Png/46uq6s7aa8VW4UrbZSMq0gUZIjIWrdac2+cxJ3agZ9k0pvHu6gdyvy9OxQ9J7tNfScT9ZsLLr6YQUa+maGVmQmkq2VoJfCt3kVEZH0wMyKRCJFIJJd7o7e3l7GxsVI37afMGG3exWjzLo6d/U6qB58n2t1FJL6fLU/cwJYnbmCk6XSSsU4SHZ2MNe4oi1wc6XSagYGB3EqgchxamUt5tlpERAJVUVHBxo0b2bhxI8PDw/T29pJIJFZV7g2A8cZtdDe+le4z3krVSHcu22jsyb9j05NfYqx+S2YOR2wfI81nlkXAATA5OZlbEQSZoZX8VSurcWhlLgsGGWZ2vrsfMrPzZrZjFxGR9aW+vp76+nq2bt1KIpGgr6+PwcHBUjfrRSbqOug5/U30nP4mKsb6iHQfIBo/QMdP/pnY019hvLadZEcnyVgnQy0vLYvkXzNGRkYYGRmhu7ubUCh0UtrzmprVu8T3VD0Z7zSzTwPvAn4z+OaIiMhqFQqFaG1tpbW1lfHx8dxf2hMTE6Vu2otM1bTSu+P19O54PeGJASLHM9lGNzx3Gxuf/RqTVdG85F8Xlk3yL8gMraRSKVKpFJBZopwfdKymoZV5W2JmHwVCwL3Al83sD9z9j4rWMhERWbWqq6vZtGkTmzZtYmBggN7eXpLJ5KqcLDpd1UTf1mvo23oNoakRmo/fR6S7i5aj/86G529nqrKB1MYrSMT2UUU1E1SVuslLkp9sDVbX0MqCq0vM7HXANcC33f22orVqFdLqEhGRhU1NTdHf309fXx8jIyOlbs4p2fQ4TScOEokfIHL8B1RMDjLqVfwwfQ5bL3ktqfbLSFfWl7qZy7LcoZVAl7Ca2cfd/SNm9sfu/vuFVrIWKMgQEVm8kZGR3EZtU1NlsNdmeorGvod58u5vsCf0CC02SDpUyUDby0jGOkl2XMl0VXkl/5pLVVVVLuBobGw85dCK8mQUiYIMEZGlc3eSySS9vb2rbqO2uVz/tUOESPOpq8LZpbFdVI8exy3EYOuF2YBjD5M1baVu6oqor6/PBR319fUvGlpRngwREVm1zIxoNEo0Gl3VG7XlSxNiuPU8hlvP48g576Mu9VR2aex+tj3yKbY+8lcMR8/JLo3tZKIuVuomF2x4eJjh4WHi8TjhcPikvVZWYtWKggwRESmK2Ru1zUwWXQ0btc3LjJHImYxEzuTY2e+kZui5XC6OrY9/lq2Pf5aRpl0kYvtIxjoZa1xwR45VbXp6+kWrVpZLQYaIiBRdY2MjjY2NTE9P09/fT29v7+qfLGrGWOMOuht30H3mr1I1fCw3pLL5yZvY/ORNjDZsy2UbHW0+o2ySf81lJZYmL7SENQy8G9hCZnXJ3XnXfs/d/2TZtYuIyLoWDofZsGEDGzZsYHR0NLdRWzlMFp2o38Tx03+J46f/EpWjJ4h0302ku4uOp79C7KkvM17bkQk4Yp0MR88BC5W6yUW3UE/G54A64IfAX5nZXe7+oey1NwIKMkREZMXU1taydetWtmzZUlaTRQEmazdwYufPcWLnzxEeT2WTf3Wx4fC/sPGZW5isbiHZsYdEbB+DrRdAaH0MJCz0Li919/MBzOxvgL81s68DbwHKt/9HRERWtbkmi/b29q7KzKJzma5upm/bq+nb9mpCk8M099xLNN5Fy5HvsuG5bzFV2USy4wqSHZ0MbNiNh8sr+ddSLBRk5N61u08B7zWzPwC+BzQE3TAREZFSTBbtGVy5XWfTlfUkNr+SxOZXYlNjNJ04mJ3HcYC2F77DdLiW1MbLScQ6GWi/jHTF6tjifaUsFGQcNLNr3P3bMyfc/Y/M7BjwmeCbJiIi8lPFmizaMxhMj4lX1JCK7SUV24ulJ2nsfYhIvItI9920HPs+6VAVAxt2k4h1ktp4JdNVjYG0o5jmDTLc/VfmOX8jcGNgLRIRkaL7pc/dU+omFGRqYoyJoRQTIwOkV2Ab+md7h4FMUq7gVQOvIsQreKk9S2foYfZ0H2Ln8R8w5SEe9jM4kD6fu9PnkaCpCO1ZeQutLvldd/+z7Os3ufstedf+l7v/z2I0UEREZD4VVTVUtNRQG21ncmSQ8aEUk2PDSy6nZ3DspB6MR49lJpy2N1bR3hjsVuppQjzip/PI9On87fQbONNeoDP0MJ2hh/mNilv4oN/KY76TA+nzOZA+nx5aAm3PSpo3rbiZ/cjdL579eq7j9UBpxUVEysPExAS9vb0FbUN//dcO8eixAW7/4N6AWrcE7tQMPku0+wCR+H7qBp4BYLj5TJKxfSRiexlv2BZoE3bv3h1YWnGb5/VcxyIiIqtCVVVV2WxDvyAzxppOI950GvEz/yvVw0czczjiXWz+8Y1s/vGNjDbuINGRSW8+2nT6qkv+tVCQ4fO8nutYRERk1ZnZh2NmG/re3l5GR0cXfKa9cXUuKR2v38zxXW/m+K43Z5N/dRGNHyD21JfZ9NQ/MF4Xy+yn0tHJcPQlqyL510JBxgVmNkCm16I2+5rscbADVCIiIiuooqKC9vZ22tvbGRkZyWUWnZ5jsmjQczBWQib51xs5sfONVIwnae6+m2h3F+3PfJ2On3yViepWkrG9JGOdDLZcAKFwSdq50OqS0rRIREQkQHV1dWzbtu2kzKKDg4OlblbBpqoj9G1/DX3bX0N4cojm4/dk8nA8/23aD38zm/zryky20baLi5r8a33kNRUREZklFArR0tJCS0sL4+Pj9Pb2Ego/Tnp69e+bMp/pygb6t1xN/5arCU2N0nTifiLxA0TjXbS98G2mK+oyyb86OhlovzTw5F/rKsgws9OAjwDN7v4Ls49L2zoRESmV6upqNm/eTPPm05kcGyYSiZBKpcpvsmiedEUtydg+krF9meRfJ35EpDub/Ovo90iHqki1X0Kyo5NUx5VMV658Mu/Aggwz2wr8PdABpIEb3P1TBZZ1E/BaoMfdz5117RrgU0AYuNHdPzlfOe7+DPAuM7t1rmMREVnfzIyq2gZOP/10Jicnc5NFx8ZWLtV4KXiokoGNlzGw8TKeP++3aOg/lF0a20W0+27cwgy0XUwy1kmyYw9T1dEVqTfInowp4Lfd/Udm1gg8YGbfdffHZ24ws3Zg1N0H887tcvenZ5X1JeBvyAQt5N0bBj4NXA0cAe43s9vIBByfmFXGO929Z2XemoiIrHWVlZVs3LiRjRs3MjQ0RG9vL4lEItB9U4oiFGao7SKG2i7ihZe+n7rkk0Tj+4nG97P90F+w7dBfMtRyLslY57KrCizIcPc4EM++HjSzJ4DNwON5t70ceJ+ZXevuY2b2HuANwLWzytpvZjvmqOZS4OlsjwRmdjPwenf/BJmeDxERkWVraGigoaGBrVu3kkgk6O3tZXh46ZlFVx0LMRJ9CSPRl3D0Je+ldvCZTO9GvIutj3162cUXZU5GNkC4CLgv/7y732JmO4GbzewW4J1keiUWazPwQt7xEeCyBdrRCnwcuMjMPgzckH+cDU5ERETmFA6HaWtro62tjdHRUfr6+ujr62Nqqnwni+aYMdp0OqNNpxM/6+1UD70Af/iGZRUZeJBhZg3A14DfdPeB2dfd/c+yPRCfAU5396GlFD/HuXln6bh7H/Drs07PPj65ArPrgOt27dq1hGaJiMhaV1tby5YtW9i8eXNuKezAwIt+zZWt8Yatyy4j0HRgZlZJJsD4srt/fZ57OoFzgW8AH11iFUeA/E9hC3CsgKbOy92/5e7vbW5uXsliRURkjTAzotEoZ5xxBueddx6bNm2iqmp1Zg0ttsCCDDMz4AvAE+7+F/PccxHweeD1wDuAFjP7kyVUcz9whpntNLMq4M3AbctruYiISGGqqqqIxWKcd955nHHGGUSjUWyV7SdSTEH2ZOwBfhV4hZk9lP26dtY9dcCb3P0n7p4G3gY8N7sgM/sKcA9wlpkdMbN3Abj7FPAB4DvAE8BX3f2x4N6SiIjI4jQ1NXHaaadx/vnns2XLFmprg018tRoFubrkAKfYrdXd7551PEmmZ2P2fW9ZoIw7gDsKbKaIiEigKioqckthh4eHc/umlP1S2EVYVxk/RURESqm+vp76+nq2bt1Kf38/fX19DA0tZb1DeVGQISIiUmShUCi3FHZsbIze3t61sxQ2j4IMERGREqqpqVmzS2EVZIiIiGT9869dUbK6Z5bCRqNRJiYm6Ovro7e3l4mJiZK1abkUZIiIiKwyM0thY7EYAwMD9Pb2kkwmy25XWAUZIiIiq1hTUxNNTU1MTU3l0piPjo6WulmLoiBDRESkDJTjUlgFGSIiImVm9lLY1borrIIMERGRMpW/FHZ0dDTXu7FalsIqyBAREVkDamtr2bp1K1u2bFk1S2EVZIiIiKwhs5fCziT6KsVSWAUZIiIia1RVVRWbNm06aSlsKpUq2lJYBRkiIiJrnJnR3NxMc3Mzk5OTuaWwY2NjgdarIENERGQdqayspKOjg46ODoaGhjhx4gTJZDKQpbAKMkRERNaphoYGGhoamJ6ezi2FHRkZWbHyFWSIiIisc+FwmA0bNrBhwwZGRkZyS2GXS0GGiIiI5NTV1bFt2za2bNmy7LJCK9AeERERWWNCoeWHCAoyREREJBAKMkRERCQQCjJEREQkEAoyREREJBAKMkRERCQQCjJEREQkEFasTVLKnZmdAJ4rdTtkVWoGUqVuRBla659bOb2/1dbWUrSnWHUGWU8QZW939w2FPqwgQ2SZzOwGd39vqdtRbtb651ZO72+1tbUU7SlWnUHWs9r+O4KGS0RWwrdK3YAytdY/t3J6f6utraVoT7HqDLKe1fbfUT0ZIiIiEgz1ZIiIiEggFGSIiIhIIBRkiIiISCC01fsitbW1+Y4dO0rdDJF15cknnwTgrLPOKnFLZL3Qz9zJHnjggd7lLGFVkLFIO3bs4ODBg6Vuhsi6ctVVVwFw5513lrQdsn7oZ+5kZras/FAaLhEREZFAKMgQERGRQCjIEBERkUAoyBAREZFAlG2QYWbXmNmTZva0mV0/x3Uzs7/KXj9kZhfnXTtsZo+Y2UNmptmcIiIiASjL1SVmFgY+DVwNHAHuN7Pb3P3xvNteDZyR/boM+Ez2+4z/4u69RWqyiIjIulOuPRmXAk+7+zPuPgHcDLx+1j2vB/7eM+4FImYWK3ZD15qrrroqt8RLRERkIeUaZGwGXsg7PpI9t9h7HPg3M3vAzFbVtrgiIiJrRVkOlwA2x7nZ28kudM8edz9mZu3Ad83sx+6+/0WVZAKQ9wJs27ZtOe0VERFZd8q1J+MIsDXveAtwbLH3uPvM9x7gG2SGX17E3W9w993uvnvDhoKzqoqIiKxL5Rpk3A+cYWY7zawKeDNw26x7bgP+a3aVyeVAyt3jZlZvZo0AZlYP/AzwaDEbLyIish6U5XCJu0+Z2QeA7wBh4CZ3f8zMfj17/bPAHcC1wNPACPCO7OMbgW+YGWTe/z+5+7eL/BZERETWvLIMMgDc/Q4ygUT+uc/mvXbg/XM89wxwQeANFBERWeeKNlxiZiEzaypWfSKyNhw+fLjUTRCRAgUaZJjZP5lZU3buw+PAk2b2/wVZp4isLc89t6ydpkWkhIIeLjnH3QfM7K1khjb+B/AA8L8DrlekKJSYLFgPPfQQoM+5GO68885SN0HWoKCDjEozqwR+Dvgbd580s9n5LERETnL48OGTejDuuusuALZv386OHTtK1CoRWaqgg4zPAYeBh4H9ZrYdGAi4TpGi0V9/wbrqqqu46667yMzjFpFyE2iQ4e5/BfxV3qnnzOy/BFmniIiIrA6BBBlm9qFT3PIXQdQrImvP9u3bS90EESlQUD0ZjQGVKyLrjOZgiJSvQIIMd//DIMoVERGR8hHonAwzqwHeBbwUqJk57+7vDLJeERERKb2gM37+A9AB/CxwF5mdUAcDrlNERERWgaCDjF3u/vvAsLv/HfAa4LyA6xQREZFVIOggYzL7PWlm5wLNwI6A6xQREZFVIOhkXDeYWRT4feA2oAH4g4DrFBERkVUg6GRcN2Zf3gWcFmRdIiIisroEvbpkzl4Ld/+jIOsVERGR0gt6uGQ473UN8FrgiYDrFBERkVUg6OGS/5N/bGZ/TmZuhoiIiKxxQa8uma2OFZqbYWbXmNmTZva0mV0/x3Uzs7/KXj9kZhcv9lkRERFZvqDnZDwCzOzRHAY2AMuej2FmYeDTwNXAEeB+M7vN3R/Pu+3VwBnZr8uAzwCXLfJZERERWaag52S8Nu/1FHDc3adWoNxLgafd/RkAM7sZeD2QHyi8Hvh7d3fgXjOLmFmMTJ6OUz0rIiIiyxTIcImZtZhZC5kU4jNfo0BT9vxybQZeyDs+kj23mHsW86yIiIgsU1A9GQ+QGSYxYBuQyL6OAM8DO5dZvs1xzhd5z2KezRRg9l7gvQCtra187GMfW0IT16bDhw8D6LOQotDPmxSbfuZWlmVGEwIq3OyzwG3ufkf2+NXAq9z9t5dZ7hXAx9z9Z7PHHwZw90/k3fM54E53/0r2+EngKjLDJQs+O5fdu3f7wYMHl9PsNeGqq64C4M477yxpO2R90M+bFJt+5k5mZg+4++5Cnw96dcklMwEGgLv/K/DyFSj3fuAMM9tpZlXAm3nx0tjbgP+aXWVyOZBy9/ginxUREZFlCnriZ6+Z/R7wj2SGJH4F6Ftuoe4+ZWYfAL5DZtXKTe7+mJn9evb6Z4E7gGuBp4ER4B0LPbvcNomIiMjJgg4y3gJ8FPhG9nh/9tyyZXtI7ph17rN5rx14/2KfFRERkZUVdMbPfuA3gqxDim9mYpSIiMhCAgkyzOwv3f03zexbzLFyw91fF0S9UhzPPfdcqZsgIiJlIKiejH/Ifv/zgMovuieffDI363g9e+ihhwD0WWRpBrqIyPwCCTLc/YHs97tmzplZFNjq7oeCqFOCdfjw4ZN6MO66K/Ofdvv27ezYsaNErRIRkdUs6L1L7gRel63nIeCEmd3l7h8Kst4gnHXWWfqrlUwPxl133UWQ+VVERGRtCDpPRrO7DwBvBL7o7i8DXhVwnSIiIrIKBB1kVGQ3JftF4PaA65Ii2b59e6mbICIiZSDoIOOPyCS9+om7329mpwFPBVynBExzMEREZDGCzpNxC3BL3vEzwM8HWaeIiIisDoH2ZJjZmWb2H2b2aPb4/GyacREREVnjgh4u+TzwYWASILt89c0B1ykiIiKrQNBBRp27/3DWuamA6xQREZFVIOggo9fMTiebWtzMfgGIB1yniIiIrAJB78L6fuAG4GwzOwo8C7w14DpFRERkFQh6dckzwKvMrJ5Mr8ko8EuAdtgSERFZ4wIZLjGzJjP7sJn9jZldDYwAbwOeJpOYS0RERNa4IHdhTQD3AO8BfheoAn7O3R8KqE4RERFZRYKa+Hmau7/d3T8HvAXYDbx2pQIMM2sxs++a2VPZ79F57rvGzJ40s6fN7Pq88x8zs6Nm9lD269qVaJeIiIj8VFBBxuTMC3efBp5198EVLP964D/c/QzgP7LHJzGzMPBp4NXAOcBbzOycvFv+r7tfmP26YwXbJiIiIgQXZFxgZgPZr0Hg/JnXZjawAuW/Hvi77Ou/A35ujnsuBZ5292fcfQK4OfuciIiIFEEgQYa7h929KfvV6O4Vea+bVqCKje4ez9YVB9rnuGcz8ELe8ZHsuRkfMLNDZnbTfMMtIiIiUrigk3EVzMz+3cweneNrsb0RNsc5z37/DHA6cCGZ5GD/Z542vNfMDprZwRMnTiz1LYiIiKxrQSfjKpi7v2q+a2Z23Mxi7h43sxjQM8dtR4CtecdbgGPZso/nlfV54PZ52nADmWRi7N692+e6R0REROa2aoOMU7iNTN6NT2a/f3OOe+4HzjCzncBRMhuz/TLATICSve8NwKOBt1hEluzOO+8sdRNEZBnKNcj4JPBVM3sX8DzwJgAz2wTc6O7XuvuUmX0A+A4QBm5y98eyz/+ZmV1IZvjkMPBrRW6/iIjImleWQYa79wGvnOP8MeDavOM7gBctT3X3Xw20gSIiIrJ6J36KiIhIeVOQISIiIoFQkCEiIiKBUJAhIiIigVCQISIiIoEwd+WYWozsHixPlrodsio1A6lSN6IMrfXPrZze32praynaU6w6g6wniLLPcvfGQh8uyyWsJfKku+8udSNk9TGzG9z9vaVuR7lZ659bOb2/1dbWUrSnWHUGWU8QZZvZweU8r+ESkeX7VqkbUKbW+udWTu9vtbW1FO0pVp1B1rPa/jtquGSxzOygejJERGQ9We7vPvVkLN4NpW6AiIhIkS3rd596MkRERCQQ6skQERGRQGh1iUgJmFk98LfABHCnu3+5xE0qC2v9c1vr7y9I+uxWJ/VkyLplZlvN7Ptm9oSZPWZmv7GMsm4ysx4ze3SOa9eY2ZNm9rSZXZ89/UbgVnd/D/C6QustBTOrMbMfmtnD2c/tD5dR1qr93MwsbGYPmtntyyhj1b6/oJhZxMxuNbMfZ//fuqLActbdZ7cWKcgokJnVm9nfmdnnzeytpW6PFGQK+G13fwlwOfB+Mzsn/wYzazezxlnnds1R1peAa2afNLMw8Gng1cA5wFuydWwBXsjeNr3M91Fs48Ar3P0C4ELgGjO7PP+GNfK5/QbwxFwX1sj7C8qngG+7+9nABcz6DPXZlS8zO83MvmBmty72GQUZeeaLnBU1r03uHnf3H2VfD5L5x3DzrNteDnzTzGoAzOw9wF/NUdZ+oH+Oai4Fnnb3Z9x9ArgZeD1whMw/ilBm/x96xlD2sDL7NXsGeVl/bma2BXgNcOM8t5T1+wuKmTUB+4AvALj7hLsnZ92mz24VWcrvvexn/q6llK//ECf7ErMiZ0XN64OZ7QAuAu7LP+/utwDfBm7O9li9E/jFJRS9mZ/+nEDmH8LNwNeBnzezz7AKE+icSnYo4SGgB/iuu6+1z+0vgd8F0nNdXAPvLyinASeAL2aHmm7MzpXI0We36nyJxf/eWzJN/Mzj7vuzv2zy5aJmADObHTU/hIK1smZmDcDXgN9094HZ1939z7L/3T8DnJ73V/yiip/jnLv7MPCOghq8Crj7NHChmUWAb5jZue7+6Kx7yvJzM7PXAj3u/oCZXTXffeX6/gJWAVwMfNDd7zOzTwHXA7+ff5M+u9Vjib/3Hl9q+frleGqKmtcwM6skE2B82d2/Ps89ncC5wDeAjy6xiiPA1rzjLcCxApq6KmW7wu9k7rHzcv3c9gCvM7PDZLriX2Fm/zj7pjJ+f0E6AhzJ69m6lUzQcRJ9dqvenL/3zKzVzD4LXGRmH15MQQoyTm3eqNnd3+Hu79NSqfJkZkZm7PgJd/+Lee65CPg8mSj+HUCLmf3JEqq5HzjDzHaaWRXwZuC25bW8tMxsQ7YHAzOrBV4F/HjWPWX7ubn7h919i7vvyNb7PXf/lfx7yvn9Bcndu4EXzOys7KlXMuuvX312ZWG+33t97v7r7n66u39iMQUpyDg1Rc1r1x7gV8n8pfpQ9uvaWffUAW9y95+4exp4G/Dc7ILM7CvAPcBZZnbEzN4F4O5TwAeA75CZWPpVd38suLdUFDHg+2Z2iMw/+N9199nLPNf657bW399yfBD4cvbn40Lgf826rs9u9Vux33tKKz5Ldmzqdnc/N3tcAfwnmYj8KJl/VH9ZP9QiIrIWBPl7Tz0ZeeaKnBU1i4jIWhX07z31ZIiIiEgg1JMhIiIigVCQISIiIoFQkCEiIiKBUJAhIiIigVCQISIiIoFQkCEiIiKBUJAhIotiZtN5mVEfmtn+udQs43tmtj2vbd1mdjTvuGrWM2/P5gfIP9dmZifMrNrMbjazM4r7TkTWHuXJEJFFMbMhd29Y4TIrsol/llPGa4BXuftv5Z37GDDk7n8+zzNNwDPANncfyZ77deASd3+Xmb0c+BV3f89y2iay3qknQ0SWxcwOm9kfmtmPzOwRMzs7e77ezG4ys/vN7EEze332/NvN7BYz+xbwb2ZWZ2ZfNbNDZvbPZnafme02s3eZ2f/Nq+c9ZjbXRnZvBb65QPteZmZ3mdkDZvYdM4u5+wCwH7gu79Y3AzO9G13Aq7LplUWkQAoyRGSxamcNl/xS3rVed78Y+AzwO9lzHyGzg+klwH8B/reZ1WevXQG8zd1fAfw3IOHu5wN/DLwse8/NZLZcr8wevwP44hzt2gM8MFeDs8/+NfAL7v4y4Cbg49nLXyETWGBmm4Azge8DZDfuehq4YBGfi4jMQ1G6iCzWqLtfOM+1r2e/PwC8Mfv6Z8gECTNBRw2wLfv6u+7en329F/gUgLs/mt29E3cfNrPvAa81syeASnd/ZI66W9x9cJ52nQWcC3zXzADCQDx77Xbgb7NDJ78I3Oru03nP9gCbmCeAEZFTU5AhIithPPt9mp/+u2LAz7v7k/k3mtllwHD+qQXKvRH4n8CPmbsXA2DKzELZ3ofZDHjM3a+YfcHdR83s28AbyPRo/NasW2qA0QXaJiKnoOESEQnKd4APWrYLwcwumue+A2R6EjCzc4DzZi64+33AVuCX+el8idmeBE5b4NoGM7siW36lmb007/pXgA8BG4F7Zz17JqAdl0WWQUGGiCzW7DkZnzzF/X8MVAKHzOzR7PFc/pZMIHAI+B/AISCVd/2rwN3unpjn+f8HXDXXBXefAH4B+FMzexh4CLgy75Z/IzMk8s+et9TOzDaSGR6KIyIF0xJWESkpMwuTmW8xZmanA/8BnJkNEDCz24H/6+7/Mc/zMeDv3f3qFWzTbwED7v6FlSpTZD3SnAwRKbU64PvZlSAGvM/dJ8wsAvwQeHi+AAPA3eNm9nkza8ouTV0JSeAfVqgskXVLPRkiIiISCM3JEBERkUAoyBAREZFAKMgQERGRQCjIEBERkUAoyBAREZFAKMgQERGRQPz/dzzL1AG1KRwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "ax_sed, ax_residuals = analysis.flux_points.peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The flux points can be exported to a fits table following the format defined [here](https://gamma-astro-data-formats.readthedocs.io/en/latest/spectra/flux_points/index.html) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = path / \"flux-points.fits\"\n",
    "analysis.flux_points.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What's next\n",
    "\n",
    "You can look at the same analysis without the high level interface in [analysis_2](analysis_2.ipynb)\n",
    "\n",
    "You can see how to perform a 1D spectral analysis of the same data in [spectrum analysis](spectrum_analysis.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "1c827c2a9f9b4649b569a8e50bbe12f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "2c7991227b93482e83fd8c08e317c203": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e59f3bb2aab149e58e876cd9b4b53a8c",
        "IPY_MODEL_cd68eab4a3a148d5ad6b22738dda7556",
        "IPY_MODEL_606dbbc5c3e1422e875cb80c4e0c5a5b"
       ],
       "layout": "IPY_MODEL_3d9f13ab95ba443296219e55378ab937"
      }
     },
     "3d9f13ab95ba443296219e55378ab937": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "606dbbc5c3e1422e875cb80c4e0c5a5b": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_a721ba9ada1c42ba8a6d4293dac921b8",
       "msg_id": "",
       "outputs": []
      }
     },
     "a721ba9ada1c42ba8a6d4293dac921b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b255ad22fd28497aa8efc2a556af2cb3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "c23f202c1a934b1b9b438052ac0f5a79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "c59473f1907d4b9990690a27437bde2a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cd68eab4a3a148d5ad6b22738dda7556": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 1,
       "layout": "IPY_MODEL_c59473f1907d4b9990690a27437bde2a",
       "style": "IPY_MODEL_1c827c2a9f9b4649b569a8e50bbe12f2"
      }
     },
     "e59f3bb2aab149e58e876cd9b4b53a8c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e+00 TeV - 1.26e+00 TeV TeV",
        "1.26e+00 TeV - 1.58e+00 TeV TeV",
        "1.58e+00 TeV - 2.00e+00 TeV TeV",
        "2.00e+00 TeV - 2.51e+00 TeV TeV",
        "2.51e+00 TeV - 3.16e+00 TeV TeV",
        "3.16e+00 TeV - 3.98e+00 TeV TeV",
        "3.98e+00 TeV - 5.01e+00 TeV TeV",
        "5.01e+00 TeV - 6.31e+00 TeV TeV",
        "6.31e+00 TeV - 7.94e+00 TeV TeV",
        "7.94e+00 TeV - 1.00e+01 TeV TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_b255ad22fd28497aa8efc2a556af2cb3",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_c23f202c1a934b1b9b438052ac0f5a79"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
