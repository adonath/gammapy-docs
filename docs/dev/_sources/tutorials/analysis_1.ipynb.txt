{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/analysis_1.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[analysis_1.ipynb](../_static/notebooks/analysis_1.ipynb) |\n",
    "[analysis_1.py](../_static/notebooks/analysis_1.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First analysis with gammapy high level interface\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and intrument response functions (IRF).\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis using the high level interface. \n",
    "\n",
    "Gammapy analysis consists in two main steps. \n",
    "\n",
    "The first one is data reduction: user selected observations  are reduced to a geometry defined by the user. \n",
    "It can be 1D (spectrum from a given extraction region) or 3D (with a sky projection and an energy axis). \n",
    "The resulting reduced data and instrument response functions (IRF) are called datasets in Gammapy.\n",
    "\n",
    "The second step consists in setting a physical model on the datasets and fitting it to obtain relevant physical informations.\n",
    "\n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "This notebook uses the high level `Analysis` class to orchestrate data reduction. In its current state, `Analysis` supports the standard analysis cases of joint or stacked 3D and 1D analyses. It is instantiated with an `AnalysisConfig` object that gives access to analysis parameters either directly or via a YAML config file. \n",
    "\n",
    "To see what is happening under-the-hood and to get an idea of the internal API, a second notebook performs the same analysis without using the `Analysis` class. \n",
    "\n",
    "In summary, we have to:\n",
    "\n",
    "- Create an `~gammapy.analysis.AnalysisConfig` object and edit it to define the analysis configuration:\n",
    "    - Define what observations to use\n",
    "    - Define the geometry of the dataset (data and IRFs)\n",
    "    - Define the model we want to fit on the dataset.\n",
    "- Instantiate a `~gammapy.analysis.Analysis` from this configuration and run the different analysis steps\n",
    "    - Observation selection\n",
    "    - Data reduction\n",
    "    - Model fitting\n",
    "    - Estimating flux points\n",
    "\n",
    "Finally we will compare the results against a reference model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:01.577909Z",
     "iopub.status.busy": "2020-11-04T00:29:01.577356Z",
     "iopub.status.idle": "2020-11-04T00:29:01.843281Z",
     "shell.execute_reply": "2020-11-04T00:29:01.842293Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:01.848609Z",
     "iopub.status.busy": "2020-11-04T00:29:01.847191Z",
     "iopub.status.idle": "2020-11-04T00:29:02.775072Z",
     "shell.execute_reply": "2020-11-04T00:29:02.773862Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from gammapy.analysis import Analysis, AnalysisConfig\n",
    "from gammapy.modeling.models import create_crab_spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis configuration\n",
    "\n",
    "For configuration of the analysis we use the [YAML](https://en.wikipedia.org/wiki/YAML) data format. YAML is a machine readable serialisation format, that is also friendly for humans to read. In this tutorial we will write the configuration file just using Python strings, but of course the file can be created and modified with any text editor of your choice.\n",
    "\n",
    "Here is what the configuration for our analysis looks like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.786041Z",
     "iopub.status.busy": "2020-11-04T00:29:02.784871Z",
     "iopub.status.idle": "2020-11-04T00:29:02.787735Z",
     "shell.execute_reply": "2020-11-04T00:29:02.788201Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnalysisConfig\n",
      "\n",
      "    general:\n",
      "        log: {level: info, filename: null, filemode: null, format: null, datefmt: null}\n",
      "        outdir: .\n",
      "    observations:\n",
      "        datastore: $GAMMAPY_DATA/hess-dl3-dr1\n",
      "        obs_ids: []\n",
      "        obs_file: null\n",
      "        obs_cone: {frame: null, lon: null, lat: null, radius: null}\n",
      "        obs_time: {start: null, stop: null}\n",
      "    datasets:\n",
      "        type: 1d\n",
      "        stack: true\n",
      "        geom:\n",
      "            wcs:\n",
      "                skydir: {frame: null, lon: null, lat: null}\n",
      "                binsize: 0.02 deg\n",
      "                fov: {width: 5.0 deg, height: 5.0 deg}\n",
      "                binsize_irf: 0.2 deg\n",
      "            selection: {offset_max: 2.5 deg}\n",
      "            axes:\n",
      "                energy: {min: 0.1 TeV, max: 10.0 TeV, nbins: 30}\n",
      "                energy_true: {min: 0.1 TeV, max: 10.0 TeV, nbins: 30}\n",
      "        map_selection: [counts, exposure, background, psf, edisp]\n",
      "        background:\n",
      "            method: null\n",
      "            exclusion: null\n",
      "            parameters: {}\n",
      "        safe_mask:\n",
      "            methods: [aeff-default]\n",
      "            parameters: {}\n",
      "        on_region: {frame: null, lon: null, lat: null, radius: null}\n",
      "        containment_correction: true\n",
      "    fit:\n",
      "        fit_range: {min: 0.1 TeV, max: 10.0 TeV}\n",
      "    flux_points:\n",
      "        energy: {min: 0.1 TeV, max: 10.0 TeV, nbins: 30}\n",
      "        source: source\n",
      "        parameters: {}\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "config = AnalysisConfig()\n",
    "# the AnalysisConfig gives access to the various parameters used from logging to reduced dataset geometries\n",
    "print(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the data to use"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to use Crab runs from the H.E.S.S. DL3-DR1. We define here the datastore and a cone search of observations pointing with 5 degrees of the Crab nebula.\n",
    "Parameters can be set directly or as a python dict."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.793201Z",
     "iopub.status.busy": "2020-11-04T00:29:02.792071Z",
     "iopub.status.idle": "2020-11-04T00:29:02.793772Z",
     "shell.execute_reply": "2020-11-04T00:29:02.794239Z"
    }
   },
   "outputs": [],
   "source": [
    "# We define the datastore containing the data\n",
    "config.observations.datastore = \"$GAMMAPY_DATA/hess-dl3-dr1\"\n",
    "\n",
    "# We define the cone search parameters\n",
    "config.observations.obs_cone.frame = \"icrs\"\n",
    "config.observations.obs_cone.lon = \"83.633 deg\"\n",
    "config.observations.obs_cone.lat = \"22.014 deg\"\n",
    "config.observations.obs_cone.radius = \"5 deg\"\n",
    "\n",
    "# Equivalently we could have set parameters with a python dict\n",
    "# config.observations.obs_cone = {\"frame\": \"icrs\", \"lon\": \"83.633 deg\", \"lat\": \"22.014 deg\", \"radius\": \"5 deg\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the reduced datasets geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.801031Z",
     "iopub.status.busy": "2020-11-04T00:29:02.799893Z",
     "iopub.status.idle": "2020-11-04T00:29:02.801585Z",
     "shell.execute_reply": "2020-11-04T00:29:02.802068Z"
    }
   },
   "outputs": [],
   "source": [
    "# We want to perform a 3D analysis\n",
    "config.datasets.type = \"3d\"\n",
    "# We want to stack the data into a single reduced dataset\n",
    "config.datasets.stack = True\n",
    "\n",
    "# We fix the WCS geometry of the datasets\n",
    "config.datasets.geom.wcs.skydir = {\n",
    "    \"lon\": \"83.633 deg\",\n",
    "    \"lat\": \"22.014 deg\",\n",
    "    \"frame\": \"icrs\",\n",
    "}\n",
    "config.datasets.geom.wcs.fov = {\"width\": \"2 deg\", \"height\": \"2 deg\"}\n",
    "config.datasets.geom.wcs.binsize = \"0.02 deg\"\n",
    "\n",
    "# We now fix the energy axis for the counts map\n",
    "config.datasets.geom.axes.energy.min = \"1 TeV\"\n",
    "config.datasets.geom.axes.energy.max = \"10 TeV\"\n",
    "config.datasets.geom.axes.energy.nbins = 4\n",
    "\n",
    "# We now fix the energy axis for the IRF maps (exposure, etc)\n",
    "config.datasets.geom.axes.energy_true.min = \"0.5 TeV\"\n",
    "config.datasets.geom.axes.energy_true.max = \"20 TeV\"\n",
    "config.datasets.geom.axes.energy.nbins = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting the background normalization maker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.805779Z",
     "iopub.status.busy": "2020-11-04T00:29:02.804946Z",
     "iopub.status.idle": "2020-11-04T00:29:02.806518Z",
     "shell.execute_reply": "2020-11-04T00:29:02.807006Z"
    }
   },
   "outputs": [],
   "source": [
    "config.datasets.background.method = \"fov_background\"\n",
    "config.datasets.background.parameters = {\"method\": \"scale\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting modeling and fitting parameters\n",
    "`Analysis` can perform a few modeling and fitting tasks besides data reduction. Parameters have then to be passed to the configuration object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.811918Z",
     "iopub.status.busy": "2020-11-04T00:29:02.810757Z",
     "iopub.status.idle": "2020-11-04T00:29:02.812463Z",
     "shell.execute_reply": "2020-11-04T00:29:02.812917Z"
    }
   },
   "outputs": [],
   "source": [
    "config.fit.fit_range.min = 1 * u.TeV\n",
    "config.fit.fit_range.max = 10 * u.TeV\n",
    "config.flux_points.energy = {\"min\": \"1 TeV\", \"max\": \"10 TeV\", \"nbins\": 3}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We're all set. \n",
    "But before we go on let's see how to save or import `AnalysisConfig` objects though YAML files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using YAML configuration files\n",
    "\n",
    "One can export/import the `AnalysisConfig` to/from a YAML file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.816016Z",
     "iopub.status.busy": "2020-11-04T00:29:02.815565Z",
     "iopub.status.idle": "2020-11-04T00:29:02.823032Z",
     "shell.execute_reply": "2020-11-04T00:29:02.822583Z"
    }
   },
   "outputs": [],
   "source": [
    "config.write(\"config.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.825900Z",
     "iopub.status.busy": "2020-11-04T00:29:02.825438Z",
     "iopub.status.idle": "2020-11-04T00:29:02.843069Z",
     "shell.execute_reply": "2020-11-04T00:29:02.842633Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnalysisConfig\n",
      "\n",
      "    general:\n",
      "        log: {level: info, filename: null, filemode: null, format: null, datefmt: null}\n",
      "        outdir: .\n",
      "    observations:\n",
      "        datastore: $GAMMAPY_DATA/hess-dl3-dr1\n",
      "        obs_ids: []\n",
      "        obs_file: null\n",
      "        obs_cone: {frame: icrs, lon: 83.633 deg, lat: 22.014 deg, radius: 5.0 deg}\n",
      "        obs_time: {start: null, stop: null}\n",
      "    datasets:\n",
      "        type: 3d\n",
      "        stack: true\n",
      "        geom:\n",
      "            wcs:\n",
      "                skydir: {frame: icrs, lon: 83.633 deg, lat: 22.014 deg}\n",
      "                binsize: 0.02 deg\n",
      "                fov: {width: 2.0 deg, height: 2.0 deg}\n",
      "                binsize_irf: 0.2 deg\n",
      "            selection: {offset_max: 2.5 deg}\n",
      "            axes:\n",
      "                energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 10}\n",
      "                energy_true: {min: 0.5 TeV, max: 20.0 TeV, nbins: 30}\n",
      "        map_selection: [counts, exposure, background, psf, edisp]\n",
      "        background:\n",
      "            method: fov_background\n",
      "            exclusion: null\n",
      "            parameters: {method: scale}\n",
      "        safe_mask:\n",
      "            methods: [aeff-default]\n",
      "            parameters: {}\n",
      "        on_region: {frame: null, lon: null, lat: null, radius: null}\n",
      "        containment_correction: true\n",
      "    fit:\n",
      "        fit_range: {min: 1.0 TeV, max: 10.0 TeV}\n",
      "    flux_points:\n",
      "        energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 3}\n",
      "        source: source\n",
      "        parameters: {}\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "config = AnalysisConfig.read(\"config.yaml\")\n",
    "print(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running the analysis\n",
    "\n",
    "We first create an `~gammapy.analysis.Analysis` object from our configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.847334Z",
     "iopub.status.busy": "2020-11-04T00:29:02.846626Z",
     "iopub.status.idle": "2020-11-04T00:29:02.848972Z",
     "shell.execute_reply": "2020-11-04T00:29:02.849465Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting logging config: {'level': 'INFO', 'filename': None, 'filemode': None, 'format': None, 'datefmt': None}\n"
     ]
    }
   ],
   "source": [
    "analysis = Analysis(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Observation selection\n",
    "\n",
    "We can directly select and load the observations from disk using `~gammapy.analysis.Analysis.get_observations()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:02.853090Z",
     "iopub.status.busy": "2020-11-04T00:29:02.852578Z",
     "iopub.status.idle": "2020-11-04T00:29:03.051408Z",
     "shell.execute_reply": "2020-11-04T00:29:03.050799Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fetching observations.\n",
      "Number of selected observations: 4\n"
     ]
    }
   ],
   "source": [
    "analysis.get_observations()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The observations are now available on the `Analysis` object. The selection corresponds to the following ids:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:03.057027Z",
     "iopub.status.busy": "2020-11-04T00:29:03.056506Z",
     "iopub.status.idle": "2020-11-04T00:29:03.059469Z",
     "shell.execute_reply": "2020-11-04T00:29:03.059959Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['23592', '23523', '23526', '23559']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analysis.observations.ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see how to explore observations, please refer to the following notebook: [CTA with Gammapy](cta.ipynb) or  [HESS with Gammapy](hess.ipynb) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "Now we proceed to the data reduction. In the config file we have chosen a WCS map geometry, energy axis and decided to stack the maps. We can run the reduction using `.get_datasets()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:03.063943Z",
     "iopub.status.busy": "2020-11-04T00:29:03.063284Z",
     "iopub.status.idle": "2020-11-04T00:29:06.484952Z",
     "shell.execute_reply": "2020-11-04T00:29:06.485342Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Creating geometry.\n",
      "Creating datasets.\n",
      "Processing observation 23592\n",
      "Processing observation 23523\n",
      "Processing observation 23526\n",
      "Processing observation 23559\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.25 s, sys: 177 ms, total: 3.42 s\n",
      "Wall time: 3.42 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "analysis.get_datasets()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we have chosen to stack the data, there is finally one dataset contained which we can print:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:06.490308Z",
     "iopub.status.busy": "2020-11-04T00:29:06.489292Z",
     "iopub.status.idle": "2020-11-04T00:29:06.499225Z",
     "shell.execute_reply": "2020-11-04T00:29:06.498733Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : stacked \n",
      "\n",
      "  Total counts                    : 2486 \n",
      "  Total background counts         : 2486.00\n",
      "  Total excess counts             : 0.00\n",
      "\n",
      "  Predicted counts                : 2486.00\n",
      "  Predicted background counts     : 2486.00\n",
      "  Predicted excess counts         : nan\n",
      "\n",
      "  Exposure min                    : 2.38e+08 m2 s\n",
      "  Exposure max                    : 3.53e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 100000 \n",
      "  Number of fit bins              : 100000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : nan\n",
      "\n",
      "  Number of models                : 0 \n",
      "  Number of parameters            : 0\n",
      "  Number of free parameters       : 0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.datasets[\"stacked\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see the dataset comes with a predefined background model out of the data reduction, but no source model has been set yet.\n",
    "\n",
    "The counts, exposure and background model maps are directly available on the dataset and can be printed and plotted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:06.503142Z",
     "iopub.status.busy": "2020-11-04T00:29:06.502362Z",
     "iopub.status.idle": "2020-11-04T00:29:06.995214Z",
     "shell.execute_reply": "2020-11-04T00:29:06.995907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "213ebb645d9849e99dfeff7ff6828a90",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts = analysis.datasets[\"stacked\"].counts\n",
    "counts.smooth(\"0.05 deg\").plot_interactive()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:07.002703Z",
     "iopub.status.busy": "2020-11-04T00:29:07.001726Z",
     "iopub.status.idle": "2020-11-04T00:29:07.005824Z",
     "shell.execute_reply": "2020-11-04T00:29:07.006550Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"analysis_1\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:07.009708Z",
     "iopub.status.busy": "2020-11-04T00:29:07.008680Z",
     "iopub.status.idle": "2020-11-04T00:29:07.366551Z",
     "shell.execute_reply": "2020-11-04T00:29:07.365811Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "analysis.datasets[0].write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model fitting\n",
    "\n",
    "Now we define a model to be fitted to the dataset. Here we use its YAML definition to load it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:07.371955Z",
     "iopub.status.busy": "2020-11-04T00:29:07.371443Z",
     "iopub.status.idle": "2020-11-04T00:29:07.374764Z",
     "shell.execute_reply": "2020-11-04T00:29:07.374327Z"
    }
   },
   "outputs": [],
   "source": [
    "model_config = \"\"\"\n",
    "components:\n",
    "- name: crab\n",
    "  type: SkyModel\n",
    "  spatial:\n",
    "    type: PointSpatialModel\n",
    "    frame: icrs\n",
    "    parameters:\n",
    "    - name: lon_0\n",
    "      value: 83.63\n",
    "      unit: deg\n",
    "    - name: lat_0 \n",
    "      value: 22.14    \n",
    "      unit: deg\n",
    "  spectral:\n",
    "    type: PowerLawSpectralModel\n",
    "    parameters:\n",
    "    - name: amplitude      \n",
    "      value: 1.0e-12\n",
    "      unit: cm-2 s-1 TeV-1\n",
    "    - name: index\n",
    "      value: 2.0\n",
    "      unit: ''\n",
    "    - name: reference\n",
    "      value: 1.0\n",
    "      unit: TeV\n",
    "      frozen: true\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we set the model on the analysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:07.378247Z",
     "iopub.status.busy": "2020-11-04T00:29:07.377776Z",
     "iopub.status.idle": "2020-11-04T00:29:07.831000Z",
     "shell.execute_reply": "2020-11-04T00:29:07.830522Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading model.\n",
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : crab\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : PointSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   2.000              \n",
      "    amplitude               :   1.00e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "    lon_0                   :  83.630  deg         \n",
      "    lat_0                   :  22.140  deg         \n",
      "\n",
      "Component 1: FoVBackgroundModel\n",
      "\n",
      "  Name                      : stacked-bkg\n",
      "  Datasets names            : ['stacked']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "analysis.set_models(model_config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we run the fit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:07.834837Z",
     "iopub.status.busy": "2020-11-04T00:29:07.834257Z",
     "iopub.status.idle": "2020-11-04T00:29:17.088560Z",
     "shell.execute_reply": "2020-11-04T00:29:17.087399Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fitting datasets.\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 275\n",
      "\ttotal stat : 20002.09\n",
      "\n"
     ]
    }
   ],
   "source": [
    "analysis.run_fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:17.092535Z",
     "iopub.status.busy": "2020-11-04T00:29:17.091994Z",
     "iopub.status.idle": "2020-11-04T00:29:17.095644Z",
     "shell.execute_reply": "2020-11-04T00:29:17.095202Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 275\n",
      "\ttotal stat : 20002.09\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.fit_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is how we can write the model back to file again:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:17.120129Z",
     "iopub.status.busy": "2020-11-04T00:29:17.119639Z",
     "iopub.status.idle": "2020-11-04T00:29:17.126309Z",
     "shell.execute_reply": "2020-11-04T00:29:17.125892Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"model-best-fit.yaml\"\n",
    "analysis.models.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:17.129575Z",
     "iopub.status.busy": "2020-11-04T00:29:17.128865Z",
     "iopub.status.idle": "2020-11-04T00:29:17.280008Z",
     "shell.execute_reply": "2020-11-04T00:29:17.279084Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\r\n",
      "-   name: crab\r\n",
      "    type: SkyModel\r\n",
      "    spectral:\r\n",
      "        type: PowerLawSpectralModel\r\n",
      "        parameters:\r\n",
      "        -   name: index\r\n",
      "            value: 2.5579664145972987\r\n",
      "            error: 0.10308941676773548\r\n",
      "        -   name: amplitude\r\n",
      "            value: 4.559996799672373e-11\r\n",
      "            unit: cm-2 s-1 TeV-1\r\n",
      "            error: 3.749242123698388e-12\r\n",
      "        -   name: reference\r\n",
      "            value: 1.0\r\n",
      "            unit: TeV\r\n",
      "            frozen: true\r\n",
      "    spatial:\r\n",
      "        type: PointSpatialModel\r\n",
      "        frame: icrs\r\n",
      "        parameters:\r\n",
      "        -   name: lon_0\r\n",
      "            value: 83.6197965081426\r\n",
      "            unit: deg\r\n",
      "            error: 0.0031478861039212127\r\n",
      "        -   name: lat_0\r\n",
      "            value: 22.024555863194326\r\n",
      "            unit: deg\r\n",
      "            error: 0.0029679833575128665\r\n",
      "-   type: FoVBackgroundModel\r\n",
      "    datasets_names:\r\n",
      "    - stacked\r\n",
      "    spectral:\r\n",
      "        type: PowerLawNormSpectralModel\r\n",
      "        parameters:\r\n",
      "        -   name: norm\r\n",
      "            value: 0.7934094724722587\r\n",
      "            error: 0.018864551919295074\r\n",
      "        -   name: tilt\r\n",
      "            value: 0.0\r\n",
      "            frozen: true\r\n",
      "        -   name: reference\r\n",
      "            value: 1.0\r\n",
      "            unit: TeV\r\n",
      "            frozen: true\r\n",
      "covariance: model-best-fit_covariance.dat\r\n"
     ]
    }
   ],
   "source": [
    "!cat analysis_1/model-best-fit.yaml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flux points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:17.285683Z",
     "iopub.status.busy": "2020-11-04T00:29:17.285181Z",
     "iopub.status.idle": "2020-11-04T00:29:20.907587Z",
     "shell.execute_reply": "2020-11-04T00:29:20.908276Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating flux points.\n",
      "/usr/share/miniconda/envs/gammapy-dev/lib/python3.7/site-packages/astropy/units/quantity.py:377: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
      "  subok=False, ndmin=ndmin)\n",
      "\n",
      "      e_ref               ref_flux        ...        dnde_err        is_ul\n",
      "       TeV              1 / (cm2 s)       ...    1 / (cm2 s TeV)          \n",
      "------------------ ---------------------- ... ---------------------- -----\n",
      "1.4125375446227544 1.9291522875110525e-11 ...   1.29600184916894e-12 False\n",
      "3.1622776601683795  7.601470367729331e-12 ... 2.1939465698984523e-13 False\n",
      "  7.07945784384138 1.5659937413963028e-12 ...  5.874257363757694e-14 False\n"
     ]
    }
   ],
   "source": [
    "analysis.config.flux_points.source = \"crab\"\n",
    "analysis.get_flux_points()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:20.934650Z",
     "iopub.status.busy": "2020-11-04T00:29:20.931935Z",
     "iopub.status.idle": "2020-11-04T00:29:21.506979Z",
     "shell.execute_reply": "2020-11-04T00:29:21.506454Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:668: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/estimators/flux_point.py:669: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:415: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy/modeling/models/spectral.py:416: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0.41253754, 1.16701535, 2.06758551]), array([0.58272477, 1.84959468, 2.92054216]))\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "ax_sed, ax_residuals = analysis.flux_points.peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The flux points can be exported to a fits table following the format defined [here](https://gamma-astro-data-formats.readthedocs.io/en/latest/spectra/flux_points/index.html) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-11-04T00:29:21.514126Z",
     "iopub.status.busy": "2020-11-04T00:29:21.513645Z",
     "iopub.status.idle": "2020-11-04T00:29:21.560928Z",
     "shell.execute_reply": "2020-11-04T00:29:21.560225Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"flux-points.fits\"\n",
    "analysis.flux_points.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What's next\n",
    "\n",
    "You can look at the same analysis without the high level interface in [analysis_2](analysis_2.ipynb)\n",
    "\n",
    "You can see how to perform a 1D spectral analysis of the same data in [spectrum analysis](spectrum_analysis.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "086b21f9511f4f2199d3dc3af5be165e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "0aeb73c631f34a2c9c08cdebf1c07b44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e+00 TeV - 1.26e+00 TeV TeV",
        "1.26e+00 TeV - 1.58e+00 TeV TeV",
        "1.58e+00 TeV - 2.00e+00 TeV TeV",
        "2.00e+00 TeV - 2.51e+00 TeV TeV",
        "2.51e+00 TeV - 3.16e+00 TeV TeV",
        "3.16e+00 TeV - 3.98e+00 TeV TeV",
        "3.98e+00 TeV - 5.01e+00 TeV TeV",
        "5.01e+00 TeV - 6.31e+00 TeV TeV",
        "6.31e+00 TeV - 7.94e+00 TeV TeV",
        "7.94e+00 TeV - 1.00e+01 TeV TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_086b21f9511f4f2199d3dc3af5be165e",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_b7caeaa34b504873b46b666f585f4451"
      }
     },
     "1c3b121d76ae4098acf3299133dc860a": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_f50212ee417242f8a04d23e2480584f2",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 1 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "213ebb645d9849e99dfeff7ff6828a90": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0aeb73c631f34a2c9c08cdebf1c07b44",
        "IPY_MODEL_46e0e68216cd4e9fb029deb98203d7aa",
        "IPY_MODEL_1c3b121d76ae4098acf3299133dc860a"
       ],
       "layout": "IPY_MODEL_37de85bf8f624ee0a6c5608eed96c67b"
      }
     },
     "37de85bf8f624ee0a6c5608eed96c67b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "46e0e68216cd4e9fb029deb98203d7aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 1,
       "layout": "IPY_MODEL_87d05ba6a556407d82b272530654d9dd",
       "style": "IPY_MODEL_8a9ba00df7a2477b987721cd71c8c427"
      }
     },
     "87d05ba6a556407d82b272530654d9dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a9ba00df7a2477b987721cd71c8c427": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "b7caeaa34b504873b46b666f585f4451": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "f50212ee417242f8a04d23e2480584f2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
