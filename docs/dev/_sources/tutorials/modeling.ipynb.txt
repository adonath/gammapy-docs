{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/modeling.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[modeling.ipynb](../_static/notebooks/modeling.ipynb) |\n",
    "[modeling.py](../_static/notebooks/modeling.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling and fitting\n",
    "\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of spectral analysis to produce 1D On-Off datasets, [see the following tutorial](spectrum_analysis.ipynb)\n",
    "- Reading of pre-computed datasets [see the MWL tutorial](analysis_mwl.ipynb)\n",
    "- General knowledge on statistics and optimization methods\n",
    "\n",
    "## Proposed approach\n",
    "\n",
    "This is a hands-on tutorial to `~gammapy.modeling`, showing how the model, dataset and fit classes work together. As an example we are going to work with HESS data of the Crab Nebula and show in particular how to :\n",
    "- perform a spectral analysis\n",
    "- use different fitting backends\n",
    "- access covariance matrix information and parameter errors\n",
    "- compute likelihood profile\n",
    "- compute confidence contours\n",
    "\n",
    "See also: [Models gallery tutorial](models.ipynb) and `docs/modeling/index.rst`.\n",
    "\n",
    "\n",
    "## The setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:05.750786Z",
     "iopub.status.busy": "2021-01-23T10:00:05.749973Z",
     "iopub.status.idle": "2021-01-23T10:00:07.035928Z",
     "shell.execute_reply": "2021-01-23T10:00:07.036496Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from astropy import units as u\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as st\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.datasets import Datasets, SpectrumDatasetOnOff\n",
    "from gammapy.modeling.models import LogParabolaSpectralModel, SkyModel\n",
    "from gammapy.visualization.utils import plot_contour_line\n",
    "from itertools import combinations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model and dataset\n",
    "\n",
    "First we define the source model, here we need only a spectral model for which we choose a log-parabola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:07.045035Z",
     "iopub.status.busy": "2021-01-23T10:00:07.043902Z",
     "iopub.status.idle": "2021-01-23T10:00:07.046715Z",
     "shell.execute_reply": "2021-01-23T10:00:07.047268Z"
    }
   },
   "outputs": [],
   "source": [
    "crab_spectrum = LogParabolaSpectralModel(\n",
    "    amplitude=1e-11 / u.cm ** 2 / u.s / u.TeV,\n",
    "    reference=1 * u.TeV,\n",
    "    alpha=2.3,\n",
    "    beta=0.2,\n",
    ")\n",
    "\n",
    "crab_spectrum.alpha.max = 3\n",
    "crab_spectrum.alpha.min = 1\n",
    "crab_model = SkyModel(spectral_model=crab_spectrum, name=\"crab\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data and background are read from pre-computed ON/OFF datasets of HESS observations, for simplicity we stack them together.\n",
    "Then we set the model and fit range to the resulting dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:07.051957Z",
     "iopub.status.busy": "2021-01-23T10:00:07.051442Z",
     "iopub.status.idle": "2021-01-23T10:00:07.297236Z",
     "shell.execute_reply": "2021-01-23T10:00:07.297722Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets = []\n",
    "for obs_id in [23523, 23526]:\n",
    "    dataset = SpectrumDatasetOnOff.read(\n",
    "        f\"$GAMMAPY_DATA/joint-crab/spectra/hess/pha_obs{obs_id}.fits\"\n",
    "    )\n",
    "    datasets.append(dataset)\n",
    "\n",
    "dataset_hess = Datasets(datasets).stack_reduce(name=\"HESS\")\n",
    "\n",
    "# Set model and fit range\n",
    "dataset_hess.models = crab_model\n",
    "e_min = 0.66 * u.TeV\n",
    "e_max = 30 * u.TeV\n",
    "dataset_hess.mask_fit = dataset_hess.counts.geom.energy_mask(e_min, e_max)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting options\n",
    "\n",
    "\n",
    "\n",
    "First let's create a `Fit` instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:07.301523Z",
     "iopub.status.busy": "2021-01-23T10:00:07.300644Z",
     "iopub.status.idle": "2021-01-23T10:00:07.302616Z",
     "shell.execute_reply": "2021-01-23T10:00:07.303101Z"
    }
   },
   "outputs": [],
   "source": [
    "fit = Fit([dataset_hess], store_trace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the fit is performed using MINUIT, you can select alternative optimizers and set their option using the `optimize_opts` argument of the `Fit.run()` method. In addition we have specified to store the trace of parameter values of the fit.\n",
    "\n",
    "Note that, for now, covaraince matrix and errors are computed only for the fitting with MINUIT. However depending on the problem other optimizers can better perform, so somethimes it can be usefull to run a pre-fit with alternative optimization methods.\n",
    "\n",
    "For the \"scipy\" backend the available options are desribed in detail here:  \n",
    "https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:07.315881Z",
     "iopub.status.busy": "2021-01-23T10:00:07.310354Z",
     "iopub.status.idle": "2021-01-23T10:00:07.478590Z",
     "shell.execute_reply": "2021-01-23T10:00:07.479071Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No covariance estimate - not supported by this backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 167 ms, sys: 2.7 ms, total: 170 ms\n",
      "Wall time: 170 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "scipy_opts = {\"method\": \"L-BFGS-B\", \"options\": {\"ftol\": 1e-4, \"gtol\": 1e-05}}\n",
    "result_scipy = fit.run(backend=\"scipy\", optimize_opts=scipy_opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the \"sherpa\" backend you can choose the optimization algorithm between method = {\"simplex\",  \"levmar\", \"moncar\", \"gridsearch\"}.  \n",
    "Those methods are described and compared in detail on http://cxc.cfa.harvard.edu/sherpa/methods/index.html.  \n",
    "The available options of the optimization methods are described on the following page https://cxc.cfa.harvard.edu/sherpa/methods/opt_methods.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:07.483483Z",
     "iopub.status.busy": "2021-01-23T10:00:07.482954Z",
     "iopub.status.idle": "2021-01-23T10:00:07.876469Z",
     "shell.execute_reply": "2021-01-23T10:00:07.876952Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No covariance estimate - not supported by this backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 380 ms, sys: 5.96 ms, total: 386 ms\n",
      "Wall time: 392 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sherpa_opts = {\"method\": \"simplex\", \"ftol\": 1e-3, \"maxfev\": int(1e4)}\n",
    "results_simplex = fit.run(backend=\"sherpa\", optimize_opts=sherpa_opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the \"minuit\" backend see https://iminuit.readthedocs.io/en/latest/reference.html for a detailed description of the available options. If there is an entry ‘migrad_opts’, those options will be passed to [iminuit.Minuit.migrad](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.migrad). Additionnaly you can set the fit tolerance using the [tol](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.tol\n",
    ") option. The minimization will stop when the estimated distance to the minimum is less than 0.001*tol (by default tol=0.1). The [strategy](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.strategy) option change the speed and accuracy of the optimizer: 0 fast, 1 default, 2 slow but accurate. If you want more reliable error estimates, you should run the final fit with strategy 2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:07.881261Z",
     "iopub.status.busy": "2021-01-23T10:00:07.880605Z",
     "iopub.status.idle": "2021-01-23T10:00:08.012150Z",
     "shell.execute_reply": "2021-01-23T10:00:08.012653Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 125 ms, sys: 3.07 ms, total: 128 ms\n",
      "Wall time: 129 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "minuit_opts = {\"tol\": 0.001, \"strategy\": 1}\n",
    "result_minuit = fit.run(backend=\"minuit\", optimize_opts=minuit_opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit quality assessment\n",
    "\n",
    "There are various ways to check the convergence and quality of a fit. Among them:\n",
    "\n",
    "- Refer to the automatically-generated results dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.016140Z",
     "iopub.status.busy": "2021-01-23T10:00:08.015412Z",
     "iopub.status.idle": "2021-01-23T10:00:08.017598Z",
     "shell.execute_reply": "2021-01-23T10:00:08.018162Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : scipy\n",
      "\tmethod     : L-BFGS-B\n",
      "\tsuccess    : True\n",
      "\tmessage    : b'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
      "\tnfev       : 60\n",
      "\ttotal stat : 30.35\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_scipy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.023777Z",
     "iopub.status.busy": "2021-01-23T10:00:08.022722Z",
     "iopub.status.idle": "2021-01-23T10:00:08.025118Z",
     "shell.execute_reply": "2021-01-23T10:00:08.025640Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : sherpa\n",
      "\tmethod     : simplex\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully\n",
      "\tnfev       : 135\n",
      "\ttotal stat : 30.35\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(results_simplex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.029557Z",
     "iopub.status.busy": "2021-01-23T10:00:08.028907Z",
     "iopub.status.idle": "2021-01-23T10:00:08.031481Z",
     "shell.execute_reply": "2021-01-23T10:00:08.032201Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 39\n",
      "\ttotal stat : 30.35\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_minuit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Check the trace of the fit e.g. in case the fit did not converge properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.041928Z",
     "iopub.status.busy": "2021-01-23T10:00:08.041228Z",
     "iopub.status.idle": "2021-01-23T10:00:08.044311Z",
     "shell.execute_reply": "2021-01-23T10:00:08.044883Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=39</i>\n",
       "<table id=\"table140375699931264\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>total_stat</th><th>crab.spectral.amplitude</th><th>crab.spectral.alpha</th><th>crab.spectral.beta</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>30.349530550403536</td><td>3.8122425720236154e-11</td><td>2.195746929445284</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.35103416856537</td><td>3.822242572023615e-11</td><td>2.195746929445284</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.351002202421665</td><td>3.8022425720236156e-11</td><td>2.195746929445284</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.34954726245639</td><td>3.813242572023615e-11</td><td>2.195746929445284</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.349543590966864</td><td>3.811242572023615e-11</td><td>2.195746929445284</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.370145291844615</td><td>3.8122425720236154e-11</td><td>2.208005445424033</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.370743217774983</td><td>3.8122425720236154e-11</td><td>2.1834577485719002</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.34973251117163</td><td>3.8122425720236154e-11</td><td>2.1969741926881277</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.34974685261824</td><td>3.8122425720236154e-11</td><td>2.1945193595495307</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>30.34953671093625</td><td>3.8122425720236154e-11</td><td>2.195978966682527</td><td>0.2264827199398031</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>30.34953807797605</td><td>3.812216984342867e-11</td><td>2.1957553867432162</td><td>0.226351418569319</td></tr>\n",
       "<tr><td>30.34953077469283</td><td>3.81235874900304e-11</td><td>2.1957553867432162</td><td>0.2264888281893144</td></tr>\n",
       "<tr><td>30.34953075809718</td><td>3.8120752196826936e-11</td><td>2.1957553867432162</td><td>0.2264888281893144</td></tr>\n",
       "<tr><td>30.34953080750529</td><td>3.812216984342867e-11</td><td>2.1958017949938027</td><td>0.2264888281893144</td></tr>\n",
       "<tr><td>30.349530725243227</td><td>3.812216984342867e-11</td><td>2.1957089780542227</td><td>0.2264888281893144</td></tr>\n",
       "<tr><td>30.34953073944621</td><td>3.812216984342867e-11</td><td>2.1957553867432162</td><td>0.22651631011331347</td></tr>\n",
       "<tr><td>30.34953079329282</td><td>3.812216984342867e-11</td><td>2.1957553867432162</td><td>0.22646134626531533</td></tr>\n",
       "<tr><td>30.34953581503027</td><td>3.812925807643733e-11</td><td>2.1959874236099974</td><td>0.2264888281893144</td></tr>\n",
       "<tr><td>30.34953715881891</td><td>3.812925807643733e-11</td><td>2.1957553867432162</td><td>0.2266262378093098</td></tr>\n",
       "<tr><td>30.34955936680425</td><td>3.812216984342867e-11</td><td>2.1959874236099974</td><td>0.2266262378093098</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=39>\n",
       "    total_stat     crab.spectral.amplitude ...  crab.spectral.beta\n",
       "     float64               float64         ...       float64      \n",
       "------------------ ----------------------- ... -------------------\n",
       "30.349530550403536  3.8122425720236154e-11 ...  0.2264827199398031\n",
       " 30.35103416856537   3.822242572023615e-11 ...  0.2264827199398031\n",
       "30.351002202421665  3.8022425720236156e-11 ...  0.2264827199398031\n",
       " 30.34954726245639   3.813242572023615e-11 ...  0.2264827199398031\n",
       "30.349543590966864   3.811242572023615e-11 ...  0.2264827199398031\n",
       "30.370145291844615  3.8122425720236154e-11 ...  0.2264827199398031\n",
       "30.370743217774983  3.8122425720236154e-11 ...  0.2264827199398031\n",
       " 30.34973251117163  3.8122425720236154e-11 ...  0.2264827199398031\n",
       " 30.34974685261824  3.8122425720236154e-11 ...  0.2264827199398031\n",
       " 30.34953671093625  3.8122425720236154e-11 ...  0.2264827199398031\n",
       "               ...                     ... ...                 ...\n",
       " 30.34953807797605   3.812216984342867e-11 ...   0.226351418569319\n",
       " 30.34953077469283    3.81235874900304e-11 ...  0.2264888281893144\n",
       " 30.34953075809718  3.8120752196826936e-11 ...  0.2264888281893144\n",
       " 30.34953080750529   3.812216984342867e-11 ...  0.2264888281893144\n",
       "30.349530725243227   3.812216984342867e-11 ...  0.2264888281893144\n",
       " 30.34953073944621   3.812216984342867e-11 ... 0.22651631011331347\n",
       " 30.34953079329282   3.812216984342867e-11 ... 0.22646134626531533\n",
       " 30.34953581503027   3.812925807643733e-11 ...  0.2264888281893144\n",
       " 30.34953715881891   3.812925807643733e-11 ...  0.2266262378093098\n",
       " 30.34955936680425   3.812216984342867e-11 ...  0.2266262378093098"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_minuit.trace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Check that the fitted values and errors for all parameters are reasonable, and no fitted parameter value is \"too close\" - or even outside - its allowed min-max range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.052115Z",
     "iopub.status.busy": "2021-01-23T10:00:08.051358Z",
     "iopub.status.idle": "2021-01-23T10:00:08.054024Z",
     "shell.execute_reply": "2021-01-23T10:00:08.054619Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=4</i>\n",
       "<table id=\"table140375618746352\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>3.8122e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>3.546e-12</td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>spectral</td><td>alpha</td><td>2.1958e+00</td><td></td><td>1.000e+00</td><td>3.000e+00</td><td>False</td><td>2.626e-01</td></tr>\n",
       "<tr><td>spectral</td><td>beta</td><td>2.2649e-01</td><td></td><td>nan</td><td>nan</td><td>False</td><td>1.397e-01</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "  type      name     value         unit      ...    max    frozen   error  \n",
       "  str8      str9    float64       str14      ...  float64   bool   float64 \n",
       "-------- --------- ---------- -------------- ... --------- ------ ---------\n",
       "spectral amplitude 3.8122e-11 cm-2 s-1 TeV-1 ...       nan  False 3.546e-12\n",
       "spectral reference 1.0000e+00            TeV ...       nan   True 0.000e+00\n",
       "spectral     alpha 2.1958e+00                ... 3.000e+00  False 2.626e-01\n",
       "spectral      beta 2.2649e-01                ...       nan  False 1.397e-01"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_minuit.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Plot fit statistic profiles for all fitted prameters, using `~gammapy.modeling.Fit.stat_profile()`. For a good fit and error estimate each profile should be parabolic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.082401Z",
     "iopub.status.busy": "2021-01-23T10:00:08.075531Z",
     "iopub.status.idle": "2021-01-23T10:00:08.512361Z",
     "shell.execute_reply": "2021-01-23T10:00:08.512881Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "total_stat = result_minuit.total_stat\n",
    "\n",
    "for par in dataset_hess.models.parameters:\n",
    "    if par.frozen is False:\n",
    "        profile = fit.stat_profile(parameter=par)\n",
    "        plt.plot(\n",
    "            profile[f\"{par.name}_scan\"], profile[\"stat_scan\"] - total_stat\n",
    "        )\n",
    "        plt.xlabel(f\"{par.unit}\")\n",
    "        plt.ylabel(\"Delta TS\")\n",
    "        plt.title(f\"{par.name}: {par.value} +- {par.error}\")\n",
    "        plt.show()\n",
    "        plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Inspect model residuals. Those can always be accessed using `~Dataset.residuals()`, that will return an array in case a the fitted `Dataset` is a `SpectrumDataset` and a full cube in case of a `MapDataset`. For more details, we refer here to the dedicated fitting tutorials: [analysis_3d.ipynb](analysis_3d.ipynb) (for `MapDataset` fitting) and [spectrum_analysis.ipynb](spectrum_analysis.ipynb) (for `SpectrumDataset` fitting)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Covariance and parameters errors\n",
    "\n",
    "After the fit the covariance matrix is attached to the model. You can get the error on a specific parameter by accessing the `.error` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.516499Z",
     "iopub.status.busy": "2021-01-23T10:00:08.515824Z",
     "iopub.status.idle": "2021-01-23T10:00:08.518505Z",
     "shell.execute_reply": "2021-01-23T10:00:08.519081Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.26258181355814064"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crab_model.spectral_model.alpha.error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an example, this step is needed to produce a butterfly plot showing the envelope of the model taking into account parameter uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:08.537431Z",
     "iopub.status.busy": "2021-01-23T10:00:08.535542Z",
     "iopub.status.idle": "2021-01-23T10:00:09.081540Z",
     "shell.execute_reply": "2021-01-23T10:00:09.082073Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jer/git/gammapy/gammapy/gammapy/modeling/models/spectral.py:387: MatplotlibDeprecationWarning: The 'nonposx' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_xscale(\"log\", nonposx=\"clip\")\n",
      "/Users/jer/git/gammapy/gammapy/gammapy/modeling/models/spectral.py:388: MatplotlibDeprecationWarning: The 'nonposy' parameter of __init__() has been renamed 'nonpositive' since Matplotlib 3.3; support for the old name will be dropped two minor releases later.\n",
      "  ax.set_yscale(\"log\", nonposy=\"clip\")\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "crab_spectrum.plot(energy_range=energy_range, energy_power=2)\n",
    "ax = crab_spectrum.plot_error(energy_range=energy_range, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Confidence contours\n",
    "\n",
    "\n",
    "In most studies, one wishes to estimate parameters distribution using observed sample data.\n",
    "A 1-dimensional confidence interval gives an estimated range of values which is likely to include an unknown parameter.\n",
    "A confidence contour is a 2-dimensional generalization of a confidence interval, often represented as an ellipsoid around the best-fit value.\n",
    "\n",
    "Gammapy offers two ways of computing confidence contours, in the dedicated methods `Fit.minos_contour()` and `Fit.stat_profile()`. In the following sections we will describe them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An important point to keep in mind is: *what does a $N\\sigma$ confidence contour really mean?* The answer is it represents the points of the parameter space for which the model likelihood is $N\\sigma$ above the minimum. But one always has to keep in mind that **1 standard deviation in two dimensions has a smaller coverage probability than 68%**, and similarly for all other levels. In particular, in 2-dimensions the probability enclosed by the $N\\sigma$ confidence contour is $P(N)=1-e^{-N^2/2}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Computing contours using `Fit.minos_contour()` "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the fit, MINUIT offers the possibility to compute the confidence confours.\n",
    "gammapy provides an interface to this functionnality throught the `Fit` object using the `minos_contour` method.\n",
    "Here we defined a function to automatize the contour production for the differents parameterer and confidence levels (expressed in term of sigma):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:09.087293Z",
     "iopub.status.busy": "2021-01-23T10:00:09.086761Z",
     "iopub.status.idle": "2021-01-23T10:00:09.088586Z",
     "shell.execute_reply": "2021-01-23T10:00:09.089111Z"
    }
   },
   "outputs": [],
   "source": [
    "def make_contours(fit, result, npoints, sigmas):\n",
    "    cts_sigma = []\n",
    "    for sigma in sigmas:\n",
    "        contours = dict()\n",
    "        for par_1, par_2 in combinations([\"alpha\", \"beta\", \"amplitude\"], r=2):\n",
    "            contour = fit.minos_contour(\n",
    "                result.parameters[par_1],\n",
    "                result.parameters[par_2],\n",
    "                numpoints=npoints,\n",
    "                sigma=sigma,\n",
    "            )\n",
    "            contours[f\"contour_{par_1}_{par_2}\"] = {\n",
    "                par_1: contour[par_1].tolist(),\n",
    "                par_2: contour[par_2].tolist(),\n",
    "            }\n",
    "        cts_sigma.append(contours)\n",
    "    return cts_sigma"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can compute few contours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:09.104542Z",
     "iopub.status.busy": "2021-01-23T10:00:09.098872Z",
     "iopub.status.idle": "2021-01-23T10:00:19.435652Z",
     "shell.execute_reply": "2021-01-23T10:00:19.436144Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 10.2 s, sys: 59.6 ms, total: 10.3 s\n",
      "Wall time: 10.3 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sigma = [1, 2]\n",
    "cts_sigma = make_contours(fit, result_minuit, 10, sigma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we prepare some aliases and annotations in order to make the plotting nicer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:19.442663Z",
     "iopub.status.busy": "2021-01-23T10:00:19.441879Z",
     "iopub.status.idle": "2021-01-23T10:00:19.443530Z",
     "shell.execute_reply": "2021-01-23T10:00:19.444061Z"
    }
   },
   "outputs": [],
   "source": [
    "pars = {\n",
    "    \"phi\": r\"$\\phi_0 \\,/\\,(10^{-11}\\,{\\rm TeV}^{-1} \\, {\\rm cm}^{-2} {\\rm s}^{-1})$\",\n",
    "    \"alpha\": r\"$\\alpha$\",\n",
    "    \"beta\": r\"$\\beta$\",\n",
    "}\n",
    "\n",
    "panels = [\n",
    "    {\n",
    "        \"x\": \"alpha\",\n",
    "        \"y\": \"phi\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_alpha_amplitude\"][\"alpha\"]),\n",
    "        \"cy\": (\n",
    "            lambda ct: np.array(1e11)\n",
    "            * ct[\"contour_alpha_amplitude\"][\"amplitude\"]\n",
    "        ),\n",
    "    },\n",
    "    {\n",
    "        \"x\": \"beta\",\n",
    "        \"y\": \"phi\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_beta_amplitude\"][\"beta\"]),\n",
    "        \"cy\": (\n",
    "            lambda ct: np.array(1e11)\n",
    "            * ct[\"contour_beta_amplitude\"][\"amplitude\"]\n",
    "        ),\n",
    "    },\n",
    "    {\n",
    "        \"x\": \"alpha\",\n",
    "        \"y\": \"beta\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_alpha_beta\"][\"alpha\"]),\n",
    "        \"cy\": (lambda ct: ct[\"contour_alpha_beta\"][\"beta\"]),\n",
    "    },\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we produce the confidence contours figures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:19.510477Z",
     "iopub.status.busy": "2021-01-23T10:00:19.509966Z",
     "iopub.status.idle": "2021-01-23T10:00:20.023908Z",
     "shell.execute_reply": "2021-01-23T10:00:20.024404Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, figsize=(16, 5))\n",
    "colors = [\"m\", \"b\", \"c\"]\n",
    "for p, ax in zip(panels, axes):\n",
    "    xlabel = pars[p[\"x\"]]\n",
    "    ylabel = pars[p[\"y\"]]\n",
    "    for ks in range(len(cts_sigma)):\n",
    "        plot_contour_line(\n",
    "            ax,\n",
    "            p[\"cx\"](cts_sigma[ks]),\n",
    "            p[\"cy\"](cts_sigma[ks]),\n",
    "            lw=2.5,\n",
    "            color=colors[ks],\n",
    "            label=f\"{sigma[ks]}\" + r\"$\\sigma$\",\n",
    "        )\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel(ylabel)\n",
    "plt.legend()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Computing contours using `Fit.stat_surface()`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This alternative method for the computation of confidence contours, although more time consuming than `Fit.minos_contour()`, is expected to be more stable. It consists of a generalization of `Fit.stat_profile()` to a 2-dimensional parameter space. The algorithm is very simple:\n",
    "- First, passing two arrays of parameters values, a 2-dimensional discrete parameter space is defined;\n",
    "- For each node of the parameter space, the two parameters of interest are frozen. This way, a likelihood value ($-2\\mathrm{ln}\\,\\mathcal{L}$, actually) is computed, by either freezing (default) or fitting all nuisance parameters;\n",
    "- Finally, a 2-dimensional surface of $-2\\mathrm{ln}(\\mathcal{L})$ values is returned.\n",
    "Using that surface, one can easily compute a surface of $TS = -2\\Delta\\mathrm{ln}(\\mathcal{L})$ and compute confidence contours.\n",
    "\n",
    "Let's see it step by step."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First of all, we can notice that this method is \"backend-agnostic\", meaning that it can be run with MINUIT, sherpa or scipy as fitting tools. Here we will stick with MINUIT, which is the default choice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:20.028447Z",
     "iopub.status.busy": "2021-01-23T10:00:20.027911Z",
     "iopub.status.idle": "2021-01-23T10:00:20.029295Z",
     "shell.execute_reply": "2021-01-23T10:00:20.029780Z"
    }
   },
   "outputs": [],
   "source": [
    "optimize_opts = {\"backend\": \"minuit\", \"print_level\": 0}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an example, we can compute the confidence contour for the `alpha` and `beta` parameters of the `dataset_hess`. Here we define the parameter space:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:20.034648Z",
     "iopub.status.busy": "2021-01-23T10:00:20.034028Z",
     "iopub.status.idle": "2021-01-23T10:00:20.035515Z",
     "shell.execute_reply": "2021-01-23T10:00:20.035995Z"
    }
   },
   "outputs": [],
   "source": [
    "result = result_minuit\n",
    "par_1 = result.parameters[\"alpha\"]\n",
    "par_2 = result.parameters[\"beta\"]\n",
    "\n",
    "x = par_1\n",
    "y = par_2\n",
    "x_values = np.linspace(1.55, 2.7, 20)\n",
    "y_values = np.linspace(-0.05, 0.55, 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we run the algorithm, by choosing `reoptimize=False` for the sake of time saving. In real life applications, we strongly recommend to  use `reoptimize=True`, so that all free nuisance parameters will be fit at each grid node. This is the correct way, statistically speaking, of computing confidence contours, but is expected to be time consuming."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:20.044052Z",
     "iopub.status.busy": "2021-01-23T10:00:20.040293Z",
     "iopub.status.idle": "2021-01-23T10:00:21.092797Z",
     "shell.execute_reply": "2021-01-23T10:00:21.093484Z"
    }
   },
   "outputs": [],
   "source": [
    "stat_surface = fit.stat_surface(\n",
    "    x, y, x_values, y_values, reoptimize=False, **optimize_opts\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to easily inspect the results, we can convert the $-2\\mathrm{ln}(\\mathcal{L})$ surface to a surface of statistical significance (in units of Gaussian standard deviations from the surface minimum):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:21.097032Z",
     "iopub.status.busy": "2021-01-23T10:00:21.096435Z",
     "iopub.status.idle": "2021-01-23T10:00:21.098007Z",
     "shell.execute_reply": "2021-01-23T10:00:21.098486Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute TS\n",
    "TS = stat_surface[\"stat_scan\"] - result.total_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:21.102305Z",
     "iopub.status.busy": "2021-01-23T10:00:21.101685Z",
     "iopub.status.idle": "2021-01-23T10:00:21.103248Z",
     "shell.execute_reply": "2021-01-23T10:00:21.103733Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute the corresponding statistical significance surface\n",
    "gaussian_sigmas = np.sqrt(TS.T)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that, as explained before, $1\\sigma$ contour obtained this way will not contain 68% of the probability, but rather "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:21.106521Z",
     "iopub.status.busy": "2021-01-23T10:00:21.106051Z",
     "iopub.status.idle": "2021-01-23T10:00:21.107752Z",
     "shell.execute_reply": "2021-01-23T10:00:21.108241Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute the corresponding statistical significance surface\n",
    "# p_value = 1 - st.chi2(df=1).cdf(TS)\n",
    "# gaussian_sigmas = st.norm.isf(p_value / 2).T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can plot the surface values together with contours:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-01-23T10:00:21.139963Z",
     "iopub.status.busy": "2021-01-23T10:00:21.139133Z",
     "iopub.status.idle": "2021-01-23T10:00:21.444080Z",
     "shell.execute_reply": "2021-01-23T10:00:21.444554Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Learn how the model, dataset and fit Gammapy classes work together in a detailed modeling and fitting use-case."
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x7fabc41f7978>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc40fb5f8>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc410d438>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c47d68>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c47828>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c476a0>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c3c278>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3d55ac8>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c47668>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3bf9940>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3bf9c18>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3bf9da0>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c19240>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c192b0>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c19cc0>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c19f28>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3c19ef0>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3bf9048>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3bee2e8>,\n",
       "  <matplotlib.axis.YTick at 0x7fabc3bee518>],\n",
       " [Text(0, 0, '-0.05'),\n",
       "  Text(0, 1, '-0.02'),\n",
       "  Text(0, 2, '0.01'),\n",
       "  Text(0, 3, '0.04'),\n",
       "  Text(0, 4, '0.08'),\n",
       "  Text(0, 5, '0.11'),\n",
       "  Text(0, 6, '0.14'),\n",
       "  Text(0, 7, '0.17'),\n",
       "  Text(0, 8, '0.2'),\n",
       "  Text(0, 9, '0.23'),\n",
       "  Text(0, 10, '0.27'),\n",
       "  Text(0, 11, '0.3'),\n",
       "  Text(0, 12, '0.33'),\n",
       "  Text(0, 13, '0.36'),\n",
       "  Text(0, 14, '0.39'),\n",
       "  Text(0, 15, '0.42'),\n",
       "  Text(0, 16, '0.46'),\n",
       "  Text(0, 17, '0.49'),\n",
       "  Text(0, 18, '0.52'),\n",
       "  Text(0, 19, '0.55')])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8, 6))\n",
    "\n",
    "# We choose to plot 1 and 2 sigma confidence contours\n",
    "levels = [1, 2]\n",
    "\n",
    "contours = plt.contour(gaussian_sigmas, levels=levels, colors=\"white\")\n",
    "plt.clabel(contours, fmt=\"%.0f$\\,\\sigma$\", inline=3, fontsize=15)\n",
    "\n",
    "im = plt.imshow(\n",
    "    gaussian_sigmas,\n",
    "    extent=[0, len(x_values) - 1, 0, len(y_values) - 1],\n",
    "    origin=\"lower\",\n",
    ")\n",
    "fig.colorbar(im)\n",
    "\n",
    "plt.xticks(range(len(x_values)), np.around(x_values, decimals=2), rotation=45)\n",
    "plt.yticks(range(len(y_values)), np.around(y_values, decimals=2));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that, if computed with `reoptimize=True`, this plot would be completely consistent with the third panel of the plot produced with `Fit.minos_contour` (try!)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it is always remember that confidence contours are approximations. In particular, when the parameter range boundaries are close to the contours lines, it is expected that the statistical meaning of the countours is not well defined. That's why we advise to always choose a parameter space that com contain the contours you're interested in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
