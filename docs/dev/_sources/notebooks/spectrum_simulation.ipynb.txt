{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/spectrum_simulation.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_simulation.ipynb](../_static/notebooks/spectrum_simulation.ipynb) |\n",
    "[spectrum_simulation.py](../_static/notebooks/spectrum_simulation.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum simulation for CTA\n",
    "\n",
    "A quick example how to use the functions and classes in `~gammapy.spectrum` in order to simulate and fit spectra. \n",
    "\n",
    "We will simulate observations for CTA first using a power law model without any background.\n",
    "Then we will add a power law shaped background component.\n",
    "\n",
    "We will use the following classes:\n",
    "\n",
    "* `~gammapy.spectrum.SpectrumDatasetOnOff`\n",
    "* `~gammapy.spectrum.SpectrumDataset`\n",
    "* `~gammapy.irf.load_cta_irfs`\n",
    "* `~gammapy.modeling.models.PowerLawSpectralModel`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Same procedure as in every script ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.spectrum import (\n",
    "    SpectrumDatasetOnOff,\n",
    "    SpectrumDataset,\n",
    "    SpectrumDatasetMaker,\n",
    ")\n",
    "from gammapy.modeling import Fit, Parameter\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    SpectralModel,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.data import Observation\n",
    "from gammapy.maps import MapAxis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation of a single spectrum\n",
    "\n",
    "To do a simulation, we need to define the observational parameters like the livetime, the offset, the assumed integration radius, the energy range to perform the simulation for and the choice of spectral model. We then use an in-memory observation which is convolved with the IRFs to get the predicted number of counts. This is Poission fluctuated using the `fake()` to get the simulated counts for each observation.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define simulation parameters parameters\n",
    "livetime = 1 * u.h\n",
    "pointing = SkyCoord(0, 0, unit=\"deg\", frame=\"galactic\")\n",
    "offset = 0.5 * u.deg\n",
    "# Reconstructed and true energy axis\n",
    "energy_axis = MapAxis.from_edges(\n",
    "    np.logspace(-0.5, 1.0, 10), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "energy_axis_true = MapAxis.from_edges(\n",
    "    np.logspace(-1.2, 2.0, 31), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "\n",
    "on_region_radius = Angle(\"0.11 deg\")\n",
    "on_region = CircleSkyRegion(center=pointing, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "   name     value   error      unit      min max frozen\n",
      "--------- --------- ----- -------------- --- --- ------\n",
      "    index 3.000e+00   nan                nan nan  False\n",
      "amplitude 2.500e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "reference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "# Define spectral model - a simple Power Law in this case\n",
    "model_simu = PowerLawSpectralModel(\n",
    "    index=3.0,\n",
    "    amplitude=2.5e-12 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "print(model_simu)\n",
    "# we set the sky model used in the dataset\n",
    "model = SkyModel(spectral_model=model_simu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the IRFs\n",
    "# In this simulation, we use the CTA-1DC irfs shipped with gammapy.\n",
    "irfs = load_cta_irfs(\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Info for OBS_ID = 0\n",
      "- Pointing pos: RA 266.40 deg / Dec -28.94 deg\n",
      "- Livetime duration: 3600.0 s\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The truth value of a Quantity is ambiguous. In the future this will raise a ValueError. [astropy.units.quantity]\n"
     ]
    }
   ],
   "source": [
    "obs = Observation.create(pointing=pointing, livetime=livetime, irfs=irfs)\n",
    "print(obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the SpectrumDataset\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=energy_axis.edges, e_true=energy_axis_true.edges, region=on_region\n",
    ")\n",
    "maker = SpectrumDatasetMaker(selection=[\"aeff\", \"edisp\", \"background\"])\n",
    "dataset = maker.run(dataset_empty, obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumDataset\n",
      "\n",
      "    Name                            : 0 \n",
      "\n",
      "    Total counts                    : 16 \n",
      "    Total predicted counts          : nan\n",
      "    Total background counts         : 22.35\n",
      "\n",
      "    Effective area min              : 8.16e+04 m2\n",
      "    Effective area max              : 5.08e+06 m2\n",
      "\n",
      "    Livetime                        : 3.60e+03 s\n",
      "\n",
      "    Number of total bins            : 9 \n",
      "    Number of fit bins              : 9 \n",
      "\n",
      "    Fit statistic type              : cash\n",
      "    Fit statistic value (-2 log(L)) : nan\n",
      "\n",
      "    Number of parameters            : 0\n",
      "    Number of free parameters       : 0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Set the model on the dataset, and fake\n",
    "dataset.model = model\n",
    "dataset.fake(random_state=42)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see that backgound counts are now simulated"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### OnOff analysis\n",
    "\n",
    "To do `OnOff` spectral analysis, which is the usual science case, the standard would be to use `SpectrumDatasetOnOff`, which uses the acceptance to fake off-counts "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumDatasetOnOff\n",
      "\n",
      "    Name                            :  \n",
      "\n",
      "    Total counts                    : 331 \n",
      "    Total predicted counts          : 296.82\n",
      "    Total off counts                : 122.00\n",
      "\n",
      "    Total background counts         : 24.40\n",
      "\n",
      "    Effective area min              : 8.16e+04 m2\n",
      "    Effective area max              : 5.08e+06 m2\n",
      "\n",
      "    Livetime                        : 1.00e+00 h\n",
      "\n",
      "    Number of total bins            : 9 \n",
      "    Number of fit bins              : 9 \n",
      "\n",
      "    Fit statistic type              : wstat\n",
      "    Fit statistic value (-2 log(L)) : 7.72\n",
      "\n",
      "    Number of parameters            : 3\n",
      "    Number of free parameters       : 2\n",
      "\n",
      "    Model type                      : SkyModels\n",
      "    Acceptance mean:                : 1.0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dataset_onoff = SpectrumDatasetOnOff(\n",
    "    aeff=dataset.aeff,\n",
    "    edisp=dataset.edisp,\n",
    "    models=model,\n",
    "    livetime=livetime,\n",
    "    acceptance=1,\n",
    "    acceptance_off=5,\n",
    ")\n",
    "dataset_onoff.fake(background_model=dataset.background)\n",
    "print(dataset_onoff)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see that off counts are now simulated as well. We now simulate several spectra using the same set of observation conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 213 ms, sys: 3.67 ms, total: 217 ms\n",
      "Wall time: 220 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "n_obs = 100\n",
    "datasets = []\n",
    "\n",
    "for idx in range(n_obs):\n",
    "    dataset_onoff.fake(random_state=idx, background_model=dataset.background)\n",
    "    dataset_onoff.name = f\"obs_{idx}\"\n",
    "    datasets.append(dataset_onoff.copy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to the fit let's have a look at the simulated observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_on = [dataset.counts.data.sum() for dataset in datasets]\n",
    "n_off = [dataset.counts_off.data.sum() for dataset in datasets]\n",
    "excess = [dataset.excess.data.sum() for dataset in datasets]\n",
    "\n",
    "fix, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
    "axes[0].hist(n_on)\n",
    "axes[0].set_xlabel(\"n_on\")\n",
    "axes[1].hist(n_off)\n",
    "axes[1].set_xlabel(\"n_off\")\n",
    "axes[2].hist(excess)\n",
    "axes[2].set_xlabel(\"excess\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we fit each simulated spectrum individually "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4.43 s, sys: 33.6 ms, total: 4.46 s\n",
      "Wall time: 4.53 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results = []\n",
    "for dataset in datasets:\n",
    "    dataset.models = model.copy()\n",
    "    fit = Fit([dataset])\n",
    "    result = fit.optimize()\n",
    "    results.append(\n",
    "        {\n",
    "            \"index\": result.parameters[\"index\"].value,\n",
    "            \"amplitude\": result.parameters[\"amplitude\"].value,\n",
    "        }\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take a look at the distribution of the fitted indices. This matches very well with the spectrum that we initially injected, index=2.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index: 3.008268371884822 += 0.08582628065923613\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([_[\"index\"] for _ in results])\n",
    "plt.hist(index, bins=10, alpha=0.5)\n",
    "plt.axvline(x=model_simu.parameters[\"index\"].value, color=\"red\")\n",
    "print(f\"index: {index.mean()} += {index.std()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Change the observation time to something longer or shorter. Does the observation and spectrum results change as you expected?\n",
    "* Change the spectral model, e.g. add a cutoff at 5 TeV, or put a steep-spectrum source with spectral index of 4.0\n",
    "* Simulate spectra with the spectral model we just defined. How much observation duration do you need to get back the injected parameters?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "In this tutorial we simulated and analysed the spectrum of source using CTA prod 2 IRFs.\n",
    "\n",
    "If you'd like to go further, please see the other tutorial notebooks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
