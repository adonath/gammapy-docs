{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/models.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[models.ipynb](../_static/notebooks/models.ipynb) |\n",
    "[models.py](../_static/notebooks/models.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Models Gallery\n",
    "\n",
    "\n",
    "This is an overview of the Gammapy built-in models in `~gammapy.modeling.models`. Gammapy works with 3D model objects, a `SkyModel(spectral_model, spatial_model)` can represent models with a spectral component and a spatial component while a `SkyDiffuseCube` represent a fully 3D cube template. In the following we are going to see how to create these models and learn more about their specific functionnalities.\n",
    "\n",
    "Note that there is a separate tutorial [modeling](modeling.ipynb) that explains about `~gammapy.modeling`,\n",
    "the Gammapy modeling and fitting framework. You have to read that to learn how to work with models in order to analyse data.\n",
    "\n",
    "Topics covered here:\n",
    "\n",
    "- How to create spatial, and spectral models.\n",
    "- How to create 3D models and other compound models.\n",
    "- How to use the model registries to list all available models or add models.\n",
    "- How to work with user defined models for simulations and fitting.\n",
    "- How to serialize/read and deserialize/write models.\n",
    "\n",
    "## Setup\n",
    "\n",
    "As always, let's get started with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from astropy import units as u\n",
    "from astropy.coordinates import Angle\n",
    "from gammapy.maps import Map, WcsGeom\n",
    "import gammapy.modeling.models as gm\n",
    "from gammapy.modeling import Parameter\n",
    "from gammapy.modeling.models import (\n",
    "    SpectralModel,\n",
    "    PowerLawSpectralModel,\n",
    "    SkyModels,\n",
    "    SkyModel,\n",
    "    SkyDiffuseCube,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Models Registries\n",
    "\n",
    "The list of built-in models directly availables are given in the models registries: `SPECTRAL_MODELS` and `SPECTRAL_MODELS`. In the custom model section we will see how to add user defined models to these lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[gammapy.modeling.models.spatial.ConstantSpatialModel,\n",
       " gammapy.modeling.models.spatial.TemplateSpatialModel,\n",
       " gammapy.modeling.models.spatial.DiskSpatialModel,\n",
       " gammapy.modeling.models.spatial.GaussianSpatialModel,\n",
       " gammapy.modeling.models.spatial.PointSpatialModel,\n",
       " gammapy.modeling.models.spatial.ShellSpatialModel]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from gammapy.modeling.models import SPECTRAL_MODELS, SPATIAL_MODELS\n",
    "\n",
    "SPATIAL_MODELS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[gammapy.modeling.models.spectral.ConstantSpectralModel,\n",
       " gammapy.modeling.models.spectral.CompoundSpectralModel,\n",
       " gammapy.modeling.models.spectral.PowerLawSpectralModel,\n",
       " gammapy.modeling.models.spectral.PowerLaw2SpectralModel,\n",
       " gammapy.modeling.models.spectral.ExpCutoffPowerLawSpectralModel,\n",
       " gammapy.modeling.models.spectral.ExpCutoffPowerLaw3FGLSpectralModel,\n",
       " gammapy.modeling.models.spectral.SuperExpCutoffPowerLaw3FGLSpectralModel,\n",
       " gammapy.modeling.models.spectral.SuperExpCutoffPowerLaw4FGLSpectralModel,\n",
       " gammapy.modeling.models.spectral.LogParabolaSpectralModel,\n",
       " gammapy.modeling.models.spectral.TemplateSpectralModel,\n",
       " gammapy.modeling.models.spectral.GaussianSpectralModel,\n",
       " gammapy.modeling.models.spectral.AbsorbedSpectralModel,\n",
       " gammapy.modeling.models.spectral.NaimaSpectralModel,\n",
       " gammapy.modeling.models.spectral.ScaleSpectralModel]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPECTRAL_MODELS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To learn more about the definition and parameters of each model have a look to the documentation pages [here](https://docs.gammapy.org/0.15/modeling/index.html#module-gammapy.modeling.models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Spatial models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining and evaluating a spatial model\n",
    "\n",
    "Here is an example that shows how to define a Gaussian spatial model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "gaussian = gm.GaussianSpatialModel(\n",
    "    lon_0=\"2 deg\",\n",
    "    lat_0=\"2 deg\",\n",
    "    sigma=\"1 deg\",\n",
    "    e=0.7,\n",
    "    phi=\"30 deg\",\n",
    "    frame=\"galactic\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to display the spatial model we can define a map geometry with `WcsGeom`, evaluate the model toward its coordinates and then create a `Map` to plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.contour.QuadContourSet at 0x119244a90>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create the geometry\n",
    "m_geom = WcsGeom.create(\n",
    "    binsz=0.01, width=(5, 5), skydir=(2, 2), frame=\"galactic\", proj=\"AIT\"\n",
    ")\n",
    "coords = m_geom.get_coord()\n",
    "\n",
    "# evaluate the model\n",
    "values = gaussian(coords.lon, coords.lat)\n",
    "\n",
    "# create and plot the map\n",
    "skymap = Map.from_geom(m_geom, data=values.value, unit=values.unit)\n",
    "_, ax, _ = skymap.plot()\n",
    "\n",
    "# then we can do some extra plotting on the image\n",
    "transform = ax.get_transform(\"galactic\")\n",
    "phi = gaussian.phi.quantity\n",
    "ax.scatter(2, 2, transform=transform, s=20, edgecolor=\"red\", facecolor=\"red\")\n",
    "ax.text(1.5, 1.85, r\"$(l_0, b_0)$\", transform=transform, ha=\"center\")\n",
    "ax.plot(\n",
    "    [2, 2 + np.sin(phi)], [2, 2 + np.cos(phi)], color=\"r\", transform=transform\n",
    ")\n",
    "ax.vlines(x=2, color=\"r\", linestyle=\"--\", transform=transform, ymin=-5, ymax=5)\n",
    "ax.text(2.25, 2.45, r\"$\\phi$\", transform=transform)\n",
    "ax.contour(skymap.data, cmap=\"coolwarm\", levels=10, alpha=0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can do the same with a disk model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(2.15, 2.3, '$\\\\phi$')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "disk = gm.DiskSpatialModel(\n",
    "    lon_0=\"2 deg\",\n",
    "    lat_0=\"2 deg\",\n",
    "    r_0=\"1 deg\",\n",
    "    e=0.8,\n",
    "    phi=\"30 deg\",\n",
    "    frame=\"galactic\",\n",
    ")\n",
    "\n",
    "m_geom = WcsGeom.create(\n",
    "    binsz=0.01, width=(3, 3), skydir=(2, 2), frame=\"galactic\", proj=\"AIT\"\n",
    ")\n",
    "coords = m_geom.get_coord()\n",
    "vals = disk(coords.lon, coords.lat)\n",
    "skymap = Map.from_geom(m_geom, data=vals.value)\n",
    "\n",
    "_, ax, _ = skymap.plot()\n",
    "\n",
    "transform = ax.get_transform(\"galactic\")\n",
    "phi = disk.phi.quantity\n",
    "ax.scatter(2, 2, transform=transform, s=20, edgecolor=\"red\", facecolor=\"red\")\n",
    "ax.text(1.7, 1.85, r\"$(l_0, b_0)$\", transform=transform, ha=\"center\")\n",
    "ax.plot(\n",
    "    [2, 2 + np.sin(np.pi / 6)],\n",
    "    [2, 2 + np.cos(np.pi / 6)],\n",
    "    color=\"r\",\n",
    "    transform=transform,\n",
    ")\n",
    "ax.vlines(x=2, color=\"r\", linestyle=\"--\", transform=transform, ymin=0, ymax=5)\n",
    "ax.text(2.15, 2.3, r\"$\\phi$\", transform=transform)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Astropy-regions and ds9 region files\n",
    "\n",
    "The spatial model can be exported to [astropy-regions](https://astropy-regions.readthedocs.io/en/latest/) objects that provide several convenient function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Region: EllipseSkyRegion\n",
      "center: <SkyCoord (Galactic): (l, b) in deg\n",
      "    (2., 2.)>\n",
      "width: 1.1999999999999997 deg\n",
      "height: 2.0 deg\n",
      "angle: 30.0 deg\n"
     ]
    }
   ],
   "source": [
    "print(disk.to_region())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In particular we can save these regions as [ds9-regions](http://ds9.si.edu/doc/ref/region.html) files.\n",
    "Here is an example that shows how to write a ds9 region file for the Fermi-LAT extended source defined in 3FHL catalogue. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF.\n",
      "Set MJD-OBS to 46710.000000 from DATE-OBS.\n",
      "Changed DATE-OBS from '07/10/86' to '1986-10-07''. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n",
      "WARNING: UnitsWarning: 'ph/cm2/s/sr' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n",
      "WARNING: UnitsWarning: 'ph/cm2/s/sr' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n",
      "WARNING: UnitsWarning: 'ph/cm2/s/sr' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF.\n",
      "Invalid DATE-OBS format ' ' is too short'. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'celfix' made the change 'Success'. [astropy.wcs.wcs]\n",
      "Invalid value BUNIT='None' in FITS header. Setting empty unit.\n",
      "WARNING: FITSFixedWarning: RADECSYS= 'FK5' \n",
      "the RADECSYS keyword is deprecated, use RADESYSa. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF.\n",
      "Invalid DATE-OBS format ' ' is too short'. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'celfix' made the change 'Success'. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n",
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n"
     ]
    }
   ],
   "source": [
    "from gammapy.catalog import SourceCatalog3FHL\n",
    "from regions import write_ds9\n",
    "\n",
    "FERMI_3FHL = SourceCatalog3FHL()\n",
    "models_reg = [\n",
    "    source.spatial_model().to_region()\n",
    "    for source in FERMI_3FHL\n",
    "    if not source.is_pointlike\n",
    "]\n",
    "regions = [_ for _ in models_reg if _ is not None]\n",
    "\n",
    "filename = \"./3fhl_extended_shapes.reg\"\n",
    "write_ds9(regions, filename, coordsys=\"galactic\", fmt=\".4f\", radunit=\"deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that for the parametric models we display the corresonding shape but for the template models we give only the boundary of the map.\n",
    "\n",
    "Similarly the position error of the spatial model is described by an astropy-regions object and can be saved to a ds9 regions file.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Region: EllipseSkyRegion\n",
      "center: <SkyCoord (ICRS): (ra, dec) in deg\n",
      "    (83.63483429, 22.01920319)>\n",
      "width: 0.015906322747468945 deg\n",
      "height: 0.01590632274746895 deg\n",
      "angle: 0.0 deg\n"
     ]
    }
   ],
   "source": [
    "pos_err = FERMI_3FHL[\"Crab Nebula\"].spatial_model().position_error\n",
    "print(pos_err)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "regiosn = [pos_err]\n",
    "filename = \"./3fhl_position_error.reg\"\n",
    "write_ds9(regions, filename, coordsys=\"galactic\", fmt=\".4f\", radunit=\"deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectral models\n",
    "\n",
    "### Defining and evaluating a spectral model\n",
    "\n",
    "Here are some examples of the built-in spectral models:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [0.1, 100] * u.TeV\n",
    "\n",
    "pwl = gm.PowerLawSpectralModel(\n",
    "    index=2.0, amplitude=\"1e-12 cm-2 s-1 TeV-1\", reference=\"1 TeV\"\n",
    ")\n",
    "pwl.plot(energy_range, label=\"pwl\")\n",
    "\n",
    "pwl2 = gm.PowerLaw2SpectralModel(\n",
    "    amplitude=\"1e-12 cm-2 s-1\", index=2.0, emin=\"0.1 TeV\", emax=\"100 TeV\"\n",
    ")\n",
    "pwl2.plot(energy_range, label=\"pwl2\")\n",
    "\n",
    "ecpl = gm.ExpCutoffPowerLawSpectralModel(\n",
    "    index=1.5,\n",
    "    amplitude=\"1e-12 cm-2 s-1 TeV-1\",\n",
    "    reference=\"1 TeV\",\n",
    "    lambda_=\"0.1 TeV-1\",\n",
    "    alpha=1.0,\n",
    ")\n",
    "ecpl.plot(energy_range, label=\"ecpl\")\n",
    "\n",
    "log_parabola = gm.LogParabolaSpectralModel(\n",
    "    amplitude=\"1e-12 cm-2 s-1 TeV-1\", reference=\"10 TeV\", alpha=2.0, beta=1.0\n",
    ")\n",
    "log_parabola.plot(energy_range, label=\"log_parabola\")\n",
    "\n",
    "plt.ylim(1e-18, 1e-10)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can evaluate a model values with energies given as an astropy `Quantity`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.001001e-13 1.001001e-15 1.001001e-17] 1 / (cm2 s TeV)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "astropy.units.quantity.Quantity"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "value = pwl2(1 * u.TeV)\n",
    "values = pwl2([1, 10, 100] * u.TeV)\n",
    "print(values)\n",
    "type(values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also return the energy corresponding to a given flux value of the spectral model with the `inverse` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$[1,~10,~100] \\; \\mathrm{TeV}$$"
      ],
      "text/plain": [
       "<Quantity [  1.,  10., 100.] TeV>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwl2.inverse(values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to integrate the spectral model within an energy range you can use the `integral` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$1 \\times 10^{-12} \\; \\mathrm{\\frac{1}{s\\,cm^{2}}}$$"
      ],
      "text/plain": [
       "<Quantity 1.e-12 1 / (cm2 s)>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwl2.integral(0.1 * u.TeV, 100 * u.TeV)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "### Naima models\n",
    "\n",
    "Additionnal gammapy provide an interface to work with [Naima models](https://naima.readthedocs.io/en/latest/api-models.html). \n",
    "In the following we show as an example how to create and plot a spectral model that convolves an `ExpCutoffPowerLawSpectralModel` electron distribution with an `InverseCompton` radiative model, in the presence of multiple seed photon fields.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import naima\n",
    "\n",
    "particle_distribution = naima.models.ExponentialCutoffPowerLaw(\n",
    "    1e30 / u.eV, 10 * u.TeV, 3.0, 30 * u.TeV\n",
    ")\n",
    "radiative_model = naima.radiative.InverseCompton(\n",
    "    particle_distribution,\n",
    "    seed_photon_fields=[\"CMB\", [\"FIR\", 26.5 * u.K, 0.415 * u.eV / u.cm ** 3]],\n",
    "    Eemin=100 * u.GeV,\n",
    ")\n",
    "\n",
    "model = gm.NaimaSpectralModel(radiative_model, distance=1.5 * u.kpc)\n",
    "\n",
    "opts = {\n",
    "    \"energy_range\": [10 * u.GeV, 80 * u.TeV],\n",
    "    \"energy_power\": 2,\n",
    "    \"flux_unit\": \"erg-1 cm-2 s-1\",\n",
    "}\n",
    "\n",
    "# Plot the total inverse Compton emission\n",
    "model.plot(label=\"IC (total)\", **opts)\n",
    "\n",
    "# Plot the separate contributions from each seed photon field\n",
    "for seed, ls in zip([\"CMB\", \"FIR\"], [\"-\", \"--\"]):\n",
    "    model = gm.NaimaSpectralModel(\n",
    "        radiative_model, seed=seed, distance=1.5 * u.kpc\n",
    "    )\n",
    "    model.plot(label=f\"IC ({seed})\", ls=ls, color=\"gray\", **opts)\n",
    "\n",
    "plt.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "### EBL absorption models\n",
    "\n",
    "Here we illustrate how to create and plot EBL absorption models for a redshift of 0.5:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "redshift = 0.5\n",
    "dominguez = gm.Absorption.read_builtin(\"dominguez\").table_model(redshift)\n",
    "franceschini = gm.Absorption.read_builtin(\"franceschini\").table_model(redshift)\n",
    "finke = gm.Absorption.read_builtin(\"finke\").table_model(redshift)\n",
    "\n",
    "plt.figure()\n",
    "energy_range = [0.08, 3] * u.TeV\n",
    "opts = dict(energy_range=energy_range, energy_unit=\"TeV\", flux_unit=\"\")\n",
    "franceschini.plot(label=\"Franceschini 2008\", **opts)\n",
    "finke.plot(label=\"Finke 2010\", **opts)\n",
    "dominguez.plot(label=\"Dominguez 2011\", **opts)\n",
    "\n",
    "plt.ylabel(r\"Absorption coefficient [$\\exp{(-\\tau(E))}$]\")\n",
    "plt.xlim(energy_range.value)\n",
    "plt.ylim(1e-4, 2)\n",
    "plt.title(f\"EBL models (z={redshift})\")\n",
    "plt.grid(which=\"both\")\n",
    "plt.legend(loc=\"best\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Custom models\n",
    "\n",
    "In order to add a user defined spectral model you have to create a SpectralModel subclass.\n",
    "This new model class should include:\n",
    "\n",
    "- a tag used for serialization (it can be the same as the class name)\n",
    "- an instantiation of each Parameter with their unit, default values and frozen status\n",
    "- the evaluate function where the mathematical expression for the model is defined.\n",
    "\n",
    "As an example we will use a PowerLawSpectralModel plus a Gaussian (with fixed width).\n",
    "First we define the new custom model class that we name `PLG`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class PLG(SpectralModel):\n",
    "    tag = \"PLG\"\n",
    "    index = Parameter(\"index\", 2, min=0)\n",
    "    amplitude = Parameter(\"amplitude\", \"1e-12 cm-2 s-1 TeV-1\", min=0)\n",
    "    reference = Parameter(\"reference\", \"1 TeV\", frozen=True)\n",
    "    mean = Parameter(\"mean\", \"1 TeV\", min=0)\n",
    "    width = Parameter(\"width\", \"0.1 TeV\", min=0, frozen=True)\n",
    "\n",
    "    @staticmethod\n",
    "    def evaluate(energy, index, amplitude, reference, mean, width):\n",
    "        pwl = PowerLawSpectralModel.evaluate(\n",
    "            energy=energy,\n",
    "            index=index,\n",
    "            amplitude=amplitude,\n",
    "            reference=reference,\n",
    "        )\n",
    "        gauss = amplitude * np.exp(-((energy - mean) ** 2) / (2 * width ** 2))\n",
    "        return pwl + gauss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "then we add it to the spectral model registry so it can be used for fitting and serialization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "SPECTRAL_MODELS.append(PLG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLG\n",
      "\n",
      "   name     value   error      unit         min    max frozen\n",
      "--------- --------- ----- -------------- --------- --- ------\n",
      "    index 2.000e+00   nan                0.000e+00 nan  False\n",
      "amplitude 1.000e-12   nan cm-2 s-1 TeV-1 0.000e+00 nan  False\n",
      "reference 1.000e+00   nan            TeV       nan nan   True\n",
      "     mean 5.000e+00   nan            TeV 0.000e+00 nan  False\n",
      "    width 2.000e-01   nan            TeV 0.000e+00 nan   True\n"
     ]
    }
   ],
   "source": [
    "custom_model = PLG(\n",
    "    index=2,\n",
    "    amplitude=1e-12 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    "    mean=5 * u.TeV,\n",
    "    width=0.2 * u.TeV,\n",
    ")\n",
    "print(custom_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "custom_model.plot(energy_range=energy_range);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that gammapy assumes that all SpectralModel evaluate functions return a flux in unit of \"cm-2 s-1 TeV-1\" (or equivalent dimensions).\n",
    "\n",
    "Similarly you can also create custom spatial models and add them to the `SPATIAL_MODELS` registry. In that case gammapy assumes that the evaluate function return a normalized quantity in \"sr-1\" such as the model integral over the whole sky is one.\n",
    "\n",
    "Once your custom models are defined and added to their model resgistry they can be serialized like the built-in models, as shown at the end of this tutorial."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3D models and models list\n",
    "\n",
    "A source can be modeled by a combination of a spatial and a spectral model using a `SkyModel`. \n",
    "For example we can use the disk and exponential cut-off power-law models defined previously to create a new source model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source\n",
      "SkyModel\n",
      "\n",
      "   name     value   error      unit         min        max    frozen\n",
      "--------- --------- ----- -------------- ---------- --------- ------\n",
      "    lon_0 2.000e+00   nan            deg        nan       nan  False\n",
      "    lat_0 2.000e+00   nan            deg -9.000e+01 9.000e+01  False\n",
      "      r_0 1.000e+00   nan            deg  0.000e+00       nan  False\n",
      "        e 8.000e-01   nan                 0.000e+00 1.000e+00   True\n",
      "      phi 3.000e+01   nan            deg        nan       nan   True\n",
      "     edge 1.000e-02   nan            deg  1.000e-02       nan   True\n",
      "    index 1.500e+00   nan                       nan       nan  False\n",
      "amplitude 1.000e-12   nan cm-2 s-1 TeV-1        nan       nan  False\n",
      "reference 1.000e+00   nan            TeV        nan       nan   True\n",
      "  lambda_ 1.000e-01   nan          TeV-1        nan       nan  False\n",
      "    alpha 1.000e+00   nan                       nan       nan   True\n"
     ]
    }
   ],
   "source": [
    "model1 = SkyModel(spectral_model=ecpl, spatial_model=disk)\n",
    "print(model1.name)\n",
    "print(model1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that for convenience the spatial model component is optionnal. Here we create a source model using only the  power-law model defined previously:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source2\n",
      "SkyModel\n",
      "\n",
      "   name     value   error      unit      min max frozen\n",
      "--------- --------- ----- -------------- --- --- ------\n",
      "    index 2.000e+00   nan                nan nan  False\n",
      "amplitude 1.000e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "reference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "model2 = SkyModel(pwl, name=\"source2\")\n",
    "print(model2.name)\n",
    "print(model2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionnaly the `gammapy.modeling.models.SkyDiffuseCube` can be used to represent source models based on templates. It can be created from an existing FITS file:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gll_iem_v06_gc.fits\n",
      "SkyDiffuseCube\n",
      "\n",
      "   name     value   error unit min max frozen\n",
      "--------- --------- ----- ---- --- --- ------\n",
      "     norm 1.000e+00   nan      nan nan  False\n",
      "     tilt 0.000e+00   nan      nan nan   True\n",
      "reference 1.000e+00   nan  TeV nan nan   True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n"
     ]
    }
   ],
   "source": [
    "diffuse = SkyDiffuseCube.read(\n",
    "    \"$GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\"\n",
    ")\n",
    "print(diffuse.name)\n",
    "print(diffuse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A you can see in the previous examples the `name` arugment is also optionnal. However if you want to build complex models you have to define it, so the different sources or backgrounds can be identified (for now the serialisation rely on unique model names).\n",
    "\n",
    "Then the global model of an analysis can be define by combining several 3D models (`SkyModel` or `SkyDiffuseCube`)  into a `SkyModels`.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = SkyModels([model1, model2, diffuse])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively you can combine the 3D models using the `+` operator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = model1 + model2 + diffuse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that a `SkyModel` object can be evaluated for a given longitude, latitude, and energy, but the `SkyModels` object cannot. \n",
    "This `SkyModels` container object will be assigned to `Dataset` or `Datasets` together with the data to be fitted as explained in other analysis tutotials (see for example the [modeling](modeling.ipynb) notebook).\n",
    "\n",
    "\n",
    "## Serialization\n",
    "\n",
    "The list of models contained in a `SkyModels` object can be exported/imported using yaml configuration files.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\n",
      "-   name: source\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: ExpCutoffPowerLawSpectralModel\n",
      "        parameters:\n",
      "        - {name: index, value: 1.5, unit: '', min: .nan, max: .nan, frozen: false}\n",
      "        - {name: amplitude, value: 1.0e-12, unit: cm-2 s-1 TeV-1, min: .nan, max: .nan,\n",
      "            frozen: false}\n",
      "        - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\n",
      "        - {name: lambda_, value: 0.1, unit: TeV-1, min: .nan, max: .nan, frozen: false}\n",
      "        - {name: alpha, value: 1.0, unit: '', min: .nan, max: .nan, frozen: true}\n",
      "    spatial:\n",
      "        type: DiskSpatialModel\n",
      "        frame: galactic\n",
      "        parameters:\n",
      "        - {name: lon_0, value: 2.0, unit: deg, min: .nan, max: .nan, frozen: false}\n",
      "        - {name: lat_0, value: 2.0, unit: deg, min: -90.0, max: 90.0, frozen: false}\n",
      "        - {name: r_0, value: 1.0, unit: deg, min: 0.0, max: .nan, frozen: false}\n",
      "        - {name: e, value: 0.8, unit: '', min: 0.0, max: 1.0, frozen: true}\n",
      "        - {name: phi, value: 30.0, unit: deg, min: .nan, max: .nan, frozen: true}\n",
      "        - {name: edge, value: 0.01, unit: deg, min: 0.01, max: .nan, frozen: true}\n",
      "-   name: source2\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        - {name: index, value: 2.0, unit: '', min: .nan, max: .nan, frozen: false}\n",
      "        - {name: amplitude, value: 1.0e-12, unit: cm-2 s-1 TeV-1, min: .nan, max: .nan,\n",
      "            frozen: false}\n",
      "        - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\n",
      "-   name: gll_iem_v06_gc.fits\n",
      "    type: SkyDiffuseCube\n",
      "    filename: $GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\n",
      "    parameters:\n",
      "    - {name: norm, value: 1.0, unit: '', min: .nan, max: .nan, frozen: false}\n",
      "    - {name: tilt, value: 0.0, unit: '', min: .nan, max: .nan, frozen: true}\n",
      "    - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models_yaml = models.to_yaml()\n",
    "print(models_yaml)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The structure of the yaml files follows the structure of the python objects.\n",
    "The `components` listed correspond to the `SkyModel` and `SkyDiffuseCube` components of the `SkyModels`. \n",
    "For each `SkyModel` we have  informations about its `name`, `type` (corresponding to the tag attribute) and sub-mobels (i.e `spectral` model and eventually `spatial` model). Then the spatial and spectral models are defiend by their type and parameters. The `parameters` keys name/value/unit are mandatory, while the keys min/max/frozen are optionnals (so you can prepare shorter files).\n",
    "\n",
    "If you want to write this list of models to disk and read it back later you can use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "models.write(\"models.yaml\", overwrite=True)\n",
    "models_read = SkyModels.read(\"models.yaml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionnaly the models can exported and imported togeter with the data using the `Datasets.read()` and `Datasets.write()` methods as shown in the [analysis_mwl](analysis_mwl) notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
