{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.cube import SafeMaskMaker\n",
    "from gammapy.maps import Map, WcsGeom\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.modeling import Fit, Datasets\n",
    "from gammapy.spectrum import (\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDataset,\n",
    "    SpectrumDatasetMaker,\n",
    "    FluxPointsEstimator,\n",
    "    FluxPointsDataset,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 101430\n",
      "- Median energy: 0.1 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 843\n",
      "- Median energy: 0.107 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No thresholds defined for obs Info for OBS_ID = 111630\n",
      "- Start time: 59300.83\n",
      "- Pointing pos: RA 130.89 deg / Dec -44.63 deg\n",
      "- Observation duration: 1800.0 s\n",
      "- Dead-time fraction: 2.000 %\n",
      "\n"
     ]
    }
   ],
   "source": [
    "e_true = np.logspace(-2.5, 1, 100) * u.TeV\n",
    "e_reco = np.logspace(-2, 1, 30) * u.TeV\n",
    "\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "dataset_maker = SpectrumDatasetMaker()\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(dataset_empty, obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 98\n",
      "\ttotal stat : 5.69\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model)\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model\n",
    "    dataset.mask_fit = dataset.counts.energy_mask(emin=emin_fit, emax=emax_fit)\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "model.spectral_model.parameters.covariance = joint_result.parameters.covariance\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.model = model\n",
    "\n",
    "fpe = FluxPointsEstimator(datasets=[dataset], e_edges=e_edges)\n",
    "\n",
    "flux_points = fpe.run()\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11cbeb2e8>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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CjAuqztq1CjCwsIYNGhQofeLjY2lbdu23H333dxwww0MGjSI5ORkAI4dO8ZNN91Ex44d6dSpE8ePHy/0PnnVqFGDJ554gs6dO3PTTTexY8cOBgwYgL+/P2vXrgUgJSWFO++8kw4dOhAUFGSacTA5ORmDwUBAQACjR482xQPGRX569uxJp06dGDVqlGlK43Khta72W+fOnbUQQtiqQ4cO5drv379/vm3+/Plaa60TExML/Hzx4sVaa60TEhLyfVYS7u7uWmut09PTdXh4uP7mm2+01lpv3LhR33333TozM1NnZGTooUOH6p9//llrrXWTJk10QkKC1lrrGTNm6KVLl2qttb548aJu2bKlvnr1ql68eLH29fXV58+fL/J+J0+e1Pb29nrv3r1aa61HjRplul+3bt306tWrtdZaJycn68TExCLjMgfoDRs2aK21Hj58uA4JCdGpqal63759umPHjlprrefOnasnTJigtdY6OjpaN2rUSCcnJ+s33nhD33nnnVprrf/44w9tb2+vd+7cqRMSEnTfvn311atXtdZaz5kzR7/wwgumP7udO3fmiyPvn3FWbLt0ATmx0s/Vr5TyB54GPLXW4YUdE0IIUXllz9UfGxtL586dCQkJAci1LC/A1atXOXr0KP369ct1/aZNm1i7di1z584FjG/Rf//9NwAhISHUqVOnyPs1btyYZs2amdYL6Ny5M7GxsVy5coXTp09z6623AuDi4lKquJycnBgyZAhgXMbX2dkZR0dH05K+ANu2beP+++8HoE2bNjRp0oQjR46wZcsWHnjgAQACAgIICAgA4LfffuPQoUP07t0bgNTUVNNaBuXBoolfKfUJEArEa63bmx0fArwD2AMfaa0LXSdSa30CmKSUWlnUMSGEECXz008/FfqZm5tbkZ/XrVu3yM8Lk93Gf/nyZUJDQ5k/fz4PPPBAkcvymtNas2rVKlq3bp3r+O+//467u3uu8wq6X2xsbK7ld+3t7UlOTkYXsl5NSeNydHQ0Lc1b2JK+hT0DKHBZX601ISEhREZGFvnssrJ0G/+nwBDzA0ope2A+cDPQDohQSrVTSnVQSq3Ps3lbOD4hhBAVyNPTk3nz5jF37lzS0tIKXZY3r8GDB/Puu++akujevXsLvH9J75etZs2a+Pn5mVbOu3btGklJSaW+T1H69etn6qB45MgR/v77b1q3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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "ax_spectrum, ax_residual = flux_points_dataset.peek()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residual.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
